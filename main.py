import xml.etree.ElementTree as ElementTree
import sys            

for svd in sys.argv[1:]:
    tree = ElementTree.parse(svd)
    root = tree.getroot()
    deviceName = tree.find("name").text

    with open("{}.hpp".format(deviceName), 'w') as f:
        print(deviceName)
        f.write("// This is a file generated by svd-alias.\n\n")
        f.write("#pragma once\n\n")
        f.write("#include \"svd-alias/bit-field.hpp\"\n")
        f.write("#include \"svd-alias/register.hpp\"\n\n")
        f.write('struct %s {\n' % deviceName)
        for peripheral in root.iter("peripheral"):
            peripheralName = peripheral.find("name").text
            baseAddress = int(peripheral.find("baseAddress").text, 16)
            print("\t{}: {}".format(peripheralName, hex(baseAddress)))
            if peripheral.attrib and peripheral.attrib["derivedFrom"]:
                for tmp in root.iter("peripheral"):
                    if peripheral.attrib["derivedFrom"] == tmp.find("name").text:
                        peripheral = tmp
                        break

            if peripheral.find("description") is not None:
                peripheralDescription = peripheral.find("description").text
                f.write('    // %s\n' % ' '.join(peripheralDescription.replace('\n', ' ').replace('\r', '').split()))
            
            f.write('    struct %s {\n' % peripheralName)
            for register in peripheral.iter("register"):
                registerName = register.find("name").text
                addressOffset = int(register.find("addressOffset").text, 16)
                if register.find("description") is not None:
                    registerDescription = register.find("description").text
                    f.write('        // %s\n' % ' '.join(registerDescription.replace('\n', ' ').replace('\r', '').split()))
                
                f.write('        struct %s : public Register<%s> {\n' % (registerName, hex(baseAddress + addressOffset)))
                for field in register.iter("field"):
                    fieldDescription = field.find("description");
                    fieldName = field.find("name").text
                    bitWidth = field.find("bitWidth").text
                    bitOffset = field.find("bitOffset").text
                    f.write('            using %s = Field<%s, %s>;' % (fieldName, bitOffset, bitWidth))
                    if fieldDescription is not None:
                        f.write('    // %s' % ' '.join(fieldDescription.text.replace('\n', ' ').replace('\r', '').split()))
                    
                    f.write('\n')

                f.write('        };\n\n')

            f.write('    };\n\n')

        f.write('};\n')
