// This is a file generated by svd-alias.

#pragma once

#include "svd-alias/bit-field.hpp"
#include "svd-alias/register.hpp"

struct STM32L4x1 {
    // Digital-to-analog converter
    struct DAC1 {
        // control register
        struct CR : public Register<0x40007400> {
            using EN1 = Field<0, 1>;    // DAC channel1 enable
            using TEN1 = Field<2, 1>;    // DAC channel1 trigger enable
            using TSEL1 = Field<3, 3>;    // DAC channel1 trigger selection
            using WAVE1 = Field<6, 2>;    // DAC channel1 noise/triangle wave generation enable
            using MAMP1 = Field<8, 4>;    // DAC channel1 mask/amplitude selector
            using DMAEN1 = Field<12, 1>;    // DAC channel1 DMA enable
            using DMAUDRIE1 = Field<13, 1>;    // DAC channel1 DMA Underrun Interrupt enable
            using CEN1 = Field<14, 1>;    // DAC Channel 1 calibration enable
            using EN2 = Field<16, 1>;    // DAC channel2 enable
            using TEN2 = Field<18, 1>;    // DAC channel2 trigger enable
            using TSEL2 = Field<19, 3>;    // DAC channel2 trigger selection
            using WAVE2 = Field<22, 2>;    // DAC channel2 noise/triangle wave generation enable
            using MAMP2 = Field<24, 4>;    // DAC channel2 mask/amplitude selector
            using DMAEN2 = Field<28, 1>;    // DAC channel2 DMA enable
            using DMAUDRIE2 = Field<29, 1>;    // DAC channel2 DMA underrun interrupt enable
            using CEN2 = Field<30, 1>;    // DAC Channel 2 calibration enable
        };

        // software trigger register
        struct SWTRIGR : public RegisterWriteOnly<0x40007404> {
            using SWTRIG1 = Field<0, 1>;    // DAC channel1 software trigger
            using SWTRIG2 = Field<1, 1>;    // DAC channel2 software trigger
        };

        // channel1 12-bit right-aligned data holding register
        struct DHR12R1 : public Register<0x40007408> {
            using DACC1DHR = Field<0, 12>;    // DAC channel1 12-bit right-aligned data
        };

        // channel1 12-bit left-aligned data holding register
        struct DHR12L1 : public Register<0x4000740c> {
            using DACC1DHR = Field<4, 12>;    // DAC channel1 12-bit left-aligned data
        };

        // channel1 8-bit right-aligned data holding register
        struct DHR8R1 : public Register<0x40007410> {
            using DACC1DHR = Field<0, 8>;    // DAC channel1 8-bit right-aligned data
        };

        // channel2 12-bit right aligned data holding register
        struct DHR12R2 : public Register<0x40007414> {
            using DACC2DHR = Field<0, 12>;    // DAC channel2 12-bit right-aligned data
        };

        // channel2 12-bit left aligned data holding register
        struct DHR12L2 : public Register<0x40007418> {
            using DACC2DHR = Field<4, 12>;    // DAC channel2 12-bit left-aligned data
        };

        // channel2 8-bit right-aligned data holding register
        struct DHR8R2 : public Register<0x4000741c> {
            using DACC2DHR = Field<0, 8>;    // DAC channel2 8-bit right-aligned data
        };

        // Dual DAC 12-bit right-aligned data holding register
        struct DHR12RD : public Register<0x40007420> {
            using DACC1DHR = Field<0, 12>;    // DAC channel1 12-bit right-aligned data
            using DACC2DHR = Field<16, 12>;    // DAC channel2 12-bit right-aligned data
        };

        // DUAL DAC 12-bit left aligned data holding register
        struct DHR12LD : public Register<0x40007424> {
            using DACC1DHR = Field<4, 12>;    // DAC channel1 12-bit left-aligned data
            using DACC2DHR = Field<20, 12>;    // DAC channel2 12-bit left-aligned data
        };

        // DUAL DAC 8-bit right aligned data holding register
        struct DHR8RD : public Register<0x40007428> {
            using DACC1DHR = Field<0, 8>;    // DAC channel1 8-bit right-aligned data
            using DACC2DHR = Field<8, 8>;    // DAC channel2 8-bit right-aligned data
        };

        // channel1 data output register
        struct DOR1 : public RegisterReadOnly<0x4000742c> {
            using DACC1DOR = Field<0, 12>;    // DAC channel1 data output
        };

        // channel2 data output register
        struct DOR2 : public RegisterReadOnly<0x40007430> {
            using DACC2DOR = Field<0, 12>;    // DAC channel2 data output
        };

        // status register
        struct SR : public Register<0x40007434> {
            using DMAUDR1 = Field<13, 1>;    // DAC channel1 DMA underrun flag
            using CAL_FLAG1 = Field<14, 1>;    // DAC Channel 1 calibration offset status
            using BWST1 = Field<15, 1>;    // DAC Channel 1 busy writing sample time flag
            using DMAUDR2 = Field<29, 1>;    // DAC channel2 DMA underrun flag
            using CAL_FLAG2 = Field<30, 1>;    // DAC Channel 2 calibration offset status
            using BWST2 = Field<31, 1>;    // DAC Channel 2 busy writing sample time flag
        };

        // calibration control register
        struct CCR : public Register<0x40007438> {
            using OTRIM1 = Field<0, 5>;    // DAC Channel 1 offset trimming value
            using OTRIM2 = Field<16, 5>;    // DAC Channel 2 offset trimming value
        };

        // mode control register
        struct MCR : public Register<0x4000743c> {
            using MODE1 = Field<0, 3>;    // DAC Channel 1 mode
            using MODE2 = Field<16, 3>;    // DAC Channel 2 mode
        };

        // Sample and Hold sample time register 1
        struct SHSR1 : public Register<0x40007440> {
            using TSAMPLE1 = Field<0, 10>;    // DAC Channel 1 sample Time
        };

        // Sample and Hold sample time register 2
        struct SHSR2 : public Register<0x40007444> {
            using TSAMPLE2 = Field<0, 10>;    // DAC Channel 2 sample Time
        };

        // Sample and Hold hold time register
        struct SHHR : public Register<0x40007448> {
            using THOLD1 = Field<0, 10>;    // DAC Channel 1 hold Time
            using THOLD2 = Field<16, 10>;    // DAC Channel 2 hold time
        };

        // Sample and Hold refresh time register
        struct SHRR : public Register<0x4000744c> {
            using TREFRESH1 = Field<0, 8>;    // DAC Channel 1 refresh Time
            using TREFRESH2 = Field<16, 8>;    // DAC Channel 2 refresh Time
        };

    };

    // Direct memory access controller
    struct DMA1 {
        // interrupt status register
        struct ISR : public RegisterReadOnly<0x40020000> {
            using TEIF7 = Field<27, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF7 = Field<26, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF7 = Field<25, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF7 = Field<24, 1>;    // Channel x global interrupt flag (x = 1 ..7)
            using TEIF6 = Field<23, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF6 = Field<22, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF6 = Field<21, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF6 = Field<20, 1>;    // Channel x global interrupt flag (x = 1 ..7)
            using TEIF5 = Field<19, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF5 = Field<18, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF5 = Field<17, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF5 = Field<16, 1>;    // Channel x global interrupt flag (x = 1 ..7)
            using TEIF4 = Field<15, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF4 = Field<14, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF4 = Field<13, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF4 = Field<12, 1>;    // Channel x global interrupt flag (x = 1 ..7)
            using TEIF3 = Field<11, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF3 = Field<10, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF3 = Field<9, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF3 = Field<8, 1>;    // Channel x global interrupt flag (x = 1 ..7)
            using TEIF2 = Field<7, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF2 = Field<6, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF2 = Field<5, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF2 = Field<4, 1>;    // Channel x global interrupt flag (x = 1 ..7)
            using TEIF1 = Field<3, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF1 = Field<2, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF1 = Field<1, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF1 = Field<0, 1>;    // Channel x global interrupt flag (x = 1 ..7)
        };

        // interrupt flag clear register
        struct IFCR : public RegisterWriteOnly<0x40020004> {
            using CTEIF7 = Field<27, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF7 = Field<26, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF7 = Field<25, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF7 = Field<24, 1>;    // Channel x global interrupt clear (x = 1 ..7)
            using CTEIF6 = Field<23, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF6 = Field<22, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF6 = Field<21, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF6 = Field<20, 1>;    // Channel x global interrupt clear (x = 1 ..7)
            using CTEIF5 = Field<19, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF5 = Field<18, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF5 = Field<17, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF5 = Field<16, 1>;    // Channel x global interrupt clear (x = 1 ..7)
            using CTEIF4 = Field<15, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF4 = Field<14, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF4 = Field<13, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF4 = Field<12, 1>;    // Channel x global interrupt clear (x = 1 ..7)
            using CTEIF3 = Field<11, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF3 = Field<10, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF3 = Field<9, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF3 = Field<8, 1>;    // Channel x global interrupt clear (x = 1 ..7)
            using CTEIF2 = Field<7, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF2 = Field<6, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF2 = Field<5, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF2 = Field<4, 1>;    // Channel x global interrupt clear (x = 1 ..7)
            using CTEIF1 = Field<3, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF1 = Field<2, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF1 = Field<1, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF1 = Field<0, 1>;    // Channel x global interrupt clear (x = 1 ..7)
        };

        // channel x configuration register
        struct CCR1 : public Register<0x40020008> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR1 : public Register<0x4002000c> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR1 : public Register<0x40020010> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR1 : public Register<0x40020014> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel x configuration register
        struct CCR2 : public Register<0x4002001c> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR2 : public Register<0x40020020> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR2 : public Register<0x40020024> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR2 : public Register<0x40020028> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel x configuration register
        struct CCR3 : public Register<0x40020030> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR3 : public Register<0x40020034> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR3 : public Register<0x40020038> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR3 : public Register<0x4002003c> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel x configuration register
        struct CCR4 : public Register<0x40020044> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR4 : public Register<0x40020048> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR4 : public Register<0x4002004c> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR4 : public Register<0x40020050> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel x configuration register
        struct CCR5 : public Register<0x40020058> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR5 : public Register<0x4002005c> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR5 : public Register<0x40020060> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR5 : public Register<0x40020064> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel x configuration register
        struct CCR6 : public Register<0x4002006c> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR6 : public Register<0x40020070> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR6 : public Register<0x40020074> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR6 : public Register<0x40020078> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel x configuration register
        struct CCR7 : public Register<0x40020080> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR7 : public Register<0x40020084> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR7 : public Register<0x40020088> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR7 : public Register<0x4002008c> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel selection register
        struct CSELR : public Register<0x400200a8> {
            using C7S = Field<24, 4>;    // DMA channel 7 selection
            using C6S = Field<20, 4>;    // DMA channel 6 selection
            using C5S = Field<16, 4>;    // DMA channel 5 selection
            using C4S = Field<12, 4>;    // DMA channel 4 selection
            using C3S = Field<8, 4>;    // DMA channel 3 selection
            using C2S = Field<4, 4>;    // DMA channel 2 selection
            using C1S = Field<0, 4>;    // DMA channel 1 selection
        };

    };

    // Direct memory access controller
    struct DMA2 {
        // interrupt status register
        struct ISR : public RegisterReadOnly<0x40020400> {
            using TEIF7 = Field<27, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF7 = Field<26, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF7 = Field<25, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF7 = Field<24, 1>;    // Channel x global interrupt flag (x = 1 ..7)
            using TEIF6 = Field<23, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF6 = Field<22, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF6 = Field<21, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF6 = Field<20, 1>;    // Channel x global interrupt flag (x = 1 ..7)
            using TEIF5 = Field<19, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF5 = Field<18, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF5 = Field<17, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF5 = Field<16, 1>;    // Channel x global interrupt flag (x = 1 ..7)
            using TEIF4 = Field<15, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF4 = Field<14, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF4 = Field<13, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF4 = Field<12, 1>;    // Channel x global interrupt flag (x = 1 ..7)
            using TEIF3 = Field<11, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF3 = Field<10, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF3 = Field<9, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF3 = Field<8, 1>;    // Channel x global interrupt flag (x = 1 ..7)
            using TEIF2 = Field<7, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF2 = Field<6, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF2 = Field<5, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF2 = Field<4, 1>;    // Channel x global interrupt flag (x = 1 ..7)
            using TEIF1 = Field<3, 1>;    // Channel x transfer error flag (x = 1 ..7)
            using HTIF1 = Field<2, 1>;    // Channel x half transfer flag (x = 1 ..7)
            using TCIF1 = Field<1, 1>;    // Channel x transfer complete flag (x = 1 ..7)
            using GIF1 = Field<0, 1>;    // Channel x global interrupt flag (x = 1 ..7)
        };

        // interrupt flag clear register
        struct IFCR : public RegisterWriteOnly<0x40020404> {
            using CTEIF7 = Field<27, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF7 = Field<26, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF7 = Field<25, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF7 = Field<24, 1>;    // Channel x global interrupt clear (x = 1 ..7)
            using CTEIF6 = Field<23, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF6 = Field<22, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF6 = Field<21, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF6 = Field<20, 1>;    // Channel x global interrupt clear (x = 1 ..7)
            using CTEIF5 = Field<19, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF5 = Field<18, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF5 = Field<17, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF5 = Field<16, 1>;    // Channel x global interrupt clear (x = 1 ..7)
            using CTEIF4 = Field<15, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF4 = Field<14, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF4 = Field<13, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF4 = Field<12, 1>;    // Channel x global interrupt clear (x = 1 ..7)
            using CTEIF3 = Field<11, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF3 = Field<10, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF3 = Field<9, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF3 = Field<8, 1>;    // Channel x global interrupt clear (x = 1 ..7)
            using CTEIF2 = Field<7, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF2 = Field<6, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF2 = Field<5, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF2 = Field<4, 1>;    // Channel x global interrupt clear (x = 1 ..7)
            using CTEIF1 = Field<3, 1>;    // Channel x transfer error clear (x = 1 ..7)
            using CHTIF1 = Field<2, 1>;    // Channel x half transfer clear (x = 1 ..7)
            using CTCIF1 = Field<1, 1>;    // Channel x transfer complete clear (x = 1 ..7)
            using CGIF1 = Field<0, 1>;    // Channel x global interrupt clear (x = 1 ..7)
        };

        // channel x configuration register
        struct CCR1 : public Register<0x40020408> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR1 : public Register<0x4002040c> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR1 : public Register<0x40020410> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR1 : public Register<0x40020414> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel x configuration register
        struct CCR2 : public Register<0x4002041c> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR2 : public Register<0x40020420> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR2 : public Register<0x40020424> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR2 : public Register<0x40020428> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel x configuration register
        struct CCR3 : public Register<0x40020430> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR3 : public Register<0x40020434> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR3 : public Register<0x40020438> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR3 : public Register<0x4002043c> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel x configuration register
        struct CCR4 : public Register<0x40020444> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR4 : public Register<0x40020448> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR4 : public Register<0x4002044c> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR4 : public Register<0x40020450> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel x configuration register
        struct CCR5 : public Register<0x40020458> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR5 : public Register<0x4002045c> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR5 : public Register<0x40020460> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR5 : public Register<0x40020464> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel x configuration register
        struct CCR6 : public Register<0x4002046c> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR6 : public Register<0x40020470> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR6 : public Register<0x40020474> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR6 : public Register<0x40020478> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel x configuration register
        struct CCR7 : public Register<0x40020480> {
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
            using PL = Field<12, 2>;    // Channel priority level
            using MSIZE = Field<10, 2>;    // Memory size
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MINC = Field<7, 1>;    // Memory increment mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using CIRC = Field<5, 1>;    // Circular mode
            using DIR = Field<4, 1>;    // Data transfer direction
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using HTIE = Field<2, 1>;    // Half transfer interrupt enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using EN = Field<0, 1>;    // Channel enable
        };

        // channel x number of data register
        struct CNDTR7 : public Register<0x40020484> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // channel x peripheral address register
        struct CPAR7 : public Register<0x40020488> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // channel x memory address register
        struct CMAR7 : public Register<0x4002048c> {
            using MA = Field<0, 32>;    // Memory address
        };

        // channel selection register
        struct CSELR : public Register<0x400204a8> {
            using C7S = Field<24, 4>;    // DMA channel 7 selection
            using C6S = Field<20, 4>;    // DMA channel 6 selection
            using C5S = Field<16, 4>;    // DMA channel 5 selection
            using C4S = Field<12, 4>;    // DMA channel 4 selection
            using C3S = Field<8, 4>;    // DMA channel 3 selection
            using C2S = Field<4, 4>;    // DMA channel 2 selection
            using C1S = Field<0, 4>;    // DMA channel 1 selection
        };

    };

    // Cyclic redundancy check calculation unit
    struct CRC {
        // Data register
        struct DR : public Register<0x40023000> {
            using Field = Field<0, 32>;    // Data register bits
        };

        // Independent data register
        struct IDR : public Register<0x40023004> {
            using Field = Field<0, 8>;    // General-purpose 8-bit data register bits
        };

        // Control register
        struct CR : public Register<0x40023008> {
            using REV_OUT = Field<7, 1>;    // Reverse output data
            using REV_IN = Field<5, 2>;    // Reverse input data
            using POLYSIZE = Field<3, 2>;    // Polynomial size
            using RESET = Field<0, 1>;    // RESET bit
        };

        // Initial CRC value
        struct INIT : public Register<0x40023010> {
            using CRC_INIT = Field<0, 32>;    // Programmable initial CRC value
        };

        // polynomial
        struct POL : public Register<0x40023014> {
            using Polynomialcoefficients = Field<0, 32>;    // Programmable polynomial
        };

    };

    // Liquid crystal display controller
    struct LCD {
        // control register
        struct CR : public Register<0x40002400> {
            using BIAS = Field<5, 2>;    // Bias selector
            using DUTY = Field<2, 3>;    // Duty selection
            using VSEL = Field<1, 1>;    // Voltage source selection
            using LCDEN = Field<0, 1>;    // LCD controller enable
            using MUX_SEG = Field<7, 1>;    // Mux segment enable
            using BUFEN = Field<8, 1>;    // Voltage output buffer enable
        };

        // frame control register
        struct FCR : public Register<0x40002404> {
            using PS = Field<22, 4>;    // PS 16-bit prescaler
            using DIV = Field<18, 4>;    // DIV clock divider
            using BLINK = Field<16, 2>;    // Blink mode selection
            using BLINKF = Field<13, 3>;    // Blink frequency selection
            using CC = Field<10, 3>;    // Contrast control
            using DEAD = Field<7, 3>;    // Dead time duration
            using PON = Field<4, 3>;    // Pulse ON duration
            using UDDIE = Field<3, 1>;    // Update display done interrupt enable
            using SOFIE = Field<1, 1>;    // Start of frame interrupt enable
            using HD = Field<0, 1>;    // High drive enable
        };

        // status register
        struct SR : public Register<0x40002408> {
            using FCRSF = Field<5, 1>;    // LCD Frame Control Register Synchronization flag
            using RDY = Field<4, 1>;    // Ready flag
            using UDD = Field<3, 1>;    // Update Display Done
            using UDR = Field<2, 1>;    // Update display request
            using SOF = Field<1, 1>;    // Start of frame flag
            using ENS = Field<0, 1>;    // ENS
        };

        // clear register
        struct CLR : public RegisterWriteOnly<0x4000240c> {
            using UDDC = Field<3, 1>;    // Update display done clear
            using SOFC = Field<1, 1>;    // Start of frame flag clear
        };

        // display memory
        struct RAM_COM0 : public Register<0x40002414> {
            using S30 = Field<30, 1>;    // S30
            using S29 = Field<29, 1>;    // S29
            using S28 = Field<28, 1>;    // S28
            using S27 = Field<27, 1>;    // S27
            using S26 = Field<26, 1>;    // S26
            using S25 = Field<25, 1>;    // S25
            using S24 = Field<24, 1>;    // S24
            using S23 = Field<23, 1>;    // S23
            using S22 = Field<22, 1>;    // S22
            using S21 = Field<21, 1>;    // S21
            using S20 = Field<20, 1>;    // S20
            using S19 = Field<19, 1>;    // S19
            using S18 = Field<18, 1>;    // S18
            using S17 = Field<17, 1>;    // S17
            using S16 = Field<16, 1>;    // S16
            using S15 = Field<15, 1>;    // S15
            using S14 = Field<14, 1>;    // S14
            using S13 = Field<13, 1>;    // S13
            using S12 = Field<12, 1>;    // S12
            using S11 = Field<11, 1>;    // S11
            using S10 = Field<10, 1>;    // S10
            using S09 = Field<9, 1>;    // S09
            using S08 = Field<8, 1>;    // S08
            using S07 = Field<7, 1>;    // S07
            using S06 = Field<6, 1>;    // S06
            using S05 = Field<5, 1>;    // S05
            using S04 = Field<4, 1>;    // S04
            using S03 = Field<3, 1>;    // S03
            using S02 = Field<2, 1>;    // S02
            using S01 = Field<1, 1>;    // S01
            using S00 = Field<0, 1>;    // S00
        };

        // display memory
        struct RAM_COM1 : public Register<0x4000241c> {
            using S31 = Field<31, 1>;    // S31
            using S30 = Field<30, 1>;    // S30
            using S29 = Field<29, 1>;    // S29
            using S28 = Field<28, 1>;    // S28
            using S27 = Field<27, 1>;    // S27
            using S26 = Field<26, 1>;    // S26
            using S25 = Field<25, 1>;    // S25
            using S24 = Field<24, 1>;    // S24
            using S23 = Field<23, 1>;    // S23
            using S22 = Field<22, 1>;    // S22
            using S21 = Field<21, 1>;    // S21
            using S20 = Field<20, 1>;    // S20
            using S19 = Field<19, 1>;    // S19
            using S18 = Field<18, 1>;    // S18
            using S17 = Field<17, 1>;    // S17
            using S16 = Field<16, 1>;    // S16
            using S15 = Field<15, 1>;    // S15
            using S14 = Field<14, 1>;    // S14
            using S13 = Field<13, 1>;    // S13
            using S12 = Field<12, 1>;    // S12
            using S11 = Field<11, 1>;    // S11
            using S10 = Field<10, 1>;    // S10
            using S09 = Field<9, 1>;    // S09
            using S08 = Field<8, 1>;    // S08
            using S07 = Field<7, 1>;    // S07
            using S06 = Field<6, 1>;    // S06
            using S05 = Field<5, 1>;    // S05
            using S04 = Field<4, 1>;    // S04
            using S03 = Field<3, 1>;    // S03
            using S02 = Field<2, 1>;    // S02
            using S01 = Field<1, 1>;    // S01
            using S00 = Field<0, 1>;    // S00
        };

        // display memory
        struct RAM_COM2 : public Register<0x40002424> {
            using S31 = Field<31, 1>;    // S31
            using S30 = Field<30, 1>;    // S30
            using S29 = Field<29, 1>;    // S29
            using S28 = Field<28, 1>;    // S28
            using S27 = Field<27, 1>;    // S27
            using S26 = Field<26, 1>;    // S26
            using S25 = Field<25, 1>;    // S25
            using S24 = Field<24, 1>;    // S24
            using S23 = Field<23, 1>;    // S23
            using S22 = Field<22, 1>;    // S22
            using S21 = Field<21, 1>;    // S21
            using S20 = Field<20, 1>;    // S20
            using S19 = Field<19, 1>;    // S19
            using S18 = Field<18, 1>;    // S18
            using S17 = Field<17, 1>;    // S17
            using S16 = Field<16, 1>;    // S16
            using S15 = Field<15, 1>;    // S15
            using S14 = Field<14, 1>;    // S14
            using S13 = Field<13, 1>;    // S13
            using S12 = Field<12, 1>;    // S12
            using S11 = Field<11, 1>;    // S11
            using S10 = Field<10, 1>;    // S10
            using S09 = Field<9, 1>;    // S09
            using S08 = Field<8, 1>;    // S08
            using S07 = Field<7, 1>;    // S07
            using S06 = Field<6, 1>;    // S06
            using S05 = Field<5, 1>;    // S05
            using S04 = Field<4, 1>;    // S04
            using S03 = Field<3, 1>;    // S03
            using S02 = Field<2, 1>;    // S02
            using S01 = Field<1, 1>;    // S01
            using S00 = Field<0, 1>;    // S00
        };

        // display memory
        struct RAM_COM3 : public Register<0x4000242c> {
            using S31 = Field<31, 1>;    // S31
            using S30 = Field<30, 1>;    // S30
            using S29 = Field<29, 1>;    // S29
            using S28 = Field<28, 1>;    // S28
            using S27 = Field<27, 1>;    // S27
            using S26 = Field<26, 1>;    // S26
            using S25 = Field<25, 1>;    // S25
            using S24 = Field<24, 1>;    // S24
            using S23 = Field<23, 1>;    // S23
            using S22 = Field<22, 1>;    // S22
            using S21 = Field<21, 1>;    // S21
            using S20 = Field<20, 1>;    // S20
            using S19 = Field<19, 1>;    // S19
            using S18 = Field<18, 1>;    // S18
            using S17 = Field<17, 1>;    // S17
            using S16 = Field<16, 1>;    // S16
            using S15 = Field<15, 1>;    // S15
            using S14 = Field<14, 1>;    // S14
            using S13 = Field<13, 1>;    // S13
            using S12 = Field<12, 1>;    // S12
            using S11 = Field<11, 1>;    // S11
            using S10 = Field<10, 1>;    // S10
            using S09 = Field<9, 1>;    // S09
            using S08 = Field<8, 1>;    // S08
            using S07 = Field<7, 1>;    // S07
            using S06 = Field<6, 1>;    // S06
            using S05 = Field<5, 1>;    // S05
            using S04 = Field<4, 1>;    // S04
            using S03 = Field<3, 1>;    // S03
            using S02 = Field<2, 1>;    // S02
            using S01 = Field<1, 1>;    // S01
            using S00 = Field<0, 1>;    // S00
        };

        // display memory
        struct RAM_COM4 : public Register<0x40002434> {
            using S31 = Field<31, 1>;    // S31
            using S30 = Field<30, 1>;    // S30
            using S29 = Field<29, 1>;    // S29
            using S28 = Field<28, 1>;    // S28
            using S27 = Field<27, 1>;    // S27
            using S26 = Field<26, 1>;    // S26
            using S25 = Field<25, 1>;    // S25
            using S24 = Field<24, 1>;    // S24
            using S23 = Field<23, 1>;    // S23
            using S22 = Field<22, 1>;    // S22
            using S21 = Field<21, 1>;    // S21
            using S20 = Field<20, 1>;    // S20
            using S19 = Field<19, 1>;    // S19
            using S18 = Field<18, 1>;    // S18
            using S17 = Field<17, 1>;    // S17
            using S16 = Field<16, 1>;    // S16
            using S15 = Field<15, 1>;    // S15
            using S14 = Field<14, 1>;    // S14
            using S13 = Field<13, 1>;    // S13
            using S12 = Field<12, 1>;    // S12
            using S11 = Field<11, 1>;    // S11
            using S10 = Field<10, 1>;    // S10
            using S09 = Field<9, 1>;    // S09
            using S08 = Field<8, 1>;    // S08
            using S07 = Field<7, 1>;    // S07
            using S06 = Field<6, 1>;    // S06
            using S05 = Field<5, 1>;    // S05
            using S04 = Field<4, 1>;    // S04
            using S03 = Field<3, 1>;    // S03
            using S02 = Field<2, 1>;    // S02
            using S01 = Field<1, 1>;    // S01
            using S00 = Field<0, 1>;    // S00
        };

        // display memory
        struct RAM_COM5 : public Register<0x4000243c> {
            using S31 = Field<31, 1>;    // S31
            using S30 = Field<30, 1>;    // S30
            using S29 = Field<29, 1>;    // S29
            using S28 = Field<28, 1>;    // S28
            using S27 = Field<27, 1>;    // S27
            using S26 = Field<26, 1>;    // S26
            using S25 = Field<25, 1>;    // S25
            using S24 = Field<24, 1>;    // S24
            using S23 = Field<23, 1>;    // S23
            using S22 = Field<22, 1>;    // S22
            using S21 = Field<21, 1>;    // S21
            using S20 = Field<20, 1>;    // S20
            using S19 = Field<19, 1>;    // S19
            using S18 = Field<18, 1>;    // S18
            using S17 = Field<17, 1>;    // S17
            using S16 = Field<16, 1>;    // S16
            using S15 = Field<15, 1>;    // S15
            using S14 = Field<14, 1>;    // S14
            using S13 = Field<13, 1>;    // S13
            using S12 = Field<12, 1>;    // S12
            using S11 = Field<11, 1>;    // S11
            using S10 = Field<10, 1>;    // S10
            using S09 = Field<9, 1>;    // S09
            using S08 = Field<8, 1>;    // S08
            using S07 = Field<7, 1>;    // S07
            using S06 = Field<6, 1>;    // S06
            using S05 = Field<5, 1>;    // S05
            using S04 = Field<4, 1>;    // S04
            using S03 = Field<3, 1>;    // S03
            using S02 = Field<2, 1>;    // S02
            using S01 = Field<1, 1>;    // S01
            using S00 = Field<0, 1>;    // S00
        };

        // display memory
        struct RAM_COM6 : public Register<0x40002444> {
            using S31 = Field<31, 1>;    // S31
            using S30 = Field<30, 1>;    // S30
            using S29 = Field<29, 1>;    // S29
            using S28 = Field<28, 1>;    // S28
            using S27 = Field<27, 1>;    // S27
            using S26 = Field<26, 1>;    // S26
            using S25 = Field<25, 1>;    // S25
            using S24 = Field<24, 1>;    // S24
            using S23 = Field<23, 1>;    // S23
            using S22 = Field<22, 1>;    // S22
            using S21 = Field<21, 1>;    // S21
            using S20 = Field<20, 1>;    // S20
            using S19 = Field<19, 1>;    // S19
            using S18 = Field<18, 1>;    // S18
            using S17 = Field<17, 1>;    // S17
            using S16 = Field<16, 1>;    // S16
            using S15 = Field<15, 1>;    // S15
            using S14 = Field<14, 1>;    // S14
            using S13 = Field<13, 1>;    // S13
            using S12 = Field<12, 1>;    // S12
            using S11 = Field<11, 1>;    // S11
            using S10 = Field<10, 1>;    // S10
            using S09 = Field<9, 1>;    // S09
            using S08 = Field<8, 1>;    // S08
            using S07 = Field<7, 1>;    // S07
            using S06 = Field<6, 1>;    // S06
            using S05 = Field<5, 1>;    // S05
            using S04 = Field<4, 1>;    // S04
            using S03 = Field<3, 1>;    // S03
            using S02 = Field<2, 1>;    // S02
            using S01 = Field<1, 1>;    // S01
            using S00 = Field<0, 1>;    // S00
        };

        // display memory
        struct RAM_COM7 : public Register<0x4000244c> {
            using S31 = Field<31, 1>;    // S31
            using S30 = Field<30, 1>;    // S30
            using S29 = Field<29, 1>;    // S29
            using S28 = Field<28, 1>;    // S28
            using S27 = Field<27, 1>;    // S27
            using S26 = Field<26, 1>;    // S26
            using S25 = Field<25, 1>;    // S25
            using S24 = Field<24, 1>;    // S24
            using S23 = Field<23, 1>;    // S23
            using S22 = Field<22, 1>;    // S22
            using S21 = Field<21, 1>;    // S21
            using S20 = Field<20, 1>;    // S20
            using S19 = Field<19, 1>;    // S19
            using S18 = Field<18, 1>;    // S18
            using S17 = Field<17, 1>;    // S17
            using S16 = Field<16, 1>;    // S16
            using S15 = Field<15, 1>;    // S15
            using S14 = Field<14, 1>;    // S14
            using S13 = Field<13, 1>;    // S13
            using S12 = Field<12, 1>;    // S12
            using S11 = Field<11, 1>;    // S11
            using S10 = Field<10, 1>;    // S10
            using S09 = Field<9, 1>;    // S09
            using S08 = Field<8, 1>;    // S08
            using S07 = Field<7, 1>;    // S07
            using S06 = Field<6, 1>;    // S06
            using S05 = Field<5, 1>;    // S05
            using S04 = Field<4, 1>;    // S04
            using S03 = Field<3, 1>;    // S03
            using S02 = Field<2, 1>;    // S02
            using S01 = Field<1, 1>;    // S01
            using S00 = Field<0, 1>;    // S00
        };

    };

    // Touch sensing controller
    struct TSC {
        // control register
        struct CR : public Register<0x40024000> {
            using CTPH = Field<28, 4>;    // Charge transfer pulse high
            using CTPL = Field<24, 4>;    // Charge transfer pulse low
            using SSD = Field<17, 7>;    // Spread spectrum deviation
            using SSE = Field<16, 1>;    // Spread spectrum enable
            using SSPSC = Field<15, 1>;    // Spread spectrum prescaler
            using PGPSC = Field<12, 3>;    // pulse generator prescaler
            using MCV = Field<5, 3>;    // Max count value
            using IODEF = Field<4, 1>;    // I/O Default mode
            using SYNCPOL = Field<3, 1>;    // Synchronization pin polarity
            using AM = Field<2, 1>;    // Acquisition mode
            using START = Field<1, 1>;    // Start a new acquisition
            using TSCE = Field<0, 1>;    // Touch sensing controller enable
        };

        // interrupt enable register
        struct IER : public Register<0x40024004> {
            using MCEIE = Field<1, 1>;    // Max count error interrupt enable
            using EOAIE = Field<0, 1>;    // End of acquisition interrupt enable
        };

        // interrupt clear register
        struct ICR : public Register<0x40024008> {
            using MCEIC = Field<1, 1>;    // Max count error interrupt clear
            using EOAIC = Field<0, 1>;    // End of acquisition interrupt clear
        };

        // interrupt status register
        struct ISR : public Register<0x4002400c> {
            using MCEF = Field<1, 1>;    // Max count error flag
            using EOAF = Field<0, 1>;    // End of acquisition flag
        };

        // I/O hysteresis control register
        struct IOHCR : public Register<0x40024010> {
            using G8_IO4 = Field<31, 1>;    // G8_IO4
            using G8_IO3 = Field<30, 1>;    // G8_IO3
            using G8_IO2 = Field<29, 1>;    // G8_IO2
            using G8_IO1 = Field<28, 1>;    // G8_IO1
            using G7_IO4 = Field<27, 1>;    // G7_IO4
            using G7_IO3 = Field<26, 1>;    // G7_IO3
            using G7_IO2 = Field<25, 1>;    // G7_IO2
            using G7_IO1 = Field<24, 1>;    // G7_IO1
            using G6_IO4 = Field<23, 1>;    // G6_IO4
            using G6_IO3 = Field<22, 1>;    // G6_IO3
            using G6_IO2 = Field<21, 1>;    // G6_IO2
            using G6_IO1 = Field<20, 1>;    // G6_IO1
            using G5_IO4 = Field<19, 1>;    // G5_IO4
            using G5_IO3 = Field<18, 1>;    // G5_IO3
            using G5_IO2 = Field<17, 1>;    // G5_IO2
            using G5_IO1 = Field<16, 1>;    // G5_IO1
            using G4_IO4 = Field<15, 1>;    // G4_IO4
            using G4_IO3 = Field<14, 1>;    // G4_IO3
            using G4_IO2 = Field<13, 1>;    // G4_IO2
            using G4_IO1 = Field<12, 1>;    // G4_IO1
            using G3_IO4 = Field<11, 1>;    // G3_IO4
            using G3_IO3 = Field<10, 1>;    // G3_IO3
            using G3_IO2 = Field<9, 1>;    // G3_IO2
            using G3_IO1 = Field<8, 1>;    // G3_IO1
            using G2_IO4 = Field<7, 1>;    // G2_IO4
            using G2_IO3 = Field<6, 1>;    // G2_IO3
            using G2_IO2 = Field<5, 1>;    // G2_IO2
            using G2_IO1 = Field<4, 1>;    // G2_IO1
            using G1_IO4 = Field<3, 1>;    // G1_IO4
            using G1_IO3 = Field<2, 1>;    // G1_IO3
            using G1_IO2 = Field<1, 1>;    // G1_IO2
            using G1_IO1 = Field<0, 1>;    // G1_IO1
        };

        // I/O analog switch control register
        struct IOASCR : public Register<0x40024018> {
            using G8_IO4 = Field<31, 1>;    // G8_IO4
            using G8_IO3 = Field<30, 1>;    // G8_IO3
            using G8_IO2 = Field<29, 1>;    // G8_IO2
            using G8_IO1 = Field<28, 1>;    // G8_IO1
            using G7_IO4 = Field<27, 1>;    // G7_IO4
            using G7_IO3 = Field<26, 1>;    // G7_IO3
            using G7_IO2 = Field<25, 1>;    // G7_IO2
            using G7_IO1 = Field<24, 1>;    // G7_IO1
            using G6_IO4 = Field<23, 1>;    // G6_IO4
            using G6_IO3 = Field<22, 1>;    // G6_IO3
            using G6_IO2 = Field<21, 1>;    // G6_IO2
            using G6_IO1 = Field<20, 1>;    // G6_IO1
            using G5_IO4 = Field<19, 1>;    // G5_IO4
            using G5_IO3 = Field<18, 1>;    // G5_IO3
            using G5_IO2 = Field<17, 1>;    // G5_IO2
            using G5_IO1 = Field<16, 1>;    // G5_IO1
            using G4_IO4 = Field<15, 1>;    // G4_IO4
            using G4_IO3 = Field<14, 1>;    // G4_IO3
            using G4_IO2 = Field<13, 1>;    // G4_IO2
            using G4_IO1 = Field<12, 1>;    // G4_IO1
            using G3_IO4 = Field<11, 1>;    // G3_IO4
            using G3_IO3 = Field<10, 1>;    // G3_IO3
            using G3_IO2 = Field<9, 1>;    // G3_IO2
            using G3_IO1 = Field<8, 1>;    // G3_IO1
            using G2_IO4 = Field<7, 1>;    // G2_IO4
            using G2_IO3 = Field<6, 1>;    // G2_IO3
            using G2_IO2 = Field<5, 1>;    // G2_IO2
            using G2_IO1 = Field<4, 1>;    // G2_IO1
            using G1_IO4 = Field<3, 1>;    // G1_IO4
            using G1_IO3 = Field<2, 1>;    // G1_IO3
            using G1_IO2 = Field<1, 1>;    // G1_IO2
            using G1_IO1 = Field<0, 1>;    // G1_IO1
        };

        // I/O sampling control register
        struct IOSCR : public Register<0x40024020> {
            using G8_IO4 = Field<31, 1>;    // G8_IO4
            using G8_IO3 = Field<30, 1>;    // G8_IO3
            using G8_IO2 = Field<29, 1>;    // G8_IO2
            using G8_IO1 = Field<28, 1>;    // G8_IO1
            using G7_IO4 = Field<27, 1>;    // G7_IO4
            using G7_IO3 = Field<26, 1>;    // G7_IO3
            using G7_IO2 = Field<25, 1>;    // G7_IO2
            using G7_IO1 = Field<24, 1>;    // G7_IO1
            using G6_IO4 = Field<23, 1>;    // G6_IO4
            using G6_IO3 = Field<22, 1>;    // G6_IO3
            using G6_IO2 = Field<21, 1>;    // G6_IO2
            using G6_IO1 = Field<20, 1>;    // G6_IO1
            using G5_IO4 = Field<19, 1>;    // G5_IO4
            using G5_IO3 = Field<18, 1>;    // G5_IO3
            using G5_IO2 = Field<17, 1>;    // G5_IO2
            using G5_IO1 = Field<16, 1>;    // G5_IO1
            using G4_IO4 = Field<15, 1>;    // G4_IO4
            using G4_IO3 = Field<14, 1>;    // G4_IO3
            using G4_IO2 = Field<13, 1>;    // G4_IO2
            using G4_IO1 = Field<12, 1>;    // G4_IO1
            using G3_IO4 = Field<11, 1>;    // G3_IO4
            using G3_IO3 = Field<10, 1>;    // G3_IO3
            using G3_IO2 = Field<9, 1>;    // G3_IO2
            using G3_IO1 = Field<8, 1>;    // G3_IO1
            using G2_IO4 = Field<7, 1>;    // G2_IO4
            using G2_IO3 = Field<6, 1>;    // G2_IO3
            using G2_IO2 = Field<5, 1>;    // G2_IO2
            using G2_IO1 = Field<4, 1>;    // G2_IO1
            using G1_IO4 = Field<3, 1>;    // G1_IO4
            using G1_IO3 = Field<2, 1>;    // G1_IO3
            using G1_IO2 = Field<1, 1>;    // G1_IO2
            using G1_IO1 = Field<0, 1>;    // G1_IO1
        };

        // I/O channel control register
        struct IOCCR : public Register<0x40024028> {
            using G8_IO4 = Field<31, 1>;    // G8_IO4
            using G8_IO3 = Field<30, 1>;    // G8_IO3
            using G8_IO2 = Field<29, 1>;    // G8_IO2
            using G8_IO1 = Field<28, 1>;    // G8_IO1
            using G7_IO4 = Field<27, 1>;    // G7_IO4
            using G7_IO3 = Field<26, 1>;    // G7_IO3
            using G7_IO2 = Field<25, 1>;    // G7_IO2
            using G7_IO1 = Field<24, 1>;    // G7_IO1
            using G6_IO4 = Field<23, 1>;    // G6_IO4
            using G6_IO3 = Field<22, 1>;    // G6_IO3
            using G6_IO2 = Field<21, 1>;    // G6_IO2
            using G6_IO1 = Field<20, 1>;    // G6_IO1
            using G5_IO4 = Field<19, 1>;    // G5_IO4
            using G5_IO3 = Field<18, 1>;    // G5_IO3
            using G5_IO2 = Field<17, 1>;    // G5_IO2
            using G5_IO1 = Field<16, 1>;    // G5_IO1
            using G4_IO4 = Field<15, 1>;    // G4_IO4
            using G4_IO3 = Field<14, 1>;    // G4_IO3
            using G4_IO2 = Field<13, 1>;    // G4_IO2
            using G4_IO1 = Field<12, 1>;    // G4_IO1
            using G3_IO4 = Field<11, 1>;    // G3_IO4
            using G3_IO3 = Field<10, 1>;    // G3_IO3
            using G3_IO2 = Field<9, 1>;    // G3_IO2
            using G3_IO1 = Field<8, 1>;    // G3_IO1
            using G2_IO4 = Field<7, 1>;    // G2_IO4
            using G2_IO3 = Field<6, 1>;    // G2_IO3
            using G2_IO2 = Field<5, 1>;    // G2_IO2
            using G2_IO1 = Field<4, 1>;    // G2_IO1
            using G1_IO4 = Field<3, 1>;    // G1_IO4
            using G1_IO3 = Field<2, 1>;    // G1_IO3
            using G1_IO2 = Field<1, 1>;    // G1_IO2
            using G1_IO1 = Field<0, 1>;    // G1_IO1
        };

        // I/O group control status register
        struct IOGCSR : public Register<0x40024030> {
            using G8S = Field<23, 1>;    // Analog I/O group x status
            using G7S = Field<22, 1>;    // Analog I/O group x status
            using G6S = Field<21, 1>;    // Analog I/O group x status
            using G5S = Field<20, 1>;    // Analog I/O group x status
            using G4S = Field<19, 1>;    // Analog I/O group x status
            using G3S = Field<18, 1>;    // Analog I/O group x status
            using G2S = Field<17, 1>;    // Analog I/O group x status
            using G1S = Field<16, 1>;    // Analog I/O group x status
            using G8E = Field<7, 1>;    // Analog I/O group x enable
            using G7E = Field<6, 1>;    // Analog I/O group x enable
            using G6E = Field<5, 1>;    // Analog I/O group x enable
            using G5E = Field<4, 1>;    // Analog I/O group x enable
            using G4E = Field<3, 1>;    // Analog I/O group x enable
            using G3E = Field<2, 1>;    // Analog I/O group x enable
            using G2E = Field<1, 1>;    // Analog I/O group x enable
            using G1E = Field<0, 1>;    // Analog I/O group x enable
        };

        // I/O group x counter register
        struct IOG1CR : public RegisterReadOnly<0x40024034> {
            using CNT = Field<0, 14>;    // Counter value
        };

        // I/O group x counter register
        struct IOG2CR : public RegisterReadOnly<0x40024038> {
            using CNT = Field<0, 14>;    // Counter value
        };

        // I/O group x counter register
        struct IOG3CR : public RegisterReadOnly<0x4002403c> {
            using CNT = Field<0, 14>;    // Counter value
        };

        // I/O group x counter register
        struct IOG4CR : public RegisterReadOnly<0x40024040> {
            using CNT = Field<0, 14>;    // Counter value
        };

        // I/O group x counter register
        struct IOG5CR : public RegisterReadOnly<0x40024044> {
            using CNT = Field<0, 14>;    // Counter value
        };

        // I/O group x counter register
        struct IOG6CR : public RegisterReadOnly<0x40024048> {
            using CNT = Field<0, 14>;    // Counter value
        };

        // I/O group x counter register
        struct IOG7CR : public RegisterReadOnly<0x4002404c> {
            using CNT = Field<0, 14>;    // Counter value
        };

        // I/O group x counter register
        struct IOG8CR : public RegisterReadOnly<0x40024050> {
            using CNT = Field<0, 14>;    // Counter value
        };

    };

    // Independent watchdog
    struct IWDG {
        // Key register
        struct KR : public RegisterWriteOnly<0x40003000> {
            using KEY = Field<0, 16>;    // Key value (write only, read 0x0000)
        };

        // Prescaler register
        struct PR : public Register<0x40003004> {
            using Field = Field<0, 3>;    // Prescaler divider
        };

        // Reload register
        struct RLR : public Register<0x40003008> {
            using RL = Field<0, 12>;    // Watchdog counter reload value
        };

        // Status register
        struct SR : public RegisterReadOnly<0x4000300c> {
            using WVU = Field<2, 1>;    // Watchdog counter window value update
            using RVU = Field<1, 1>;    // Watchdog counter reload value update
            using PVU = Field<0, 1>;    // Watchdog prescaler value update
        };

        // Window register
        struct WINR : public Register<0x40003010> {
            using WIN = Field<0, 12>;    // Watchdog counter window value
        };

    };

    // System window watchdog
    struct WWDG {
        // Control register
        struct CR : public Register<0x40002c00> {
            using WDGA = Field<7, 1>;    // Activation bit
            using T = Field<0, 7>;    // 7-bit counter (MSB to LSB)
        };

        // Configuration register
        struct CFR : public Register<0x40002c04> {
            using EWI = Field<9, 1>;    // Early wakeup interrupt
            using WDGTB = Field<7, 2>;    // Timer base
            using W = Field<0, 7>;    // 7-bit window value
        };

        // Status register
        struct SR : public Register<0x40002c08> {
            using EWIF = Field<0, 1>;    // Early wakeup interrupt flag
        };

    };

    // Comparator
    struct COMP {
        // Comparator 1 control and status register
        struct COMP1_CSR : public Register<0x40010200> {
            using COMP1_EN = Field<0, 1>;    // Comparator 1 enable bit
            using COMP1_PWRMODE = Field<2, 2>;    // Power Mode of the comparator 1
            using COMP1_INMSEL = Field<4, 3>;    // Comparator 1 Input Minus connection configuration bit
            using COMP1_INPSEL = Field<7, 2>;    // Comparator1 input plus selection bit
            using COMP1_POLARITY = Field<15, 1>;    // Comparator 1 polarity selection bit
            using COMP1_HYST = Field<16, 2>;    // Comparator 1 hysteresis selection bits
            using COMP1_BLANKING = Field<18, 3>;    // Comparator 1 blanking source selection bits
            using COMP1_BRGEN = Field<22, 1>;    // Scaler bridge enable
            using COMP1_SCALEN = Field<23, 1>;    // Voltage scaler enable bit
            using COMP1_INMESEL = Field<25, 2>;    // comparator 1 input minus extended selection bits
            using COMP1_VALUE = Field<30, 1>;    // Comparator 1 output status bit
            using COMP1_LOCK = Field<31, 1>;    // COMP1_CSR register lock bit
        };

        // Comparator 2 control and status register
        struct COMP2_CSR : public Register<0x40010204> {
            using COMP2_EN = Field<0, 1>;    // Comparator 2 enable bit
            using COMP2_PWRMODE = Field<2, 2>;    // Power Mode of the comparator 2
            using COMP2_INMSEL = Field<4, 3>;    // Comparator 2 Input Minus connection configuration bit
            using COMP2_INPSEL = Field<7, 2>;    // Comparator 2 Input Plus connection configuration bit
            using COMP2_WINMODE = Field<9, 1>;    // Windows mode selection bit
            using COMP2_POLARITY = Field<15, 1>;    // Comparator 2 polarity selection bit
            using COMP2_HYST = Field<16, 2>;    // Comparator 2 hysteresis selection bits
            using COMP2_BLANKING = Field<18, 3>;    // Comparator 2 blanking source selection bits
            using COMP2_BRGEN = Field<22, 1>;    // Scaler bridge enable
            using COMP2_SCALEN = Field<23, 1>;    // Voltage scaler enable bit
            using COMP2_INMESEL = Field<25, 2>;    // comparator 2 input minus extended selection bits
            using COMP2_VALUE = Field<30, 1>;    // Comparator 2 output status bit
            using COMP2_LOCK = Field<31, 1>;    // COMP2_CSR register lock bit
        };

    };

    // Firewall
    struct FIREWALL {
        // Code segment start address
        struct CSSA : public Register<0x40011c00> {
            using ADD = Field<8, 16>;    // code segment start address
        };

        // Code segment length
        struct CSL : public Register<0x40011c04> {
            using LENG = Field<8, 14>;    // code segment length
        };

        // Non-volatile data segment start address
        struct NVDSSA : public Register<0x40011c08> {
            using ADD = Field<8, 16>;    // Non-volatile data segment start address
        };

        // Non-volatile data segment length
        struct NVDSL : public Register<0x40011c0c> {
            using LENG = Field<8, 14>;    // Non-volatile data segment length
        };

        // Volatile data segment start address
        struct VDSSA : public Register<0x40011c10> {
            using ADD = Field<6, 10>;    // Volatile data segment start address
        };

        // Volatile data segment length
        struct VDSL : public Register<0x40011c14> {
            using LENG = Field<6, 10>;    // Non-volatile data segment length
        };

        // Configuration register
        struct CR : public Register<0x40011c20> {
            using VDE = Field<2, 1>;    // Volatile data execution
            using VDS = Field<1, 1>;    // Volatile data shared
            using FPA = Field<0, 1>;    // Firewall pre alarm
        };

    };

    // Inter-integrated circuit
    struct I2C1 {
        // Control register 1
        struct CR1 : public Register<0x40005400> {
            using PE = Field<0, 1>;    // Peripheral enable
            using TXIE = Field<1, 1>;    // TX Interrupt enable
            using RXIE = Field<2, 1>;    // RX Interrupt enable
            using ADDRIE = Field<3, 1>;    // Address match interrupt enable (slave only)
            using NACKIE = Field<4, 1>;    // Not acknowledge received interrupt enable
            using STOPIE = Field<5, 1>;    // STOP detection Interrupt enable
            using TCIE = Field<6, 1>;    // Transfer Complete interrupt enable
            using ERRIE = Field<7, 1>;    // Error interrupts enable
            using DNF = Field<8, 4>;    // Digital noise filter
            using ANFOFF = Field<12, 1>;    // Analog noise filter OFF
            using TXDMAEN = Field<14, 1>;    // DMA transmission requests enable
            using RXDMAEN = Field<15, 1>;    // DMA reception requests enable
            using SBC = Field<16, 1>;    // Slave byte control
            using NOSTRETCH = Field<17, 1>;    // Clock stretching disable
            using WUPEN = Field<18, 1>;    // Wakeup from STOP enable
            using GCEN = Field<19, 1>;    // General call enable
            using SMBHEN = Field<20, 1>;    // SMBus Host address enable
            using SMBDEN = Field<21, 1>;    // SMBus Device Default address enable
            using ALERTEN = Field<22, 1>;    // SMBUS alert enable
            using PECEN = Field<23, 1>;    // PEC enable
        };

        // Control register 2
        struct CR2 : public Register<0x40005404> {
            using PECBYTE = Field<26, 1>;    // Packet error checking byte
            using AUTOEND = Field<25, 1>;    // Automatic end mode (master mode)
            using RELOAD = Field<24, 1>;    // NBYTES reload mode
            using NBYTES = Field<16, 8>;    // Number of bytes
            using NACK = Field<15, 1>;    // NACK generation (slave mode)
            using STOP = Field<14, 1>;    // Stop generation (master mode)
            using START = Field<13, 1>;    // Start generation
            using HEAD10R = Field<12, 1>;    // 10-bit address header only read direction (master receiver mode)
            using ADD10 = Field<11, 1>;    // 10-bit addressing mode (master mode)
            using RD_WRN = Field<10, 1>;    // Transfer direction (master mode)
            using SADD = Field<0, 10>;    // Slave address bit (master mode)
        };

        // Own address register 1
        struct OAR1 : public Register<0x40005408> {
            using OA1 = Field<0, 10>;    // Interface address
            using OA1MODE = Field<10, 1>;    // Own Address 1 10-bit mode
            using OA1EN = Field<15, 1>;    // Own Address 1 enable
        };

        // Own address register 2
        struct OAR2 : public Register<0x4000540c> {
            using OA2 = Field<1, 7>;    // Interface address
            using OA2MSK = Field<8, 3>;    // Own Address 2 masks
            using OA2EN = Field<15, 1>;    // Own Address 2 enable
        };

        // Timing register
        struct TIMINGR : public Register<0x40005410> {
            using SCLL = Field<0, 8>;    // SCL low period (master mode)
            using SCLH = Field<8, 8>;    // SCL high period (master mode)
            using SDADEL = Field<16, 4>;    // Data hold time
            using SCLDEL = Field<20, 4>;    // Data setup time
            using PRESC = Field<28, 4>;    // Timing prescaler
        };

        // Status register 1
        struct TIMEOUTR : public Register<0x40005414> {
            using TIMEOUTA = Field<0, 12>;    // Bus timeout A
            using TIDLE = Field<12, 1>;    // Idle clock timeout detection
            using TIMOUTEN = Field<15, 1>;    // Clock timeout enable
            using TIMEOUTB = Field<16, 12>;    // Bus timeout B
            using TEXTEN = Field<31, 1>;    // Extended clock timeout enable
        };

        // Interrupt and Status register
        struct ISR : public Register<0x40005418> {
            using ADDCODE = Field<17, 7>;    // Address match code (Slave mode)
            using DIR = Field<16, 1>;    // Transfer direction (Slave mode)
            using BUSY = Field<15, 1>;    // Bus busy
            using ALERT = Field<13, 1>;    // SMBus alert
            using TIMEOUT = Field<12, 1>;    // Timeout or t_low detection flag
            using PECERR = Field<11, 1>;    // PEC Error in reception
            using OVR = Field<10, 1>;    // Overrun/Underrun (slave mode)
            using ARLO = Field<9, 1>;    // Arbitration lost
            using BERR = Field<8, 1>;    // Bus error
            using TCR = Field<7, 1>;    // Transfer Complete Reload
            using TC = Field<6, 1>;    // Transfer Complete (master mode)
            using STOPF = Field<5, 1>;    // Stop detection flag
            using NACKF = Field<4, 1>;    // Not acknowledge received flag
            using ADDR = Field<3, 1>;    // Address matched (slave mode)
            using RXNE = Field<2, 1>;    // Receive data register not empty (receivers)
            using TXIS = Field<1, 1>;    // Transmit interrupt status (transmitters)
            using TXE = Field<0, 1>;    // Transmit data register empty (transmitters)
        };

        // Interrupt clear register
        struct ICR : public RegisterWriteOnly<0x4000541c> {
            using ALERTCF = Field<13, 1>;    // Alert flag clear
            using TIMOUTCF = Field<12, 1>;    // Timeout detection flag clear
            using PECCF = Field<11, 1>;    // PEC Error flag clear
            using OVRCF = Field<10, 1>;    // Overrun/Underrun flag clear
            using ARLOCF = Field<9, 1>;    // Arbitration lost flag clear
            using BERRCF = Field<8, 1>;    // Bus error flag clear
            using STOPCF = Field<5, 1>;    // Stop detection flag clear
            using NACKCF = Field<4, 1>;    // Not Acknowledge flag clear
            using ADDRCF = Field<3, 1>;    // Address Matched flag clear
        };

        // PEC register
        struct PECR : public RegisterReadOnly<0x40005420> {
            using PEC = Field<0, 8>;    // Packet error checking register
        };

        // Receive data register
        struct RXDR : public RegisterReadOnly<0x40005424> {
            using RXDATA = Field<0, 8>;    // 8-bit receive data
        };

        // Transmit data register
        struct TXDR : public Register<0x40005428> {
            using TXDATA = Field<0, 8>;    // 8-bit transmit data
        };

    };

    // Inter-integrated circuit
    struct I2C3 {
        // Control register 1
        struct CR1 : public Register<0x40005c00> {
            using PE = Field<0, 1>;    // Peripheral enable
            using TXIE = Field<1, 1>;    // TX Interrupt enable
            using RXIE = Field<2, 1>;    // RX Interrupt enable
            using ADDRIE = Field<3, 1>;    // Address match interrupt enable (slave only)
            using NACKIE = Field<4, 1>;    // Not acknowledge received interrupt enable
            using STOPIE = Field<5, 1>;    // STOP detection Interrupt enable
            using TCIE = Field<6, 1>;    // Transfer Complete interrupt enable
            using ERRIE = Field<7, 1>;    // Error interrupts enable
            using DNF = Field<8, 4>;    // Digital noise filter
            using ANFOFF = Field<12, 1>;    // Analog noise filter OFF
            using TXDMAEN = Field<14, 1>;    // DMA transmission requests enable
            using RXDMAEN = Field<15, 1>;    // DMA reception requests enable
            using SBC = Field<16, 1>;    // Slave byte control
            using NOSTRETCH = Field<17, 1>;    // Clock stretching disable
            using WUPEN = Field<18, 1>;    // Wakeup from STOP enable
            using GCEN = Field<19, 1>;    // General call enable
            using SMBHEN = Field<20, 1>;    // SMBus Host address enable
            using SMBDEN = Field<21, 1>;    // SMBus Device Default address enable
            using ALERTEN = Field<22, 1>;    // SMBUS alert enable
            using PECEN = Field<23, 1>;    // PEC enable
        };

        // Control register 2
        struct CR2 : public Register<0x40005c04> {
            using PECBYTE = Field<26, 1>;    // Packet error checking byte
            using AUTOEND = Field<25, 1>;    // Automatic end mode (master mode)
            using RELOAD = Field<24, 1>;    // NBYTES reload mode
            using NBYTES = Field<16, 8>;    // Number of bytes
            using NACK = Field<15, 1>;    // NACK generation (slave mode)
            using STOP = Field<14, 1>;    // Stop generation (master mode)
            using START = Field<13, 1>;    // Start generation
            using HEAD10R = Field<12, 1>;    // 10-bit address header only read direction (master receiver mode)
            using ADD10 = Field<11, 1>;    // 10-bit addressing mode (master mode)
            using RD_WRN = Field<10, 1>;    // Transfer direction (master mode)
            using SADD = Field<0, 10>;    // Slave address bit (master mode)
        };

        // Own address register 1
        struct OAR1 : public Register<0x40005c08> {
            using OA1 = Field<0, 10>;    // Interface address
            using OA1MODE = Field<10, 1>;    // Own Address 1 10-bit mode
            using OA1EN = Field<15, 1>;    // Own Address 1 enable
        };

        // Own address register 2
        struct OAR2 : public Register<0x40005c0c> {
            using OA2 = Field<1, 7>;    // Interface address
            using OA2MSK = Field<8, 3>;    // Own Address 2 masks
            using OA2EN = Field<15, 1>;    // Own Address 2 enable
        };

        // Timing register
        struct TIMINGR : public Register<0x40005c10> {
            using SCLL = Field<0, 8>;    // SCL low period (master mode)
            using SCLH = Field<8, 8>;    // SCL high period (master mode)
            using SDADEL = Field<16, 4>;    // Data hold time
            using SCLDEL = Field<20, 4>;    // Data setup time
            using PRESC = Field<28, 4>;    // Timing prescaler
        };

        // Status register 1
        struct TIMEOUTR : public Register<0x40005c14> {
            using TIMEOUTA = Field<0, 12>;    // Bus timeout A
            using TIDLE = Field<12, 1>;    // Idle clock timeout detection
            using TIMOUTEN = Field<15, 1>;    // Clock timeout enable
            using TIMEOUTB = Field<16, 12>;    // Bus timeout B
            using TEXTEN = Field<31, 1>;    // Extended clock timeout enable
        };

        // Interrupt and Status register
        struct ISR : public Register<0x40005c18> {
            using ADDCODE = Field<17, 7>;    // Address match code (Slave mode)
            using DIR = Field<16, 1>;    // Transfer direction (Slave mode)
            using BUSY = Field<15, 1>;    // Bus busy
            using ALERT = Field<13, 1>;    // SMBus alert
            using TIMEOUT = Field<12, 1>;    // Timeout or t_low detection flag
            using PECERR = Field<11, 1>;    // PEC Error in reception
            using OVR = Field<10, 1>;    // Overrun/Underrun (slave mode)
            using ARLO = Field<9, 1>;    // Arbitration lost
            using BERR = Field<8, 1>;    // Bus error
            using TCR = Field<7, 1>;    // Transfer Complete Reload
            using TC = Field<6, 1>;    // Transfer Complete (master mode)
            using STOPF = Field<5, 1>;    // Stop detection flag
            using NACKF = Field<4, 1>;    // Not acknowledge received flag
            using ADDR = Field<3, 1>;    // Address matched (slave mode)
            using RXNE = Field<2, 1>;    // Receive data register not empty (receivers)
            using TXIS = Field<1, 1>;    // Transmit interrupt status (transmitters)
            using TXE = Field<0, 1>;    // Transmit data register empty (transmitters)
        };

        // Interrupt clear register
        struct ICR : public RegisterWriteOnly<0x40005c1c> {
            using ALERTCF = Field<13, 1>;    // Alert flag clear
            using TIMOUTCF = Field<12, 1>;    // Timeout detection flag clear
            using PECCF = Field<11, 1>;    // PEC Error flag clear
            using OVRCF = Field<10, 1>;    // Overrun/Underrun flag clear
            using ARLOCF = Field<9, 1>;    // Arbitration lost flag clear
            using BERRCF = Field<8, 1>;    // Bus error flag clear
            using STOPCF = Field<5, 1>;    // Stop detection flag clear
            using NACKCF = Field<4, 1>;    // Not Acknowledge flag clear
            using ADDRCF = Field<3, 1>;    // Address Matched flag clear
        };

        // PEC register
        struct PECR : public RegisterReadOnly<0x40005c20> {
            using PEC = Field<0, 8>;    // Packet error checking register
        };

        // Receive data register
        struct RXDR : public RegisterReadOnly<0x40005c24> {
            using RXDATA = Field<0, 8>;    // 8-bit receive data
        };

        // Transmit data register
        struct TXDR : public Register<0x40005c28> {
            using TXDATA = Field<0, 8>;    // 8-bit transmit data
        };

    };

    // Inter-integrated circuit
    struct I2C2 {
        // Control register 1
        struct CR1 : public Register<0x40005800> {
            using PE = Field<0, 1>;    // Peripheral enable
            using TXIE = Field<1, 1>;    // TX Interrupt enable
            using RXIE = Field<2, 1>;    // RX Interrupt enable
            using ADDRIE = Field<3, 1>;    // Address match interrupt enable (slave only)
            using NACKIE = Field<4, 1>;    // Not acknowledge received interrupt enable
            using STOPIE = Field<5, 1>;    // STOP detection Interrupt enable
            using TCIE = Field<6, 1>;    // Transfer Complete interrupt enable
            using ERRIE = Field<7, 1>;    // Error interrupts enable
            using DNF = Field<8, 4>;    // Digital noise filter
            using ANFOFF = Field<12, 1>;    // Analog noise filter OFF
            using TXDMAEN = Field<14, 1>;    // DMA transmission requests enable
            using RXDMAEN = Field<15, 1>;    // DMA reception requests enable
            using SBC = Field<16, 1>;    // Slave byte control
            using NOSTRETCH = Field<17, 1>;    // Clock stretching disable
            using WUPEN = Field<18, 1>;    // Wakeup from STOP enable
            using GCEN = Field<19, 1>;    // General call enable
            using SMBHEN = Field<20, 1>;    // SMBus Host address enable
            using SMBDEN = Field<21, 1>;    // SMBus Device Default address enable
            using ALERTEN = Field<22, 1>;    // SMBUS alert enable
            using PECEN = Field<23, 1>;    // PEC enable
        };

        // Control register 2
        struct CR2 : public Register<0x40005804> {
            using PECBYTE = Field<26, 1>;    // Packet error checking byte
            using AUTOEND = Field<25, 1>;    // Automatic end mode (master mode)
            using RELOAD = Field<24, 1>;    // NBYTES reload mode
            using NBYTES = Field<16, 8>;    // Number of bytes
            using NACK = Field<15, 1>;    // NACK generation (slave mode)
            using STOP = Field<14, 1>;    // Stop generation (master mode)
            using START = Field<13, 1>;    // Start generation
            using HEAD10R = Field<12, 1>;    // 10-bit address header only read direction (master receiver mode)
            using ADD10 = Field<11, 1>;    // 10-bit addressing mode (master mode)
            using RD_WRN = Field<10, 1>;    // Transfer direction (master mode)
            using SADD = Field<0, 10>;    // Slave address bit (master mode)
        };

        // Own address register 1
        struct OAR1 : public Register<0x40005808> {
            using OA1 = Field<0, 10>;    // Interface address
            using OA1MODE = Field<10, 1>;    // Own Address 1 10-bit mode
            using OA1EN = Field<15, 1>;    // Own Address 1 enable
        };

        // Own address register 2
        struct OAR2 : public Register<0x4000580c> {
            using OA2 = Field<1, 7>;    // Interface address
            using OA2MSK = Field<8, 3>;    // Own Address 2 masks
            using OA2EN = Field<15, 1>;    // Own Address 2 enable
        };

        // Timing register
        struct TIMINGR : public Register<0x40005810> {
            using SCLL = Field<0, 8>;    // SCL low period (master mode)
            using SCLH = Field<8, 8>;    // SCL high period (master mode)
            using SDADEL = Field<16, 4>;    // Data hold time
            using SCLDEL = Field<20, 4>;    // Data setup time
            using PRESC = Field<28, 4>;    // Timing prescaler
        };

        // Status register 1
        struct TIMEOUTR : public Register<0x40005814> {
            using TIMEOUTA = Field<0, 12>;    // Bus timeout A
            using TIDLE = Field<12, 1>;    // Idle clock timeout detection
            using TIMOUTEN = Field<15, 1>;    // Clock timeout enable
            using TIMEOUTB = Field<16, 12>;    // Bus timeout B
            using TEXTEN = Field<31, 1>;    // Extended clock timeout enable
        };

        // Interrupt and Status register
        struct ISR : public Register<0x40005818> {
            using ADDCODE = Field<17, 7>;    // Address match code (Slave mode)
            using DIR = Field<16, 1>;    // Transfer direction (Slave mode)
            using BUSY = Field<15, 1>;    // Bus busy
            using ALERT = Field<13, 1>;    // SMBus alert
            using TIMEOUT = Field<12, 1>;    // Timeout or t_low detection flag
            using PECERR = Field<11, 1>;    // PEC Error in reception
            using OVR = Field<10, 1>;    // Overrun/Underrun (slave mode)
            using ARLO = Field<9, 1>;    // Arbitration lost
            using BERR = Field<8, 1>;    // Bus error
            using TCR = Field<7, 1>;    // Transfer Complete Reload
            using TC = Field<6, 1>;    // Transfer Complete (master mode)
            using STOPF = Field<5, 1>;    // Stop detection flag
            using NACKF = Field<4, 1>;    // Not acknowledge received flag
            using ADDR = Field<3, 1>;    // Address matched (slave mode)
            using RXNE = Field<2, 1>;    // Receive data register not empty (receivers)
            using TXIS = Field<1, 1>;    // Transmit interrupt status (transmitters)
            using TXE = Field<0, 1>;    // Transmit data register empty (transmitters)
        };

        // Interrupt clear register
        struct ICR : public RegisterWriteOnly<0x4000581c> {
            using ALERTCF = Field<13, 1>;    // Alert flag clear
            using TIMOUTCF = Field<12, 1>;    // Timeout detection flag clear
            using PECCF = Field<11, 1>;    // PEC Error flag clear
            using OVRCF = Field<10, 1>;    // Overrun/Underrun flag clear
            using ARLOCF = Field<9, 1>;    // Arbitration lost flag clear
            using BERRCF = Field<8, 1>;    // Bus error flag clear
            using STOPCF = Field<5, 1>;    // Stop detection flag clear
            using NACKCF = Field<4, 1>;    // Not Acknowledge flag clear
            using ADDRCF = Field<3, 1>;    // Address Matched flag clear
        };

        // PEC register
        struct PECR : public RegisterReadOnly<0x40005820> {
            using PEC = Field<0, 8>;    // Packet error checking register
        };

        // Receive data register
        struct RXDR : public RegisterReadOnly<0x40005824> {
            using RXDATA = Field<0, 8>;    // 8-bit receive data
        };

        // Transmit data register
        struct TXDR : public Register<0x40005828> {
            using TXDATA = Field<0, 8>;    // 8-bit transmit data
        };

    };

    // Inter-integrated circuit
    struct I2C4 {
        // Control register 1
        struct CR1 : public Register<0x40008400> {
            using PE = Field<0, 1>;    // Peripheral enable
            using TXIE = Field<1, 1>;    // TX Interrupt enable
            using RXIE = Field<2, 1>;    // RX Interrupt enable
            using ADDRIE = Field<3, 1>;    // Address match interrupt enable (slave only)
            using NACKIE = Field<4, 1>;    // Not acknowledge received interrupt enable
            using STOPIE = Field<5, 1>;    // STOP detection Interrupt enable
            using TCIE = Field<6, 1>;    // Transfer Complete interrupt enable
            using ERRIE = Field<7, 1>;    // Error interrupts enable
            using DNF = Field<8, 4>;    // Digital noise filter
            using ANFOFF = Field<12, 1>;    // Analog noise filter OFF
            using TXDMAEN = Field<14, 1>;    // DMA transmission requests enable
            using RXDMAEN = Field<15, 1>;    // DMA reception requests enable
            using SBC = Field<16, 1>;    // Slave byte control
            using NOSTRETCH = Field<17, 1>;    // Clock stretching disable
            using WUPEN = Field<18, 1>;    // Wakeup from STOP enable
            using GCEN = Field<19, 1>;    // General call enable
            using SMBHEN = Field<20, 1>;    // SMBus Host address enable
            using SMBDEN = Field<21, 1>;    // SMBus Device Default address enable
            using ALERTEN = Field<22, 1>;    // SMBUS alert enable
            using PECEN = Field<23, 1>;    // PEC enable
        };

        // Control register 2
        struct CR2 : public Register<0x40008404> {
            using PECBYTE = Field<26, 1>;    // Packet error checking byte
            using AUTOEND = Field<25, 1>;    // Automatic end mode (master mode)
            using RELOAD = Field<24, 1>;    // NBYTES reload mode
            using NBYTES = Field<16, 8>;    // Number of bytes
            using NACK = Field<15, 1>;    // NACK generation (slave mode)
            using STOP = Field<14, 1>;    // Stop generation (master mode)
            using START = Field<13, 1>;    // Start generation
            using HEAD10R = Field<12, 1>;    // 10-bit address header only read direction (master receiver mode)
            using ADD10 = Field<11, 1>;    // 10-bit addressing mode (master mode)
            using RD_WRN = Field<10, 1>;    // Transfer direction (master mode)
            using SADD = Field<0, 10>;    // Slave address bit (master mode)
        };

        // Own address register 1
        struct OAR1 : public Register<0x40008408> {
            using OA1 = Field<0, 10>;    // Interface address
            using OA1MODE = Field<10, 1>;    // Own Address 1 10-bit mode
            using OA1EN = Field<15, 1>;    // Own Address 1 enable
        };

        // Own address register 2
        struct OAR2 : public Register<0x4000840c> {
            using OA2 = Field<1, 7>;    // Interface address
            using OA2MSK = Field<8, 3>;    // Own Address 2 masks
            using OA2EN = Field<15, 1>;    // Own Address 2 enable
        };

        // Timing register
        struct TIMINGR : public Register<0x40008410> {
            using SCLL = Field<0, 8>;    // SCL low period (master mode)
            using SCLH = Field<8, 8>;    // SCL high period (master mode)
            using SDADEL = Field<16, 4>;    // Data hold time
            using SCLDEL = Field<20, 4>;    // Data setup time
            using PRESC = Field<28, 4>;    // Timing prescaler
        };

        // Status register 1
        struct TIMEOUTR : public Register<0x40008414> {
            using TIMEOUTA = Field<0, 12>;    // Bus timeout A
            using TIDLE = Field<12, 1>;    // Idle clock timeout detection
            using TIMOUTEN = Field<15, 1>;    // Clock timeout enable
            using TIMEOUTB = Field<16, 12>;    // Bus timeout B
            using TEXTEN = Field<31, 1>;    // Extended clock timeout enable
        };

        // Interrupt and Status register
        struct ISR : public Register<0x40008418> {
            using ADDCODE = Field<17, 7>;    // Address match code (Slave mode)
            using DIR = Field<16, 1>;    // Transfer direction (Slave mode)
            using BUSY = Field<15, 1>;    // Bus busy
            using ALERT = Field<13, 1>;    // SMBus alert
            using TIMEOUT = Field<12, 1>;    // Timeout or t_low detection flag
            using PECERR = Field<11, 1>;    // PEC Error in reception
            using OVR = Field<10, 1>;    // Overrun/Underrun (slave mode)
            using ARLO = Field<9, 1>;    // Arbitration lost
            using BERR = Field<8, 1>;    // Bus error
            using TCR = Field<7, 1>;    // Transfer Complete Reload
            using TC = Field<6, 1>;    // Transfer Complete (master mode)
            using STOPF = Field<5, 1>;    // Stop detection flag
            using NACKF = Field<4, 1>;    // Not acknowledge received flag
            using ADDR = Field<3, 1>;    // Address matched (slave mode)
            using RXNE = Field<2, 1>;    // Receive data register not empty (receivers)
            using TXIS = Field<1, 1>;    // Transmit interrupt status (transmitters)
            using TXE = Field<0, 1>;    // Transmit data register empty (transmitters)
        };

        // Interrupt clear register
        struct ICR : public RegisterWriteOnly<0x4000841c> {
            using ALERTCF = Field<13, 1>;    // Alert flag clear
            using TIMOUTCF = Field<12, 1>;    // Timeout detection flag clear
            using PECCF = Field<11, 1>;    // PEC Error flag clear
            using OVRCF = Field<10, 1>;    // Overrun/Underrun flag clear
            using ARLOCF = Field<9, 1>;    // Arbitration lost flag clear
            using BERRCF = Field<8, 1>;    // Bus error flag clear
            using STOPCF = Field<5, 1>;    // Stop detection flag clear
            using NACKCF = Field<4, 1>;    // Not Acknowledge flag clear
            using ADDRCF = Field<3, 1>;    // Address Matched flag clear
        };

        // PEC register
        struct PECR : public RegisterReadOnly<0x40008420> {
            using PEC = Field<0, 8>;    // Packet error checking register
        };

        // Receive data register
        struct RXDR : public RegisterReadOnly<0x40008424> {
            using RXDATA = Field<0, 8>;    // 8-bit receive data
        };

        // Transmit data register
        struct TXDR : public Register<0x40008428> {
            using TXDATA = Field<0, 8>;    // 8-bit transmit data
        };

    };

    // Flash
    struct FLASH {
        // Access control register
        struct ACR : public Register<0x40022000> {
            using LATENCY = Field<0, 3>;    // Latency
            using PRFTEN = Field<8, 1>;    // Prefetch enable
            using ICEN = Field<9, 1>;    // Instruction cache enable
            using DCEN = Field<10, 1>;    // Data cache enable
            using ICRST = Field<11, 1>;    // Instruction cache reset
            using DCRST = Field<12, 1>;    // Data cache reset
            using RUN_PD = Field<13, 1>;    // Flash Power-down mode during Low-power run mode
            using SLEEP_PD = Field<14, 1>;    // Flash Power-down mode during Low-power sleep mode
        };

        // Power down key register
        struct PDKEYR : public RegisterWriteOnly<0x40022004> {
            using Field = Field<0, 32>;    // RUN_PD in FLASH_ACR key
        };

        // Flash key register
        struct KEYR : public RegisterWriteOnly<0x40022008> {
            using Field = Field<0, 32>;    // KEYR
        };

        // Option byte key register
        struct OPTKEYR : public RegisterWriteOnly<0x4002200c> {
            using Field = Field<0, 32>;    // Option byte key
        };

        // Status register
        struct SR : public Register<0x40022010> {
            using EOP = Field<0, 1>;    // End of operation
            using OPERR = Field<1, 1>;    // Operation error
            using PROGERR = Field<3, 1>;    // Programming error
            using WRPERR = Field<4, 1>;    // Write protected error
            using PGAERR = Field<5, 1>;    // Programming alignment error
            using SIZERR = Field<6, 1>;    // Size error
            using PGSERR = Field<7, 1>;    // Programming sequence error
            using MISERR = Field<8, 1>;    // Fast programming data miss error
            using FASTERR = Field<9, 1>;    // Fast programming error
            using RDERR = Field<14, 1>;    // PCROP read error
            using OPTVERR = Field<15, 1>;    // Option validity error
            using BSY = Field<16, 1>;    // Busy
        };

        // Flash control register
        struct CR : public Register<0x40022014> {
            using PG = Field<0, 1>;    // Programming
            using PER = Field<1, 1>;    // Page erase
            using MER1 = Field<2, 1>;    // Bank 1 Mass erase
            using PNB = Field<3, 8>;    // Page number
            using BKER = Field<11, 1>;    // Bank erase
            using MER2 = Field<15, 1>;    // Bank 2 Mass erase
            using START = Field<16, 1>;    // Start
            using OPTSTRT = Field<17, 1>;    // Options modification start
            using FSTPG = Field<18, 1>;    // Fast programming
            using EOPIE = Field<24, 1>;    // End of operation interrupt enable
            using ERRIE = Field<25, 1>;    // Error interrupt enable
            using RDERRIE = Field<26, 1>;    // PCROP read error interrupt enable
            using OBL_LAUNCH = Field<27, 1>;    // Force the option byte loading
            using OPTLOCK = Field<30, 1>;    // Options Lock
            using LOCK = Field<31, 1>;    // FLASH_CR Lock
        };

        // Flash ECC register
        struct ECCR : public Register<0x40022018> {
            using ADDR_ECC = Field<0, 19>;    // ECC fail address
            using BK_ECC = Field<19, 1>;    // ECC fail bank
            using SYSF_ECC = Field<20, 1>;    // System Flash ECC fail
            using ECCIE = Field<24, 1>;    // ECC correction interrupt enable
            using ECCC = Field<30, 1>;    // ECC correction
            using ECCD = Field<31, 1>;    // ECC detection
        };

        // Flash option register
        struct OPTR : public Register<0x40022020> {
            using RDP = Field<0, 8>;    // Read protection level
            using BOR_LEV = Field<8, 3>;    // BOR reset Level
            using nRST_STOP = Field<12, 1>;    // nRST_STOP
            using nRST_STDBY = Field<13, 1>;    // nRST_STDBY
            using IDWG_SW = Field<16, 1>;    // Independent watchdog selection
            using IWDG_STOP = Field<17, 1>;    // Independent watchdog counter freeze in Stop mode
            using IWDG_STDBY = Field<18, 1>;    // Independent watchdog counter freeze in Standby mode
            using WWDG_SW = Field<19, 1>;    // Window watchdog selection
            using BFB2 = Field<20, 1>;    // Dual-bank boot
            using DUALBANK = Field<21, 1>;    // Dual-Bank on 512 KB or 256 KB Flash memory devices
            using nBOOT1 = Field<23, 1>;    // Boot configuration
            using SRAM2_PE = Field<24, 1>;    // SRAM2 parity check enable
            using SRAM2_RST = Field<25, 1>;    // SRAM2 Erase when system reset
        };

        // Flash Bank 1 PCROP Start address register
        struct PCROP1SR : public Register<0x40022024> {
            using PCROP1_STRT = Field<0, 16>;    // Bank 1 PCROP area start offset
        };

        // Flash Bank 1 PCROP End address register
        struct PCROP1ER : public Register<0x40022028> {
            using PCROP1_END = Field<0, 16>;    // Bank 1 PCROP area end offset
            using PCROP_RDP = Field<31, 1>;    // PCROP area preserved when RDP level decreased
        };

        // Flash Bank 1 WRP area A address register
        struct WRP1AR : public Register<0x4002202c> {
            using WRP1A_STRT = Field<0, 8>;    // Bank 1 WRP first area tart offset
            using WRP1A_END = Field<16, 8>;    // Bank 1 WRP first area A end offset
        };

        // Flash Bank 1 WRP area B address register
        struct WRP1BR : public Register<0x40022030> {
            using WRP1B_STRT = Field<16, 8>;    // Bank 1 WRP second area B end offset
            using WRP1B_END = Field<0, 8>;    // Bank 1 WRP second area B start offset
        };

        // Flash Bank 2 PCROP Start address register
        struct PCROP2SR : public Register<0x40022044> {
            using PCROP2_STRT = Field<0, 16>;    // Bank 2 PCROP area start offset
        };

        // Flash Bank 2 PCROP End address register
        struct PCROP2ER : public Register<0x40022048> {
            using PCROP2_END = Field<0, 16>;    // Bank 2 PCROP area end offset
        };

        // Flash Bank 2 WRP area A address register
        struct WRP2AR : public Register<0x4002204c> {
            using WRP2A_STRT = Field<0, 8>;    // Bank 2 WRP first area A start offset
            using WRP2A_END = Field<16, 8>;    // Bank 2 WRP first area A end offset
        };

        // Flash Bank 2 WRP area B address register
        struct WRP2BR : public Register<0x40022050> {
            using WRP2B_STRT = Field<0, 8>;    // Bank 2 WRP second area B start offset
            using WRP2B_END = Field<16, 8>;    // Bank 2 WRP second area B end offset
        };

    };

    // Reset and clock control
    struct RCC {
        // Clock control register
        struct CR : public Register<0x40021000> {
            using PLLSAI1RDY = Field<27, 1>;    // SAI1 PLL clock ready flag
            using PLLSAI1ON = Field<26, 1>;    // SAI1 PLL enable
            using PLLRDY = Field<25, 1>;    // Main PLL clock ready flag
            using PLLON = Field<24, 1>;    // Main PLL enable
            using CSSON = Field<19, 1>;    // Clock security system enable
            using HSEBYP = Field<18, 1>;    // HSE crystal oscillator bypass
            using HSERDY = Field<17, 1>;    // HSE clock ready flag
            using HSEON = Field<16, 1>;    // HSE clock enable
            using HSIASFS = Field<11, 1>;    // HSI automatic start from Stop
            using HSIRDY = Field<10, 1>;    // HSI clock ready flag
            using HSIKERON = Field<9, 1>;    // HSI always enable for peripheral kernels
            using HSION = Field<8, 1>;    // HSI clock enable
            using MSIRANGE = Field<4, 4>;    // MSI clock ranges
            using MSIRGSEL = Field<3, 1>;    // MSI clock range selection
            using MSIPLLEN = Field<2, 1>;    // MSI clock PLL enable
            using MSIRDY = Field<1, 1>;    // MSI clock ready flag
            using MSION = Field<0, 1>;    // MSI clock enable
        };

        // Internal clock sources calibration register
        struct ICSCR : public Register<0x40021004> {
            using HSITRIM = Field<24, 5>;    // HSI clock trimming
            using HSICAL = Field<16, 8>;    // HSI clock calibration
            using MSITRIM = Field<8, 8>;    // MSI clock trimming
            using MSICAL = Field<0, 8>;    // MSI clock calibration
        };

        // Clock configuration register
        struct CFGR : public Register<0x40021008> {
            using MCOPRE = Field<28, 3>;    // Microcontroller clock output prescaler
            using MCOSEL = Field<24, 3>;    // Microcontroller clock output
            using STOPWUCK = Field<15, 1>;    // Wakeup from Stop and CSS backup clock selection
            using PPRE2 = Field<11, 3>;    // APB high-speed prescaler (APB2)
            using PPRE1 = Field<8, 3>;    // PB low-speed prescaler (APB1)
            using HPRE = Field<4, 4>;    // AHB prescaler
            using SWS = Field<2, 2>;    // System clock switch status
            using SW = Field<0, 2>;    // System clock switch
        };

        // PLL configuration register
        struct PLLCFGR : public Register<0x4002100c> {
            using PLLR = Field<25, 2>;    // Main PLL division factor for PLLCLK (system clock)
            using PLLREN = Field<24, 1>;    // Main PLL PLLCLK output enable
            using PLLQ = Field<21, 2>;    // Main PLL division factor for PLLUSB1CLK(48 MHz clock)
            using PLLQEN = Field<20, 1>;    // Main PLL PLLUSB1CLK output enable
            using PLLP = Field<17, 1>;    // Main PLL division factor for PLLSAI3CLK (SAI1 and SAI2 clock)
            using PLLPEN = Field<16, 1>;    // Main PLL PLLSAI3CLK output enable
            using PLLN = Field<8, 7>;    // Main PLL multiplication factor for VCO
            using PLLM = Field<4, 3>;    // Division factor for the main PLL and audio PLL (PLLSAI1 and PLLSAI2) input clock
            using PLLSRC = Field<0, 2>;    // Main PLL, PLLSAI1 and PLLSAI2 entry clock source
            using PLLPDIV = Field<27, 5>;    // Main PLL division factor for PLLSAI2CLK
        };

        // PLLSAI1 configuration register
        struct PLLSAI1CFGR : public Register<0x40021010> {
            using PLLSAI1R = Field<25, 2>;    // PLLSAI1 division factor for PLLADC1CLK (ADC clock)
            using PLLSAI1REN = Field<24, 1>;    // PLLSAI1 PLLADC1CLK output enable
            using PLLSAI1Q = Field<21, 2>;    // SAI1PLL division factor for PLLUSB2CLK (48 MHz clock)
            using PLLSAI1QEN = Field<20, 1>;    // SAI1PLL PLLUSB2CLK output enable
            using PLLSAI1P = Field<17, 1>;    // SAI1PLL division factor for PLLSAI1CLK (SAI1 or SAI2 clock)
            using PLLSAI1PEN = Field<16, 1>;    // SAI1PLL PLLSAI1CLK output enable
            using PLLSAI1N = Field<8, 7>;    // SAI1PLL multiplication factor for VCO
            using PLLSAI1PDIV = Field<27, 5>;    // PLLSAI1 division factor for PLLSAI1CLK
        };

        // Clock interrupt enable register
        struct CIER : public Register<0x40021018> {
            using LSECSSIE = Field<9, 1>;    // LSE clock security system interrupt enable
            using PLLSAI1RDYIE = Field<6, 1>;    // PLLSAI1 ready interrupt enable
            using PLLRDYIE = Field<5, 1>;    // PLL ready interrupt enable
            using HSERDYIE = Field<4, 1>;    // HSE ready interrupt enable
            using HSIRDYIE = Field<3, 1>;    // HSI ready interrupt enable
            using MSIRDYIE = Field<2, 1>;    // MSI ready interrupt enable
            using LSERDYIE = Field<1, 1>;    // LSE ready interrupt enable
            using LSIRDYIE = Field<0, 1>;    // LSI ready interrupt enable
            using HSI48RDYIE = Field<10, 1>;    // HSI48 ready interrupt enable
        };

        // Clock interrupt flag register
        struct CIFR : public RegisterReadOnly<0x4002101c> {
            using LSECSSF = Field<9, 1>;    // LSE Clock security system interrupt flag
            using CSSF = Field<8, 1>;    // Clock security system interrupt flag
            using PLLSAI1RDYF = Field<6, 1>;    // PLLSAI1 ready interrupt flag
            using PLLRDYF = Field<5, 1>;    // PLL ready interrupt flag
            using HSERDYF = Field<4, 1>;    // HSE ready interrupt flag
            using HSIRDYF = Field<3, 1>;    // HSI ready interrupt flag
            using MSIRDYF = Field<2, 1>;    // MSI ready interrupt flag
            using LSERDYF = Field<1, 1>;    // LSE ready interrupt flag
            using LSIRDYF = Field<0, 1>;    // LSI ready interrupt flag
            using HSI48RDYF = Field<10, 1>;    // HSI48 ready interrupt flag
        };

        // Clock interrupt clear register
        struct CICR : public RegisterWriteOnly<0x40021020> {
            using LSECSSC = Field<9, 1>;    // LSE Clock security system interrupt clear
            using CSSC = Field<8, 1>;    // Clock security system interrupt clear
            using PLLSAI1RDYC = Field<6, 1>;    // PLLSAI1 ready interrupt clear
            using PLLRDYC = Field<5, 1>;    // PLL ready interrupt clear
            using HSERDYC = Field<4, 1>;    // HSE ready interrupt clear
            using HSIRDYC = Field<3, 1>;    // HSI ready interrupt clear
            using MSIRDYC = Field<2, 1>;    // MSI ready interrupt clear
            using LSERDYC = Field<1, 1>;    // LSE ready interrupt clear
            using LSIRDYC = Field<0, 1>;    // LSI ready interrupt clear
            using HSI48RDYC = Field<10, 1>;    // HSI48 oscillator ready interrupt clear
        };

        // AHB1 peripheral reset register
        struct AHB1RSTR : public Register<0x40021028> {
            using TSCRST = Field<16, 1>;    // Touch Sensing Controller reset
            using CRCRST = Field<11, 1>;    // CRC reset
            using FLASHRST = Field<8, 1>;    // Flash memory interface reset
            using DMA2RST = Field<1, 1>;    // DMA2 reset
            using DMA1RST = Field<0, 1>;    // DMA1 reset
        };

        // AHB2 peripheral reset register
        struct AHB2RSTR : public Register<0x4002102c> {
            using RNGRST = Field<18, 1>;    // Random number generator reset
            using AESRST = Field<16, 1>;    // AES hardware accelerator reset
            using ADCRST = Field<13, 1>;    // ADC reset
            using GPIOHRST = Field<7, 1>;    // IO port H reset
            using GPIOERST = Field<4, 1>;    // IO port E reset
            using GPIODRST = Field<3, 1>;    // IO port D reset
            using GPIOCRST = Field<2, 1>;    // IO port C reset
            using GPIOBRST = Field<1, 1>;    // IO port B reset
            using GPIOARST = Field<0, 1>;    // IO port A reset
        };

        // AHB3 peripheral reset register
        struct AHB3RSTR : public Register<0x40021030> {
            using QSPIRST = Field<8, 1>;    // Quad SPI memory interface reset
        };

        // APB1 peripheral reset register 1
        struct APB1RSTR1 : public Register<0x40021038> {
            using LPTIM1RST = Field<31, 1>;    // Low Power Timer 1 reset
            using OPAMPRST = Field<30, 1>;    // OPAMP interface reset
            using DAC1RST = Field<29, 1>;    // DAC1 interface reset
            using PWRRST = Field<28, 1>;    // Power interface reset
            using CAN1RST = Field<25, 1>;    // CAN1 reset
            using I2C3RST = Field<23, 1>;    // I2C3 reset
            using I2C1RST = Field<21, 1>;    // I2C1 reset
            using USART1RST = Field<18, 1>;    // USART1 reset
            using USART2RST = Field<17, 1>;    // USART2 reset
            using SPI3RST = Field<15, 1>;    // SPI3 reset
            using SPI2RST = Field<14, 1>;    // SPI2 reset
            using LCDRST = Field<9, 1>;    // LCD interface reset
            using TIM7RST = Field<5, 1>;    // TIM7 timer reset
            using TIM6RST = Field<4, 1>;    // TIM6 timer reset
            using TIM2RST = Field<0, 1>;    // TIM2 timer reset
            using USART4RST = Field<19, 1>;    // USART4 reset.
            using I2C2RST = Field<22, 1>;    // I2C2 reset
            using CRSRST = Field<24, 1>;    // CRS reset
            using USBFSRST = Field<26, 1>;    // USB FS reset
        };

        // APB1 peripheral reset register 2
        struct APB1RSTR2 : public Register<0x4002103c> {
            using LPTIM2RST = Field<5, 1>;    // Low-power timer 2 reset
            using SWPMI1RST = Field<2, 1>;    // Single wire protocol reset
            using LPUART1RST = Field<0, 1>;    // Low-power UART 1 reset
            using I2C4RST = Field<1, 1>;    // I2C4 reset
        };

        // APB2 peripheral reset register
        struct APB2RSTR : public Register<0x40021040> {
            using SAI1RST = Field<21, 1>;    // Serial audio interface 1 (SAI1) reset
            using TIM16RST = Field<17, 1>;    // TIM16 timer reset
            using TIM15RST = Field<16, 1>;    // TIM15 timer reset
            using USART1RST = Field<14, 1>;    // USART1 reset
            using SPI1RST = Field<12, 1>;    // SPI1 reset
            using TIM1RST = Field<11, 1>;    // TIM1 timer reset
            using SDMMCRST = Field<10, 1>;    // SDMMC reset
            using SYSCFGRST = Field<0, 1>;    // System configuration (SYSCFG) reset
            using DFSDMRST = Field<24, 1>;    // DFSDM filter reset
        };

        // AHB1 peripheral clock enable register
        struct AHB1ENR : public Register<0x40021048> {
            using TSCEN = Field<16, 1>;    // Touch Sensing Controller clock enable
            using CRCEN = Field<12, 1>;    // CRC clock enable
            using FLASHEN = Field<8, 1>;    // Flash memory interface clock enable
            using DMA2EN = Field<1, 1>;    // DMA2 clock enable
            using DMA1EN = Field<0, 1>;    // DMA1 clock enable
        };

        // AHB2 peripheral clock enable register
        struct AHB2ENR : public Register<0x4002104c> {
            using RNGEN = Field<18, 1>;    // Random Number Generator clock enable
            using AESEN = Field<16, 1>;    // AES accelerator clock enable
            using ADCEN = Field<13, 1>;    // ADC clock enable
            using GPIOHEN = Field<7, 1>;    // IO port H clock enable
            using GPIOEEN = Field<4, 1>;    // IO port E clock enable
            using GPIODEN = Field<3, 1>;    // IO port D clock enable
            using GPIOCEN = Field<2, 1>;    // IO port C clock enable
            using GPIOBEN = Field<1, 1>;    // IO port B clock enable
            using GPIOAEN = Field<0, 1>;    // IO port A clock enable
        };

        // AHB3 peripheral clock enable register
        struct AHB3ENR : public Register<0x40021050> {
            using QSPIEN = Field<8, 1>;    // QSPIEN
        };

        // APB1ENR1
        struct APB1ENR1 : public Register<0x40021058> {
            using LPTIM1EN = Field<31, 1>;    // Low power timer 1 clock enable
            using OPAMPEN = Field<30, 1>;    // OPAMP interface clock enable
            using DAC1EN = Field<29, 1>;    // DAC1 interface clock enable
            using PWREN = Field<28, 1>;    // Power interface clock enable
            using CAN1EN = Field<25, 1>;    // CAN1 clock enable
            using I2C3EN = Field<23, 1>;    // I2C3 clock enable
            using I2C1EN = Field<21, 1>;    // I2C1 clock enable
            using USART1EN = Field<18, 1>;    // USART1 clock enable
            using USART2EN = Field<17, 1>;    // USART2 clock enable
            using SPI3EN = Field<15, 1>;    // SPI3 clock enable
            using SPI1EN = Field<14, 1>;    // SPI1 clock enable
            using WWDGEN = Field<11, 1>;    // Window watchdog clock enable
            using LCDEN = Field<9, 1>;    // LCD clock enable
            using TIM7EN = Field<5, 1>;    // TIM7 timer clock enable
            using TIM6EN = Field<4, 1>;    // TIM6 timer clock enable
            using TIM2EN = Field<0, 1>;    // TIM2 timer clock enable
            using RTCAPBEN = Field<10, 1>;    // RTC APB clock enable
            using CRSEN = Field<24, 1>;    // CRS clock enable
            using USBF = Field<26, 1>;    // USB FS clock enable
            using TIM3EN = Field<1, 1>;    // TIM3 timer clock enable
            using UART4EN = Field<19, 1>;    // UART4 clock enable
            using I2C2EN = Field<22, 1>;    // I2C2 clock enable
        };

        // APB1 peripheral clock enable register 2
        struct APB1ENR2 : public Register<0x4002105c> {
            using LPTIM2EN = Field<5, 1>;    // LPTIM2EN
            using SWPMI1EN = Field<2, 1>;    // Single wire protocol clock enable
            using LPUART1EN = Field<0, 1>;    // Low power UART 1 clock enable
            using DFSDMEN = Field<24, 1>;    // DFSDMEN enable
            using I2C4EN = Field<1, 1>;    // I2C4 clock enable
        };

        // APB2ENR
        struct APB2ENR : public Register<0x40021060> {
            using SAI1EN = Field<21, 1>;    // SAI1 clock enable
            using TIM16EN = Field<17, 1>;    // TIM16 timer clock enable
            using TIM15EN = Field<16, 1>;    // TIM15 timer clock enable
            using USART1EN = Field<14, 1>;    // USART1clock enable
            using SPI1EN = Field<12, 1>;    // SPI1 clock enable
            using TIM1EN = Field<11, 1>;    // TIM1 timer clock enable
            using SDMMCEN = Field<10, 1>;    // SDMMC clock enable
            using FIREWALLEN = Field<7, 1>;    // Firewall clock enable
            using SYSCFGEN = Field<0, 1>;    // SYSCFG clock enable
        };

        // AHB1 peripheral clocks enable in Sleep and Stop modes register
        struct AHB1SMENR : public Register<0x40021068> {
            using TSCSMEN = Field<16, 1>;    // Touch Sensing Controller clocks enable during Sleep and Stop modes
            using CRCSMEN = Field<12, 1>;    // CRCSMEN
            using SRAM1SMEN = Field<9, 1>;    // SRAM1 interface clocks enable during Sleep and Stop modes
            using FLASHSMEN = Field<8, 1>;    // Flash memory interface clocks enable during Sleep and Stop modes
            using DMA2SMEN = Field<1, 1>;    // DMA2 clocks enable during Sleep and Stop modes
            using DMA1SMEN = Field<0, 1>;    // DMA1 clocks enable during Sleep and Stop modes
        };

        // AHB2 peripheral clocks enable in Sleep and Stop modes register
        struct AHB2SMENR : public Register<0x4002106c> {
            using RNGSMEN = Field<18, 1>;    // Random Number Generator clocks enable during Sleep and Stop modes
            using AESSMEN = Field<16, 1>;    // AES accelerator clocks enable during Sleep and Stop modes
            using ADCFSSMEN = Field<13, 1>;    // ADC clocks enable during Sleep and Stop modes
            using SRAM2SMEN = Field<9, 1>;    // SRAM2 interface clocks enable during Sleep and Stop modes
            using GPIOHSMEN = Field<7, 1>;    // IO port H clocks enable during Sleep and Stop modes
            using GPIOESMEN = Field<4, 1>;    // IO port E clocks enable during Sleep and Stop modes
            using GPIODSMEN = Field<3, 1>;    // IO port D clocks enable during Sleep and Stop modes
            using GPIOCSMEN = Field<2, 1>;    // IO port C clocks enable during Sleep and Stop modes
            using GPIOBSMEN = Field<1, 1>;    // IO port B clocks enable during Sleep and Stop modes
            using GPIOASMEN = Field<0, 1>;    // IO port A clocks enable during Sleep and Stop modes
        };

        // AHB3 peripheral clocks enable in Sleep and Stop modes register
        struct AHB3SMENR : public Register<0x40021070> {
            using QSPISMEN = Field<8, 1>;    // QSPISMEN
        };

        // APB1SMENR1
        struct APB1SMENR1 : public Register<0x40021078> {
            using LPTIM1SMEN = Field<31, 1>;    // Low power timer 1 clocks enable during Sleep and Stop modes
            using OPAMPSMEN = Field<30, 1>;    // OPAMP interface clocks enable during Sleep and Stop modes
            using DAC1SMEN = Field<29, 1>;    // DAC1 interface clocks enable during Sleep and Stop modes
            using PWRSMEN = Field<28, 1>;    // Power interface clocks enable during Sleep and Stop modes
            using CAN1SMEN = Field<25, 1>;    // CAN1 clocks enable during Sleep and Stop modes
            using I2C3SMEN = Field<23, 1>;    // I2C3 clocks enable during Sleep and Stop modes
            using I2C1SMEN = Field<21, 1>;    // I2C1 clocks enable during Sleep and Stop modes
            using USART2SMEN = Field<18, 1>;    // USART2 clocks enable during Sleep and Stop modes
            using USART1SMEN = Field<17, 1>;    // USART1 clocks enable during Sleep and Stop modes
            using SP3SMEN = Field<15, 1>;    // SPI3 clocks enable during Sleep and Stop modes
            using SPI2SMEN = Field<14, 1>;    // SPI2 clocks enable during Sleep and Stop modes
            using WWDGSMEN = Field<11, 1>;    // Window watchdog clocks enable during Sleep and Stop modes
            using LCDSMEN = Field<9, 1>;    // LCD clocks enable during Sleep and Stop modes
            using TIM7SMEN = Field<5, 1>;    // TIM7 timer clocks enable during Sleep and Stop modes
            using TIM6SMEN = Field<4, 1>;    // TIM6 timer clocks enable during Sleep and Stop modes
            using TIM2SMEN = Field<0, 1>;    // TIM2 timer clocks enable during Sleep and Stop modes
            using RTCAPBSMEN = Field<10, 1>;    // RTC APB clock enable during Sleep and Stop modes
            using USBFSSMEN = Field<26, 1>;    // USB FS clock enable during Sleep and Stop modes
            using I2C2SMEN = Field<22, 1>;    // I2C2 clocks enable during Sleep and Stop modes
            using CRSSMEN = Field<24, 1>;    // CRS clock enable during Sleep and Stop modes
        };

        // APB1 peripheral clocks enable in Sleep and Stop modes register 2
        struct APB1SMENR2 : public Register<0x4002107c> {
            using LPTIM2SMEN = Field<5, 1>;    // LPTIM2SMEN
            using SWPMI1SMEN = Field<2, 1>;    // Single wire protocol clocks enable during Sleep and Stop modes
            using LPUART1SMEN = Field<0, 1>;    // Low power UART 1 clocks enable during Sleep and Stop modes
        };

        // APB2SMENR
        struct APB2SMENR : public Register<0x40021080> {
            using SAI1SMEN = Field<21, 1>;    // SAI1 clocks enable during Sleep and Stop modes
            using TIM16SMEN = Field<17, 1>;    // TIM16 timer clocks enable during Sleep and Stop modes
            using TIM15SMEN = Field<16, 1>;    // TIM15 timer clocks enable during Sleep and Stop modes
            using USART1SMEN = Field<14, 1>;    // USART1clocks enable during Sleep and Stop modes
            using SPI1SMEN = Field<12, 1>;    // SPI1 clocks enable during Sleep and Stop modes
            using TIM1SMEN = Field<11, 1>;    // TIM1 timer clocks enable during Sleep and Stop modes
            using SDMMCSMEN = Field<10, 1>;    // SDMMC clocks enable during Sleep and Stop modes
            using SYSCFGSMEN = Field<0, 1>;    // SYSCFG clocks enable during Sleep and Stop modes
        };

        // CCIPR
        struct CCIPR : public Register<0x40021088> {
            using SWPMI1SEL = Field<30, 1>;    // SWPMI1 clock source selection
            using ADCSEL = Field<28, 2>;    // ADCs clock source selection
            using CLK48SEL = Field<26, 2>;    // 48 MHz clock source selection
            using SAI1SEL = Field<22, 2>;    // SAI1 clock source selection
            using LPTIM2SEL = Field<20, 2>;    // Low power timer 2 clock source selection
            using LPTIM1SEL = Field<18, 2>;    // Low power timer 1 clock source selection
            using I2C3SEL = Field<16, 2>;    // I2C3 clock source selection
            using I2C1SEL = Field<12, 2>;    // I2C1 clock source selection
            using LPUART1SEL = Field<10, 2>;    // LPUART1 clock source selection
            using USART2SEL = Field<2, 2>;    // USART2 clock source selection
            using USART1SEL = Field<0, 2>;    // USART1 clock source selection
            using USART4SEL = Field<6, 2>;    // USART4 clock source selection
            using USART3SEL = Field<4, 2>;    // USART3 clock source selection
            using I2C2SEL = Field<14, 2>;    // I2C2 clock source selection
        };

        // BDCR
        struct BDCR : public Register<0x40021090> {
            using LSCOSEL = Field<25, 1>;    // Low speed clock output selection
            using LSCOEN = Field<24, 1>;    // Low speed clock output enable
            using BDRST = Field<16, 1>;    // Backup domain software reset
            using RTCEN = Field<15, 1>;    // RTC clock enable
            using RTCSEL = Field<8, 2>;    // RTC clock source selection
            using LSECSSD = Field<6, 1>;    // LSECSSD
            using LSECSSON = Field<5, 1>;    // LSECSSON
            using LSEDRV = Field<3, 2>;    // SE oscillator drive capability
            using LSEBYP = Field<2, 1>;    // LSE oscillator bypass
            using LSERDY = Field<1, 1>;    // LSE oscillator ready
            using LSEON = Field<0, 1>;    // LSE oscillator enable
        };

        // CSR
        struct CSR : public Register<0x40021094> {
            using LPWRSTF = Field<31, 1>;    // Low-power reset flag
            using WWDGRSTF = Field<30, 1>;    // Window watchdog reset flag
            using IWDGRSTF = Field<29, 1>;    // Independent window watchdog reset flag
            using SFTRSTF = Field<28, 1>;    // Software reset flag
            using BORRSTF = Field<27, 1>;    // BOR flag
            using PINRSTF = Field<26, 1>;    // Pin reset flag
            using OBLRSTF = Field<25, 1>;    // Option byte loader reset flag
            using FIREWALLRSTF = Field<24, 1>;    // Firewall reset flag
            using RMVF = Field<23, 1>;    // Remove reset flag
            using MSISRANGE = Field<8, 4>;    // SI range after Standby mode
            using LSIRDY = Field<1, 1>;    // LSI oscillator ready
            using LSION = Field<0, 1>;    // LSI oscillator enable
        };

        // Clock recovery RC register
        struct CRRCR : public Register<0x40021098> {
            using HSI48ON = Field<0, 1>;    // HSI48 clock enable
            using HSI48RDY = Field<1, 1>;    // HSI48 clock ready flag
            using HSI48CAL = Field<7, 9>;    // HSI48 clock calibration
        };

    };

    // Power control
    struct PWR {
        // Power control register 1
        struct CR1 : public Register<0x40007000> {
            using LPR = Field<14, 1>;    // Low-power run
            using VOS = Field<9, 2>;    // Voltage scaling range selection
            using DBP = Field<8, 1>;    // Disable backup domain write protection
            using LPMS = Field<0, 3>;    // Low-power mode selection
        };

        // Power control register 2
        struct CR2 : public Register<0x40007004> {
            using USV = Field<10, 1>;    // VDDUSB USB supply valid
            using IOSV = Field<9, 1>;    // VDDIO2 Independent I/Os supply valid
            using PVME4 = Field<7, 1>;    // Peripheral voltage monitoring 4 enable: VDDA vs. 2.2V
            using PVME3 = Field<6, 1>;    // Peripheral voltage monitoring 3 enable: VDDA vs. 1.62V
            using PVME2 = Field<5, 1>;    // Peripheral voltage monitoring 2 enable: VDDIO2 vs. 0.9V
            using PVME1 = Field<4, 1>;    // Peripheral voltage monitoring 1 enable: VDDUSB vs. 1.2V
            using PLS = Field<1, 3>;    // Power voltage detector level selection
            using PVDE = Field<0, 1>;    // Power voltage detector enable
        };

        // Power control register 3
        struct CR3 : public Register<0x40007008> {
            using EWF = Field<15, 1>;    // Enable internal wakeup line
            using APC = Field<10, 1>;    // Apply pull-up and pull-down configuration
            using RRS = Field<8, 1>;    // SRAM2 retention in Standby mode
            using EWUP5 = Field<4, 1>;    // Enable Wakeup pin WKUP5
            using EWUP4 = Field<3, 1>;    // Enable Wakeup pin WKUP4
            using EWUP3 = Field<2, 1>;    // Enable Wakeup pin WKUP3
            using EWUP2 = Field<1, 1>;    // Enable Wakeup pin WKUP2
            using EWUP1 = Field<0, 1>;    // Enable Wakeup pin WKUP1
        };

        // Power control register 4
        struct CR4 : public Register<0x4000700c> {
            using VBRS = Field<9, 1>;    // VBAT battery charging resistor selection
            using VBE = Field<8, 1>;    // VBAT battery charging enable
            using WP5 = Field<4, 1>;    // Wakeup pin WKUP5 polarity
            using WP4 = Field<3, 1>;    // Wakeup pin WKUP4 polarity
            using WP3 = Field<2, 1>;    // Wakeup pin WKUP3 polarity
            using WP2 = Field<1, 1>;    // Wakeup pin WKUP2 polarity
            using WP1 = Field<0, 1>;    // Wakeup pin WKUP1 polarity
        };

        // Power status register 1
        struct SR1 : public RegisterReadOnly<0x40007010> {
            using WUFI = Field<15, 1>;    // Wakeup flag internal
            using CSBF = Field<8, 1>;    // Standby flag
            using CWUF5 = Field<4, 1>;    // Wakeup flag 5
            using CWUF4 = Field<3, 1>;    // Wakeup flag 4
            using CWUF3 = Field<2, 1>;    // Wakeup flag 3
            using CWUF2 = Field<1, 1>;    // Wakeup flag 2
            using CWUF1 = Field<0, 1>;    // Wakeup flag 1
        };

        // Power status register 2
        struct SR2 : public RegisterReadOnly<0x40007014> {
            using PVMO4 = Field<15, 1>;    // Peripheral voltage monitoring output: VDDA vs. 2.2 V
            using PVMO3 = Field<14, 1>;    // Peripheral voltage monitoring output: VDDA vs. 1.62 V
            using PVMO2 = Field<13, 1>;    // Peripheral voltage monitoring output: VDDIO2 vs. 0.9 V
            using PVMO1 = Field<12, 1>;    // Peripheral voltage monitoring output: VDDUSB vs. 1.2 V
            using PVDO = Field<11, 1>;    // Power voltage detector output
            using VOSF = Field<10, 1>;    // Voltage scaling flag
            using REGLPF = Field<9, 1>;    // Low-power regulator flag
            using REGLPS = Field<8, 1>;    // Low-power regulator started
        };

        // Power status clear register
        struct SCR : public RegisterWriteOnly<0x40007018> {
            using SBF = Field<8, 1>;    // Clear standby flag
            using WUF5 = Field<4, 1>;    // Clear wakeup flag 5
            using WUF4 = Field<3, 1>;    // Clear wakeup flag 4
            using WUF3 = Field<2, 1>;    // Clear wakeup flag 3
            using WUF2 = Field<1, 1>;    // Clear wakeup flag 2
            using WUF1 = Field<0, 1>;    // Clear wakeup flag 1
        };

        // Power Port A pull-up control register
        struct PUCRA : public Register<0x40007020> {
            using PU15 = Field<15, 1>;    // Port A pull-up bit y (y=0..15)
            using PU14 = Field<14, 1>;    // Port A pull-up bit y (y=0..15)
            using PU13 = Field<13, 1>;    // Port A pull-up bit y (y=0..15)
            using PU12 = Field<12, 1>;    // Port A pull-up bit y (y=0..15)
            using PU11 = Field<11, 1>;    // Port A pull-up bit y (y=0..15)
            using PU10 = Field<10, 1>;    // Port A pull-up bit y (y=0..15)
            using PU9 = Field<9, 1>;    // Port A pull-up bit y (y=0..15)
            using PU8 = Field<8, 1>;    // Port A pull-up bit y (y=0..15)
            using PU7 = Field<7, 1>;    // Port A pull-up bit y (y=0..15)
            using PU6 = Field<6, 1>;    // Port A pull-up bit y (y=0..15)
            using PU5 = Field<5, 1>;    // Port A pull-up bit y (y=0..15)
            using PU4 = Field<4, 1>;    // Port A pull-up bit y (y=0..15)
            using PU3 = Field<3, 1>;    // Port A pull-up bit y (y=0..15)
            using PU2 = Field<2, 1>;    // Port A pull-up bit y (y=0..15)
            using PU1 = Field<1, 1>;    // Port A pull-up bit y (y=0..15)
            using PU0 = Field<0, 1>;    // Port A pull-up bit y (y=0..15)
        };

        // Power Port A pull-down control register
        struct PDCRA : public Register<0x40007024> {
            using PD15 = Field<15, 1>;    // Port A pull-down bit y (y=0..15)
            using PD14 = Field<14, 1>;    // Port A pull-down bit y (y=0..15)
            using PD13 = Field<13, 1>;    // Port A pull-down bit y (y=0..15)
            using PD12 = Field<12, 1>;    // Port A pull-down bit y (y=0..15)
            using PD11 = Field<11, 1>;    // Port A pull-down bit y (y=0..15)
            using PD10 = Field<10, 1>;    // Port A pull-down bit y (y=0..15)
            using PD9 = Field<9, 1>;    // Port A pull-down bit y (y=0..15)
            using PD8 = Field<8, 1>;    // Port A pull-down bit y (y=0..15)
            using PD7 = Field<7, 1>;    // Port A pull-down bit y (y=0..15)
            using PD6 = Field<6, 1>;    // Port A pull-down bit y (y=0..15)
            using PD5 = Field<5, 1>;    // Port A pull-down bit y (y=0..15)
            using PD4 = Field<4, 1>;    // Port A pull-down bit y (y=0..15)
            using PD3 = Field<3, 1>;    // Port A pull-down bit y (y=0..15)
            using PD2 = Field<2, 1>;    // Port A pull-down bit y (y=0..15)
            using PD1 = Field<1, 1>;    // Port A pull-down bit y (y=0..15)
            using PD0 = Field<0, 1>;    // Port A pull-down bit y (y=0..15)
        };

        // Power Port B pull-up control register
        struct PUCRB : public Register<0x40007028> {
            using PU15 = Field<15, 1>;    // Port B pull-up bit y (y=0..15)
            using PU14 = Field<14, 1>;    // Port B pull-up bit y (y=0..15)
            using PU13 = Field<13, 1>;    // Port B pull-up bit y (y=0..15)
            using PU12 = Field<12, 1>;    // Port B pull-up bit y (y=0..15)
            using PU11 = Field<11, 1>;    // Port B pull-up bit y (y=0..15)
            using PU10 = Field<10, 1>;    // Port B pull-up bit y (y=0..15)
            using PU9 = Field<9, 1>;    // Port B pull-up bit y (y=0..15)
            using PU8 = Field<8, 1>;    // Port B pull-up bit y (y=0..15)
            using PU7 = Field<7, 1>;    // Port B pull-up bit y (y=0..15)
            using PU6 = Field<6, 1>;    // Port B pull-up bit y (y=0..15)
            using PU5 = Field<5, 1>;    // Port B pull-up bit y (y=0..15)
            using PU4 = Field<4, 1>;    // Port B pull-up bit y (y=0..15)
            using PU3 = Field<3, 1>;    // Port B pull-up bit y (y=0..15)
            using PU2 = Field<2, 1>;    // Port B pull-up bit y (y=0..15)
            using PU1 = Field<1, 1>;    // Port B pull-up bit y (y=0..15)
            using PU0 = Field<0, 1>;    // Port B pull-up bit y (y=0..15)
        };

        // Power Port B pull-down control register
        struct PDCRB : public Register<0x4000702c> {
            using PD15 = Field<15, 1>;    // Port B pull-down bit y (y=0..15)
            using PD14 = Field<14, 1>;    // Port B pull-down bit y (y=0..15)
            using PD13 = Field<13, 1>;    // Port B pull-down bit y (y=0..15)
            using PD12 = Field<12, 1>;    // Port B pull-down bit y (y=0..15)
            using PD11 = Field<11, 1>;    // Port B pull-down bit y (y=0..15)
            using PD10 = Field<10, 1>;    // Port B pull-down bit y (y=0..15)
            using PD9 = Field<9, 1>;    // Port B pull-down bit y (y=0..15)
            using PD8 = Field<8, 1>;    // Port B pull-down bit y (y=0..15)
            using PD7 = Field<7, 1>;    // Port B pull-down bit y (y=0..15)
            using PD6 = Field<6, 1>;    // Port B pull-down bit y (y=0..15)
            using PD5 = Field<5, 1>;    // Port B pull-down bit y (y=0..15)
            using PD4 = Field<4, 1>;    // Port B pull-down bit y (y=0..15)
            using PD3 = Field<3, 1>;    // Port B pull-down bit y (y=0..15)
            using PD2 = Field<2, 1>;    // Port B pull-down bit y (y=0..15)
            using PD1 = Field<1, 1>;    // Port B pull-down bit y (y=0..15)
            using PD0 = Field<0, 1>;    // Port B pull-down bit y (y=0..15)
        };

        // Power Port C pull-up control register
        struct PUCRC : public Register<0x40007030> {
            using PU15 = Field<15, 1>;    // Port C pull-up bit y (y=0..15)
            using PU14 = Field<14, 1>;    // Port C pull-up bit y (y=0..15)
            using PU13 = Field<13, 1>;    // Port C pull-up bit y (y=0..15)
            using PU12 = Field<12, 1>;    // Port C pull-up bit y (y=0..15)
            using PU11 = Field<11, 1>;    // Port C pull-up bit y (y=0..15)
            using PU10 = Field<10, 1>;    // Port C pull-up bit y (y=0..15)
            using PU9 = Field<9, 1>;    // Port C pull-up bit y (y=0..15)
            using PU8 = Field<8, 1>;    // Port C pull-up bit y (y=0..15)
            using PU7 = Field<7, 1>;    // Port C pull-up bit y (y=0..15)
            using PU6 = Field<6, 1>;    // Port C pull-up bit y (y=0..15)
            using PU5 = Field<5, 1>;    // Port C pull-up bit y (y=0..15)
            using PU4 = Field<4, 1>;    // Port C pull-up bit y (y=0..15)
            using PU3 = Field<3, 1>;    // Port C pull-up bit y (y=0..15)
            using PU2 = Field<2, 1>;    // Port C pull-up bit y (y=0..15)
            using PU1 = Field<1, 1>;    // Port C pull-up bit y (y=0..15)
            using PU0 = Field<0, 1>;    // Port C pull-up bit y (y=0..15)
        };

        // Power Port C pull-down control register
        struct PDCRC : public Register<0x40007034> {
            using PD15 = Field<15, 1>;    // Port C pull-down bit y (y=0..15)
            using PD14 = Field<14, 1>;    // Port C pull-down bit y (y=0..15)
            using PD13 = Field<13, 1>;    // Port C pull-down bit y (y=0..15)
            using PD12 = Field<12, 1>;    // Port C pull-down bit y (y=0..15)
            using PD11 = Field<11, 1>;    // Port C pull-down bit y (y=0..15)
            using PD10 = Field<10, 1>;    // Port C pull-down bit y (y=0..15)
            using PD9 = Field<9, 1>;    // Port C pull-down bit y (y=0..15)
            using PD8 = Field<8, 1>;    // Port C pull-down bit y (y=0..15)
            using PD7 = Field<7, 1>;    // Port C pull-down bit y (y=0..15)
            using PD6 = Field<6, 1>;    // Port C pull-down bit y (y=0..15)
            using PD5 = Field<5, 1>;    // Port C pull-down bit y (y=0..15)
            using PD4 = Field<4, 1>;    // Port C pull-down bit y (y=0..15)
            using PD3 = Field<3, 1>;    // Port C pull-down bit y (y=0..15)
            using PD2 = Field<2, 1>;    // Port C pull-down bit y (y=0..15)
            using PD1 = Field<1, 1>;    // Port C pull-down bit y (y=0..15)
            using PD0 = Field<0, 1>;    // Port C pull-down bit y (y=0..15)
        };

        // Power Port D pull-up control register
        struct PUCRD : public Register<0x40007038> {
            using PU15 = Field<15, 1>;    // Port D pull-up bit y (y=0..15)
            using PU14 = Field<14, 1>;    // Port D pull-up bit y (y=0..15)
            using PU13 = Field<13, 1>;    // Port D pull-up bit y (y=0..15)
            using PU12 = Field<12, 1>;    // Port D pull-up bit y (y=0..15)
            using PU11 = Field<11, 1>;    // Port D pull-up bit y (y=0..15)
            using PU10 = Field<10, 1>;    // Port D pull-up bit y (y=0..15)
            using PU9 = Field<9, 1>;    // Port D pull-up bit y (y=0..15)
            using PU8 = Field<8, 1>;    // Port D pull-up bit y (y=0..15)
            using PU7 = Field<7, 1>;    // Port D pull-up bit y (y=0..15)
            using PU6 = Field<6, 1>;    // Port D pull-up bit y (y=0..15)
            using PU5 = Field<5, 1>;    // Port D pull-up bit y (y=0..15)
            using PU4 = Field<4, 1>;    // Port D pull-up bit y (y=0..15)
            using PU3 = Field<3, 1>;    // Port D pull-up bit y (y=0..15)
            using PU2 = Field<2, 1>;    // Port D pull-up bit y (y=0..15)
            using PU1 = Field<1, 1>;    // Port D pull-up bit y (y=0..15)
            using PU0 = Field<0, 1>;    // Port D pull-up bit y (y=0..15)
        };

        // Power Port D pull-down control register
        struct PDCRD : public Register<0x4000703c> {
            using PD15 = Field<15, 1>;    // Port D pull-down bit y (y=0..15)
            using PD14 = Field<14, 1>;    // Port D pull-down bit y (y=0..15)
            using PD13 = Field<13, 1>;    // Port D pull-down bit y (y=0..15)
            using PD12 = Field<12, 1>;    // Port D pull-down bit y (y=0..15)
            using PD11 = Field<11, 1>;    // Port D pull-down bit y (y=0..15)
            using PD10 = Field<10, 1>;    // Port D pull-down bit y (y=0..15)
            using PD9 = Field<9, 1>;    // Port D pull-down bit y (y=0..15)
            using PD8 = Field<8, 1>;    // Port D pull-down bit y (y=0..15)
            using PD7 = Field<7, 1>;    // Port D pull-down bit y (y=0..15)
            using PD6 = Field<6, 1>;    // Port D pull-down bit y (y=0..15)
            using PD5 = Field<5, 1>;    // Port D pull-down bit y (y=0..15)
            using PD4 = Field<4, 1>;    // Port D pull-down bit y (y=0..15)
            using PD3 = Field<3, 1>;    // Port D pull-down bit y (y=0..15)
            using PD2 = Field<2, 1>;    // Port D pull-down bit y (y=0..15)
            using PD1 = Field<1, 1>;    // Port D pull-down bit y (y=0..15)
            using PD0 = Field<0, 1>;    // Port D pull-down bit y (y=0..15)
        };

        // Power Port E pull-up control register
        struct PUCRE : public Register<0x40007040> {
            using PU15 = Field<15, 1>;    // Port E pull-up bit y (y=0..15)
            using PU14 = Field<14, 1>;    // Port E pull-up bit y (y=0..15)
            using PU13 = Field<13, 1>;    // Port E pull-up bit y (y=0..15)
            using PU12 = Field<12, 1>;    // Port E pull-up bit y (y=0..15)
            using PU11 = Field<11, 1>;    // Port E pull-up bit y (y=0..15)
            using PU10 = Field<10, 1>;    // Port E pull-up bit y (y=0..15)
            using PU9 = Field<9, 1>;    // Port E pull-up bit y (y=0..15)
            using PU8 = Field<8, 1>;    // Port E pull-up bit y (y=0..15)
            using PU7 = Field<7, 1>;    // Port E pull-up bit y (y=0..15)
            using PU6 = Field<6, 1>;    // Port E pull-up bit y (y=0..15)
            using PU5 = Field<5, 1>;    // Port E pull-up bit y (y=0..15)
            using PU4 = Field<4, 1>;    // Port E pull-up bit y (y=0..15)
            using PU3 = Field<3, 1>;    // Port E pull-up bit y (y=0..15)
            using PU2 = Field<2, 1>;    // Port E pull-up bit y (y=0..15)
            using PU1 = Field<1, 1>;    // Port E pull-up bit y (y=0..15)
            using PU0 = Field<0, 1>;    // Port E pull-up bit y (y=0..15)
        };

        // Power Port E pull-down control register
        struct PDCRE : public Register<0x40007044> {
            using PD15 = Field<15, 1>;    // Port E pull-down bit y (y=0..15)
            using PD14 = Field<14, 1>;    // Port E pull-down bit y (y=0..15)
            using PD13 = Field<13, 1>;    // Port E pull-down bit y (y=0..15)
            using PD12 = Field<12, 1>;    // Port E pull-down bit y (y=0..15)
            using PD11 = Field<11, 1>;    // Port E pull-down bit y (y=0..15)
            using PD10 = Field<10, 1>;    // Port E pull-down bit y (y=0..15)
            using PD9 = Field<9, 1>;    // Port E pull-down bit y (y=0..15)
            using PD8 = Field<8, 1>;    // Port E pull-down bit y (y=0..15)
            using PD7 = Field<7, 1>;    // Port E pull-down bit y (y=0..15)
            using PD6 = Field<6, 1>;    // Port E pull-down bit y (y=0..15)
            using PD5 = Field<5, 1>;    // Port E pull-down bit y (y=0..15)
            using PD4 = Field<4, 1>;    // Port E pull-down bit y (y=0..15)
            using PD3 = Field<3, 1>;    // Port E pull-down bit y (y=0..15)
            using PD2 = Field<2, 1>;    // Port E pull-down bit y (y=0..15)
            using PD1 = Field<1, 1>;    // Port E pull-down bit y (y=0..15)
            using PD0 = Field<0, 1>;    // Port E pull-down bit y (y=0..15)
        };

        // Power Port F pull-up control register
        struct PUCRF : public Register<0x40007048> {
            using PU15 = Field<15, 1>;    // Port F pull-up bit y (y=0..15)
            using PU14 = Field<14, 1>;    // Port F pull-up bit y (y=0..15)
            using PU13 = Field<13, 1>;    // Port F pull-up bit y (y=0..15)
            using PU12 = Field<12, 1>;    // Port F pull-up bit y (y=0..15)
            using PU11 = Field<11, 1>;    // Port F pull-up bit y (y=0..15)
            using PU10 = Field<10, 1>;    // Port F pull-up bit y (y=0..15)
            using PU9 = Field<9, 1>;    // Port F pull-up bit y (y=0..15)
            using PU8 = Field<8, 1>;    // Port F pull-up bit y (y=0..15)
            using PU7 = Field<7, 1>;    // Port F pull-up bit y (y=0..15)
            using PU6 = Field<6, 1>;    // Port F pull-up bit y (y=0..15)
            using PU5 = Field<5, 1>;    // Port F pull-up bit y (y=0..15)
            using PU4 = Field<4, 1>;    // Port F pull-up bit y (y=0..15)
            using PU3 = Field<3, 1>;    // Port F pull-up bit y (y=0..15)
            using PU2 = Field<2, 1>;    // Port F pull-up bit y (y=0..15)
            using PU1 = Field<1, 1>;    // Port F pull-up bit y (y=0..15)
            using PU0 = Field<0, 1>;    // Port F pull-up bit y (y=0..15)
        };

        // Power Port F pull-down control register
        struct PDCRF : public Register<0x4000704c> {
            using PD15 = Field<15, 1>;    // Port F pull-down bit y (y=0..15)
            using PD14 = Field<14, 1>;    // Port F pull-down bit y (y=0..15)
            using PD13 = Field<13, 1>;    // Port F pull-down bit y (y=0..15)
            using PD12 = Field<12, 1>;    // Port F pull-down bit y (y=0..15)
            using PD11 = Field<11, 1>;    // Port F pull-down bit y (y=0..15)
            using PD10 = Field<10, 1>;    // Port F pull-down bit y (y=0..15)
            using PD9 = Field<9, 1>;    // Port F pull-down bit y (y=0..15)
            using PD8 = Field<8, 1>;    // Port F pull-down bit y (y=0..15)
            using PD7 = Field<7, 1>;    // Port F pull-down bit y (y=0..15)
            using PD6 = Field<6, 1>;    // Port F pull-down bit y (y=0..15)
            using PD5 = Field<5, 1>;    // Port F pull-down bit y (y=0..15)
            using PD4 = Field<4, 1>;    // Port F pull-down bit y (y=0..15)
            using PD3 = Field<3, 1>;    // Port F pull-down bit y (y=0..15)
            using PD2 = Field<2, 1>;    // Port F pull-down bit y (y=0..15)
            using PD1 = Field<1, 1>;    // Port F pull-down bit y (y=0..15)
            using PD0 = Field<0, 1>;    // Port F pull-down bit y (y=0..15)
        };

        // Power Port G pull-up control register
        struct PUCRG : public Register<0x40007050> {
            using PU15 = Field<15, 1>;    // Port G pull-up bit y (y=0..15)
            using PU14 = Field<14, 1>;    // Port G pull-up bit y (y=0..15)
            using PU13 = Field<13, 1>;    // Port G pull-up bit y (y=0..15)
            using PU12 = Field<12, 1>;    // Port G pull-up bit y (y=0..15)
            using PU11 = Field<11, 1>;    // Port G pull-up bit y (y=0..15)
            using PU10 = Field<10, 1>;    // Port G pull-up bit y (y=0..15)
            using PU9 = Field<9, 1>;    // Port G pull-up bit y (y=0..15)
            using PU8 = Field<8, 1>;    // Port G pull-up bit y (y=0..15)
            using PU7 = Field<7, 1>;    // Port G pull-up bit y (y=0..15)
            using PU6 = Field<6, 1>;    // Port G pull-up bit y (y=0..15)
            using PU5 = Field<5, 1>;    // Port G pull-up bit y (y=0..15)
            using PU4 = Field<4, 1>;    // Port G pull-up bit y (y=0..15)
            using PU3 = Field<3, 1>;    // Port G pull-up bit y (y=0..15)
            using PU2 = Field<2, 1>;    // Port G pull-up bit y (y=0..15)
            using PU1 = Field<1, 1>;    // Port G pull-up bit y (y=0..15)
            using PU0 = Field<0, 1>;    // Port G pull-up bit y (y=0..15)
        };

        // Power Port G pull-down control register
        struct PDCRG : public Register<0x40007054> {
            using PD15 = Field<15, 1>;    // Port G pull-down bit y (y=0..15)
            using PD14 = Field<14, 1>;    // Port G pull-down bit y (y=0..15)
            using PD13 = Field<13, 1>;    // Port G pull-down bit y (y=0..15)
            using PD12 = Field<12, 1>;    // Port G pull-down bit y (y=0..15)
            using PD11 = Field<11, 1>;    // Port G pull-down bit y (y=0..15)
            using PD10 = Field<10, 1>;    // Port G pull-down bit y (y=0..15)
            using PD9 = Field<9, 1>;    // Port G pull-down bit y (y=0..15)
            using PD8 = Field<8, 1>;    // Port G pull-down bit y (y=0..15)
            using PD7 = Field<7, 1>;    // Port G pull-down bit y (y=0..15)
            using PD6 = Field<6, 1>;    // Port G pull-down bit y (y=0..15)
            using PD5 = Field<5, 1>;    // Port G pull-down bit y (y=0..15)
            using PD4 = Field<4, 1>;    // Port G pull-down bit y (y=0..15)
            using PD3 = Field<3, 1>;    // Port G pull-down bit y (y=0..15)
            using PD2 = Field<2, 1>;    // Port G pull-down bit y (y=0..15)
            using PD1 = Field<1, 1>;    // Port G pull-down bit y (y=0..15)
            using PD0 = Field<0, 1>;    // Port G pull-down bit y (y=0..15)
        };

        // Power Port H pull-up control register
        struct PUCRH : public Register<0x40007058> {
            using PU1 = Field<1, 1>;    // Port H pull-up bit y (y=0..1)
            using PU0 = Field<0, 1>;    // Port H pull-up bit y (y=0..1)
        };

        // Power Port H pull-down control register
        struct PDCRH : public Register<0x4000705c> {
            using PD1 = Field<1, 1>;    // Port H pull-down bit y (y=0..1)
            using PD0 = Field<0, 1>;    // Port H pull-down bit y (y=0..1)
        };

    };

    // System configuration controller
    struct SYSCFG {
        // memory remap register
        struct MEMRMP : public Register<0x40010000> {
            using FB_MODE = Field<8, 1>;    // Flash Bank mode selection
            using QFS = Field<3, 1>;    // QUADSPI memory mapping swap
            using MEM_MODE = Field<0, 3>;    // Memory mapping selection
        };

        // configuration register 1
        struct CFGR1 : public Register<0x40010004> {
            using FPU_IE = Field<26, 6>;    // Floating Point Unit interrupts enable bits
            using I2C3_FMP = Field<22, 1>;    // I2C3 Fast-mode Plus driving capability activation
            using I2C2_FMP = Field<21, 1>;    // I2C2 Fast-mode Plus driving capability activation
            using I2C1_FMP = Field<20, 1>;    // I2C1 Fast-mode Plus driving capability activation
            using I2C_PB9_FMP = Field<19, 1>;    // Fast-mode Plus (Fm+) driving capability activation on PB9
            using I2C_PB8_FMP = Field<18, 1>;    // Fast-mode Plus (Fm+) driving capability activation on PB8
            using I2C_PB7_FMP = Field<17, 1>;    // Fast-mode Plus (Fm+) driving capability activation on PB7
            using I2C_PB6_FMP = Field<16, 1>;    // Fast-mode Plus (Fm+) driving capability activation on PB6
            using BOOSTEN = Field<8, 1>;    // I/O analog switch voltage booster enable
            using FWDIS = Field<0, 1>;    // Firewall disable
        };

        // external interrupt configuration register 1
        struct EXTICR1 : public Register<0x40010008> {
            using EXTI3 = Field<12, 3>;    // EXTI 3 configuration bits
            using EXTI2 = Field<8, 3>;    // EXTI 2 configuration bits
            using EXTI1 = Field<4, 3>;    // EXTI 1 configuration bits
            using EXTI0 = Field<0, 3>;    // EXTI 0 configuration bits
        };

        // external interrupt configuration register 2
        struct EXTICR2 : public Register<0x4001000c> {
            using EXTI7 = Field<12, 3>;    // EXTI 7 configuration bits
            using EXTI6 = Field<8, 3>;    // EXTI 6 configuration bits
            using EXTI5 = Field<4, 3>;    // EXTI 5 configuration bits
            using EXTI4 = Field<0, 3>;    // EXTI 4 configuration bits
        };

        // external interrupt configuration register 3
        struct EXTICR3 : public Register<0x40010010> {
            using EXTI11 = Field<12, 3>;    // EXTI 11 configuration bits
            using EXTI10 = Field<8, 3>;    // EXTI 10 configuration bits
            using EXTI9 = Field<4, 3>;    // EXTI 9 configuration bits
            using EXTI8 = Field<0, 3>;    // EXTI 8 configuration bits
        };

        // external interrupt configuration register 4
        struct EXTICR4 : public Register<0x40010014> {
            using EXTI15 = Field<12, 3>;    // EXTI15 configuration bits
            using EXTI14 = Field<8, 3>;    // EXTI14 configuration bits
            using EXTI13 = Field<4, 3>;    // EXTI13 configuration bits
            using EXTI12 = Field<0, 3>;    // EXTI12 configuration bits
        };

        // SCSR
        struct SCSR : public Register<0x40010018> {
            using SRAM2BSY = Field<1, 1>;    // SRAM2 busy by erase operation
            using SRAM2ER = Field<0, 1>;    // SRAM2 Erase
        };

        // CFGR2
        struct CFGR2 : public Register<0x4001001c> {
            using SPF = Field<8, 1>;    // SRAM2 parity error flag
            using ECCL = Field<3, 1>;    // ECC Lock
            using PVDL = Field<2, 1>;    // PVD lock enable bit
            using SPL = Field<1, 1>;    // SRAM2 parity lock bit
            using CLL = Field<0, 1>;    // OCKUP (Hardfault) output enable bit
        };

        // SWPR
        struct SWPR : public RegisterWriteOnly<0x40010020> {
            using P31WP = Field<31, 1>;    // SRAM2 page 31 write protection
            using P30WP = Field<30, 1>;    // P30WP
            using P29WP = Field<29, 1>;    // P29WP
            using P28WP = Field<28, 1>;    // P28WP
            using P27WP = Field<27, 1>;    // P27WP
            using P26WP = Field<26, 1>;    // P26WP
            using P25WP = Field<25, 1>;    // P25WP
            using P24WP = Field<24, 1>;    // P24WP
            using P23WP = Field<23, 1>;    // P23WP
            using P22WP = Field<22, 1>;    // P22WP
            using P21WP = Field<21, 1>;    // P21WP
            using P20WP = Field<20, 1>;    // P20WP
            using P19WP = Field<19, 1>;    // P19WP
            using P18WP = Field<18, 1>;    // P18WP
            using P17WP = Field<17, 1>;    // P17WP
            using P16WP = Field<16, 1>;    // P16WP
            using P15WP = Field<15, 1>;    // P15WP
            using P14WP = Field<14, 1>;    // P14WP
            using P13WP = Field<13, 1>;    // P13WP
            using P12WP = Field<12, 1>;    // P12WP
            using P11WP = Field<11, 1>;    // P11WP
            using P10WP = Field<10, 1>;    // P10WP
            using P9WP = Field<9, 1>;    // P9WP
            using P8WP = Field<8, 1>;    // P8WP
            using P7WP = Field<7, 1>;    // P7WP
            using P6WP = Field<6, 1>;    // P6WP
            using P5WP = Field<5, 1>;    // P5WP
            using P4WP = Field<4, 1>;    // P4WP
            using P3WP = Field<3, 1>;    // P3WP
            using P2WP = Field<2, 1>;    // P2WP
            using P1WP = Field<1, 1>;    // P1WP
            using P0WP = Field<0, 1>;    // P0WP
        };

        // SKR
        struct SKR : public RegisterWriteOnly<0x40010024> {
            using KEY = Field<0, 8>;    // SRAM2 write protection key for software erase
        };

    };

    // Random number generator
    struct RNG {
        // control register
        struct CR : public Register<0x50060800> {
            using IE = Field<3, 1>;    // Interrupt enable
            using RNGEN = Field<2, 1>;    // Random number generator enable
        };

        // status register
        struct SR : public Register<0x50060804> {
            using SEIS = Field<6, 1>;    // Seed error interrupt status
            using CEIS = Field<5, 1>;    // Clock error interrupt status
            using SECS = Field<2, 1>;    // Seed error current status
            using CECS = Field<1, 1>;    // Clock error current status
            using DRDY = Field<0, 1>;    // Data ready
        };

        // data register
        struct DR : public RegisterReadOnly<0x50060808> {
            using RNDATA = Field<0, 32>;    // Random data
        };

    };

    // Advanced encryption standard hardware accelerator
    struct AES {
        // control register
        struct CR : public Register<0x50060000> {
            using DMAOUTEN = Field<12, 1>;    // Enable DMA management of data output phase
            using DMAINEN = Field<11, 1>;    // Enable DMA management of data input phase
            using ERRIE = Field<10, 1>;    // Error interrupt enable
            using CCFIE = Field<9, 1>;    // CCF flag interrupt enable
            using ERRC = Field<8, 1>;    // Error clear
            using CCFC = Field<7, 1>;    // Computation Complete Flag Clear
            using CHMOD = Field<5, 2>;    // AES chaining mode
            using MODE = Field<3, 2>;    // AES operating mode
            using DATATYPE = Field<1, 2>;    // Data type selection (for data in and data out to/from the cryptographic block)
            using EN = Field<0, 1>;    // AES enable
        };

        // status register
        struct SR : public RegisterReadOnly<0x50060004> {
            using WRERR = Field<2, 1>;    // Write error flag
            using RDERR = Field<1, 1>;    // Read error flag
            using CCF = Field<0, 1>;    // Computation complete flag
        };

        // data input register
        struct DINR : public Register<0x50060008> {
            using AES_DINR = Field<0, 32>;    // Data Input Register
        };

        // data output register
        struct DOUTR : public RegisterReadOnly<0x5006000c> {
            using AES_DOUTR = Field<0, 32>;    // Data output register
        };

        // key register 0
        struct KEYR0 : public Register<0x50060010> {
            using AES_KEYR0 = Field<0, 32>;    // Data Output Register (LSB key [31:0])
        };

        // key register 1
        struct KEYR1 : public Register<0x50060014> {
            using AES_KEYR1 = Field<0, 32>;    // AES key register (key [63:32])
        };

        // key register 2
        struct KEYR2 : public Register<0x50060018> {
            using AES_KEYR2 = Field<0, 32>;    // AES key register (key [95:64])
        };

        // key register 3
        struct KEYR3 : public Register<0x5006001c> {
            using AES_KEYR3 = Field<0, 32>;    // AES key register (MSB key [127:96])
        };

        // initialization vector register 0
        struct IVR0 : public Register<0x50060020> {
            using AES_IVR0 = Field<0, 32>;    // initialization vector register (LSB IVR [31:0])
        };

        // initialization vector register 1
        struct IVR1 : public Register<0x50060024> {
            using AES_IVR1 = Field<0, 32>;    // Initialization Vector Register (IVR [63:32])
        };

        // initialization vector register 2
        struct IVR2 : public Register<0x50060028> {
            using AES_IVR2 = Field<0, 32>;    // Initialization Vector Register (IVR [95:64])
        };

        // initialization vector register 3
        struct IVR3 : public Register<0x5006002c> {
            using AES_IVR3 = Field<0, 32>;    // Initialization Vector Register (MSB IVR [127:96])
        };

    };

    // Analog-to-Digital Converter
    struct ADC {
        // interrupt and status register
        struct ISR : public Register<0x50040000> {
            using JQOVF = Field<10, 1>;    // JQOVF
            using AWD3 = Field<9, 1>;    // AWD3
            using AWD2 = Field<8, 1>;    // AWD2
            using AWD1 = Field<7, 1>;    // AWD1
            using JEOS = Field<6, 1>;    // JEOS
            using JEOC = Field<5, 1>;    // JEOC
            using OVR = Field<4, 1>;    // OVR
            using EOS = Field<3, 1>;    // EOS
            using EOC = Field<2, 1>;    // EOC
            using EOSMP = Field<1, 1>;    // EOSMP
            using ADRDY = Field<0, 1>;    // ADRDY
        };

        // interrupt enable register
        struct IER : public Register<0x50040004> {
            using JQOVFIE = Field<10, 1>;    // JQOVFIE
            using AWD3IE = Field<9, 1>;    // AWD3IE
            using AWD2IE = Field<8, 1>;    // AWD2IE
            using AWD1IE = Field<7, 1>;    // AWD1IE
            using JEOSIE = Field<6, 1>;    // JEOSIE
            using JEOCIE = Field<5, 1>;    // JEOCIE
            using OVRIE = Field<4, 1>;    // OVRIE
            using EOSIE = Field<3, 1>;    // EOSIE
            using EOCIE = Field<2, 1>;    // EOCIE
            using EOSMPIE = Field<1, 1>;    // EOSMPIE
            using ADRDYIE = Field<0, 1>;    // ADRDYIE
        };

        // control register
        struct CR : public Register<0x50040008> {
            using ADCAL = Field<31, 1>;    // ADCAL
            using ADCALDIF = Field<30, 1>;    // ADCALDIF
            using DEEPPWD = Field<29, 1>;    // DEEPPWD
            using ADVREGEN = Field<28, 1>;    // ADVREGEN
            using JADSTP = Field<5, 1>;    // JADSTP
            using ADSTP = Field<4, 1>;    // ADSTP
            using JADSTART = Field<3, 1>;    // JADSTART
            using ADSTART = Field<2, 1>;    // ADSTART
            using ADDIS = Field<1, 1>;    // ADDIS
            using ADEN = Field<0, 1>;    // ADEN
        };

        // configuration register
        struct CFGR : public Register<0x5004000c> {
            using AWDCH1CH = Field<26, 5>;    // AWDCH1CH
            using JAUTO = Field<25, 1>;    // JAUTO
            using JAWD1EN = Field<24, 1>;    // JAWD1EN
            using AWD1EN = Field<23, 1>;    // AWD1EN
            using AWD1SGL = Field<22, 1>;    // AWD1SGL
            using JQM = Field<21, 1>;    // JQM
            using JDISCEN = Field<20, 1>;    // JDISCEN
            using DISCNUM = Field<17, 3>;    // DISCNUM
            using DISCEN = Field<16, 1>;    // DISCEN
            using AUTOFF = Field<15, 1>;    // AUTOFF
            using AUTDLY = Field<14, 1>;    // AUTDLY
            using CONT = Field<13, 1>;    // CONT
            using OVRMOD = Field<12, 1>;    // OVRMOD
            using EXTEN = Field<10, 2>;    // EXTEN
            using EXTSEL = Field<6, 4>;    // EXTSEL
            using ALIGN = Field<5, 1>;    // ALIGN
            using RES = Field<3, 2>;    // RES
            using DMACFG = Field<1, 1>;    // DMACFG
            using DMAEN = Field<0, 1>;    // DMAEN
        };

        // configuration register
        struct CFGR2 : public Register<0x50040010> {
            using ROVSM = Field<10, 1>;    // EXTEN
            using TOVS = Field<9, 1>;    // EXTSEL
            using OVSS = Field<5, 4>;    // ALIGN
            using OVSR = Field<2, 3>;    // RES
            using JOVSE = Field<1, 1>;    // DMACFG
            using ROVSE = Field<0, 1>;    // DMAEN
        };

        // sample time register 1
        struct SMPR1 : public Register<0x50040014> {
            using SMP9 = Field<27, 3>;    // SMP9
            using SMP8 = Field<24, 3>;    // SMP8
            using SMP7 = Field<21, 3>;    // SMP7
            using SMP6 = Field<18, 3>;    // SMP6
            using SMP5 = Field<15, 3>;    // SMP5
            using SMP4 = Field<12, 3>;    // SMP4
            using SMP3 = Field<9, 3>;    // SMP3
            using SMP2 = Field<6, 3>;    // SMP2
            using SMP1 = Field<3, 3>;    // SMP1
        };

        // sample time register 2
        struct SMPR2 : public Register<0x50040018> {
            using SMP18 = Field<24, 3>;    // SMP18
            using SMP17 = Field<21, 3>;    // SMP17
            using SMP16 = Field<18, 3>;    // SMP16
            using SMP15 = Field<15, 3>;    // SMP15
            using SMP14 = Field<12, 3>;    // SMP14
            using SMP13 = Field<9, 3>;    // SMP13
            using SMP12 = Field<6, 3>;    // SMP12
            using SMP11 = Field<3, 3>;    // SMP11
            using SMP10 = Field<0, 3>;    // SMP10
        };

        // watchdog threshold register 1
        struct TR1 : public Register<0x50040020> {
            using HT1 = Field<16, 12>;    // HT1
            using LT1 = Field<0, 12>;    // LT1
        };

        // watchdog threshold register
        struct TR2 : public Register<0x50040024> {
            using HT2 = Field<16, 8>;    // HT2
            using LT2 = Field<0, 8>;    // LT2
        };

        // watchdog threshold register 3
        struct TR3 : public Register<0x50040028> {
            using HT3 = Field<16, 8>;    // HT3
            using LT3 = Field<0, 8>;    // LT3
        };

        // regular sequence register 1
        struct SQR1 : public Register<0x50040030> {
            using SQ4 = Field<24, 5>;    // SQ4
            using SQ3 = Field<18, 5>;    // SQ3
            using SQ2 = Field<12, 5>;    // SQ2
            using SQ1 = Field<6, 5>;    // SQ1
            using L3 = Field<0, 4>;    // L3
        };

        // regular sequence register 2
        struct SQR2 : public Register<0x50040034> {
            using SQ9 = Field<24, 5>;    // SQ9
            using SQ8 = Field<18, 5>;    // SQ8
            using SQ7 = Field<12, 5>;    // SQ7
            using SQ6 = Field<6, 5>;    // SQ6
            using SQ5 = Field<0, 5>;    // SQ5
        };

        // regular sequence register 3
        struct SQR3 : public Register<0x50040038> {
            using SQ14 = Field<24, 5>;    // SQ14
            using SQ13 = Field<18, 5>;    // SQ13
            using SQ12 = Field<12, 5>;    // SQ12
            using SQ11 = Field<6, 5>;    // SQ11
            using SQ10 = Field<0, 5>;    // SQ10
        };

        // regular sequence register 4
        struct SQR4 : public Register<0x5004003c> {
            using SQ16 = Field<6, 5>;    // SQ16
            using SQ15 = Field<0, 5>;    // SQ15
        };

        // regular Data Register
        struct DR : public RegisterReadOnly<0x50040040> {
            using regularDATA = Field<0, 16>;    // regularDATA
        };

        // injected sequence register
        struct JSQR : public Register<0x5004004c> {
            using JSQ4 = Field<26, 5>;    // JSQ4
            using JSQ3 = Field<20, 5>;    // JSQ3
            using JSQ2 = Field<14, 5>;    // JSQ2
            using JSQ1 = Field<8, 5>;    // JSQ1
            using JEXTEN = Field<6, 2>;    // JEXTEN
            using JEXTSEL = Field<2, 4>;    // JEXTSEL
            using JL = Field<0, 2>;    // JL
        };

        // offset register 1
        struct OFR1 : public Register<0x50040060> {
            using OFFSET1_EN = Field<31, 1>;    // OFFSET1_EN
            using OFFSET1_CH = Field<26, 5>;    // OFFSET1_CH
            using OFFSET1 = Field<0, 12>;    // OFFSET1
        };

        // offset register 2
        struct OFR2 : public Register<0x50040064> {
            using OFFSET2_EN = Field<31, 1>;    // OFFSET2_EN
            using OFFSET2_CH = Field<26, 5>;    // OFFSET2_CH
            using OFFSET2 = Field<0, 12>;    // OFFSET2
        };

        // offset register 3
        struct OFR3 : public Register<0x50040068> {
            using OFFSET3_EN = Field<31, 1>;    // OFFSET3_EN
            using OFFSET3_CH = Field<26, 5>;    // OFFSET3_CH
            using OFFSET3 = Field<0, 12>;    // OFFSET3
        };

        // offset register 4
        struct OFR4 : public Register<0x5004006c> {
            using OFFSET4_EN = Field<31, 1>;    // OFFSET4_EN
            using OFFSET4_CH = Field<26, 5>;    // OFFSET4_CH
            using OFFSET4 = Field<0, 12>;    // OFFSET4
        };

        // injected data register 1
        struct JDR1 : public RegisterReadOnly<0x50040080> {
            using JDATA1 = Field<0, 16>;    // JDATA1
        };

        // injected data register 2
        struct JDR2 : public RegisterReadOnly<0x50040084> {
            using JDATA2 = Field<0, 16>;    // JDATA2
        };

        // injected data register 3
        struct JDR3 : public RegisterReadOnly<0x50040088> {
            using JDATA3 = Field<0, 16>;    // JDATA3
        };

        // injected data register 4
        struct JDR4 : public RegisterReadOnly<0x5004008c> {
            using JDATA4 = Field<0, 16>;    // JDATA4
        };

        // Analog Watchdog 2 Configuration Register
        struct AWD2CR : public Register<0x500400a0> {
            using AWD2CH = Field<1, 18>;    // AWD2CH
        };

        // Analog Watchdog 3 Configuration Register
        struct AWD3CR : public Register<0x500400a4> {
            using AWD3CH = Field<1, 18>;    // AWD3CH
        };

        // Differential Mode Selection Register 2
        struct DIFSEL : public Register<0x500400b0> {
            using DIFSEL_1_15 = Field<1, 15>;    // Differential mode for channels 15 to 1
            using DIFSEL_16_18 = Field<16, 3>;    // Differential mode for channels 18 to 16
        };

        // Calibration Factors
        struct CALFACT : public Register<0x500400b4> {
            using CALFACT_D = Field<16, 7>;    // CALFACT_D
            using CALFACT_S = Field<0, 7>;    // CALFACT_S
        };

    };

    // General-purpose I/Os
    struct GPIOA {
        // GPIO port mode register
        struct MODER : public Register<0x48000000> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x48000004> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x48000008> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4800000c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x48000010> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x48000014> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x48000018> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4800001c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x48000020> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x48000024> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

    };

    // General-purpose I/Os
    struct GPIOB {
        // GPIO port mode register
        struct MODER : public Register<0x48000400> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x48000404> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x48000408> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4800040c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x48000410> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x48000414> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x48000418> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4800041c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x48000420> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x48000424> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

    };

    // General-purpose I/Os
    struct GPIOC {
        // GPIO port mode register
        struct MODER : public Register<0x48000800> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x48000804> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x48000808> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4800080c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x48000810> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x48000814> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x48000818> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4800081c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x48000820> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x48000824> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

    };

    // General-purpose I/Os
    struct GPIOD {
        // GPIO port mode register
        struct MODER : public Register<0x48000c00> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x48000c04> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x48000c08> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x48000c0c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x48000c10> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x48000c14> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x48000c18> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x48000c1c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x48000c20> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x48000c24> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

    };

    // General-purpose I/Os
    struct GPIOE {
        // GPIO port mode register
        struct MODER : public Register<0x48001000> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x48001004> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x48001008> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4800100c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x48001010> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x48001014> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x48001018> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4800101c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x48001020> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x48001024> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

    };

    // General-purpose I/Os
    struct GPIOH {
        // GPIO port mode register
        struct MODER : public Register<0x48001c00> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x48001c04> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x48001c08> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x48001c0c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x48001c10> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x48001c14> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x48001c18> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x48001c1c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x48001c20> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x48001c24> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

    };

    // Serial audio interface
    struct SAI1 {
        // BConfiguration register 1
        struct BCR1 : public Register<0x40015424> {
            using MCJDIV = Field<20, 4>;    // Master clock divider
            using NODIV = Field<19, 1>;    // No divider
            using DMAEN = Field<17, 1>;    // DMA enable
            using SAIBEN = Field<16, 1>;    // Audio block B enable
            using OutDri = Field<13, 1>;    // Output drive
            using MONO = Field<12, 1>;    // Mono mode
            using SYNCEN = Field<10, 2>;    // Synchronization enable
            using CKSTR = Field<9, 1>;    // Clock strobing edge
            using LSBFIRST = Field<8, 1>;    // Least significant bit first
            using DS = Field<5, 3>;    // Data size
            using PRTCFG = Field<2, 2>;    // Protocol configuration
            using MODE = Field<0, 2>;    // Audio block mode
        };

        // BConfiguration register 2
        struct BCR2 : public Register<0x40015428> {
            using COMP = Field<14, 2>;    // Companding mode
            using CPL = Field<13, 1>;    // Complement bit
            using MUTECN = Field<7, 6>;    // Mute counter
            using MUTEVAL = Field<6, 1>;    // Mute value
            using MUTE = Field<5, 1>;    // Mute
            using TRIS = Field<4, 1>;    // Tristate management on data line
            using FFLUS = Field<3, 1>;    // FIFO flush
            using FTH = Field<0, 3>;    // FIFO threshold
        };

        // BFRCR
        struct BFRCR : public Register<0x4001542c> {
            using FSOFF = Field<18, 1>;    // Frame synchronization offset
            using FSPOL = Field<17, 1>;    // Frame synchronization polarity
            using FSDEF = Field<16, 1>;    // Frame synchronization definition
            using FSALL = Field<8, 7>;    // Frame synchronization active level length
            using FRL = Field<0, 8>;    // Frame length
        };

        // BSlot register
        struct BSLOTR : public Register<0x40015430> {
            using SLOTEN = Field<16, 16>;    // Slot enable
            using NBSLOT = Field<8, 4>;    // Number of slots in an audio frame
            using SLOTSZ = Field<6, 2>;    // Slot size
            using FBOFF = Field<0, 5>;    // First bit offset
        };

        // BInterrupt mask register2
        struct BIM : public Register<0x40015434> {
            using LFSDETIE = Field<6, 1>;    // Late frame synchronization detection interrupt enable
            using AFSDETIE = Field<5, 1>;    // Anticipated frame synchronization detection interrupt enable
            using CNRDYIE = Field<4, 1>;    // Codec not ready interrupt enable
            using FREQIE = Field<3, 1>;    // FIFO request interrupt enable
            using WCKCFG = Field<2, 1>;    // Wrong clock configuration interrupt enable
            using MUTEDET = Field<1, 1>;    // Mute detection interrupt enable
            using OVRUDRIE = Field<0, 1>;    // Overrun/underrun interrupt enable
        };

        // BStatus register
        struct BSR : public RegisterReadOnly<0x40015438> {
            using FLVL = Field<16, 3>;    // FIFO level threshold
            using LFSDET = Field<6, 1>;    // Late frame synchronization detection
            using AFSDET = Field<5, 1>;    // Anticipated frame synchronization detection
            using CNRDY = Field<4, 1>;    // Codec not ready
            using FREQ = Field<3, 1>;    // FIFO request
            using WCKCFG = Field<2, 1>;    // Wrong clock configuration flag
            using MUTEDET = Field<1, 1>;    // Mute detection
            using OVRUDR = Field<0, 1>;    // Overrun / underrun
        };

        // BClear flag register
        struct BCLRFR : public RegisterWriteOnly<0x4001543c> {
            using LFSDET = Field<6, 1>;    // Clear late frame synchronization detection flag
            using CAFSDET = Field<5, 1>;    // Clear anticipated frame synchronization detection flag
            using CNRDY = Field<4, 1>;    // Clear codec not ready flag
            using WCKCFG = Field<2, 1>;    // Clear wrong clock configuration flag
            using MUTEDET = Field<1, 1>;    // Mute detection flag
            using OVRUDR = Field<0, 1>;    // Clear overrun / underrun
        };

        // BData register
        struct BDR : public Register<0x40015440> {
            using DATA = Field<0, 32>;    // Data
        };

        // AConfiguration register 1
        struct ACR1 : public Register<0x40015404> {
            using MCJDIV = Field<20, 4>;    // Master clock divider
            using NODIV = Field<19, 1>;    // No divider
            using DMAEN = Field<17, 1>;    // DMA enable
            using SAIAEN = Field<16, 1>;    // Audio block A enable
            using OutDri = Field<13, 1>;    // Output drive
            using MONO = Field<12, 1>;    // Mono mode
            using SYNCEN = Field<10, 2>;    // Synchronization enable
            using CKSTR = Field<9, 1>;    // Clock strobing edge
            using LSBFIRST = Field<8, 1>;    // Least significant bit first
            using DS = Field<5, 3>;    // Data size
            using PRTCFG = Field<2, 2>;    // Protocol configuration
            using MODE = Field<0, 2>;    // Audio block mode
        };

        // AConfiguration register 2
        struct ACR2 : public Register<0x40015408> {
            using COMP = Field<14, 2>;    // Companding mode
            using CPL = Field<13, 1>;    // Complement bit
            using MUTECN = Field<7, 6>;    // Mute counter
            using MUTEVAL = Field<6, 1>;    // Mute value
            using MUTE = Field<5, 1>;    // Mute
            using TRIS = Field<4, 1>;    // Tristate management on data line
            using FFLUS = Field<3, 1>;    // FIFO flush
            using FTH = Field<0, 3>;    // FIFO threshold
        };

        // AFRCR
        struct AFRCR : public Register<0x4001540c> {
            using FSOFF = Field<18, 1>;    // Frame synchronization offset
            using FSPOL = Field<17, 1>;    // Frame synchronization polarity
            using FSDEF = Field<16, 1>;    // Frame synchronization definition
            using FSALL = Field<8, 7>;    // Frame synchronization active level length
            using FRL = Field<0, 8>;    // Frame length
        };

        // ASlot register
        struct ASLOTR : public Register<0x40015410> {
            using SLOTEN = Field<16, 16>;    // Slot enable
            using NBSLOT = Field<8, 4>;    // Number of slots in an audio frame
            using SLOTSZ = Field<6, 2>;    // Slot size
            using FBOFF = Field<0, 5>;    // First bit offset
        };

        // AInterrupt mask register2
        struct AIM : public Register<0x40015414> {
            using LFSDET = Field<6, 1>;    // Late frame synchronization detection interrupt enable
            using AFSDETIE = Field<5, 1>;    // Anticipated frame synchronization detection interrupt enable
            using CNRDYIE = Field<4, 1>;    // Codec not ready interrupt enable
            using FREQIE = Field<3, 1>;    // FIFO request interrupt enable
            using WCKCFG = Field<2, 1>;    // Wrong clock configuration interrupt enable
            using MUTEDET = Field<1, 1>;    // Mute detection interrupt enable
            using OVRUDRIE = Field<0, 1>;    // Overrun/underrun interrupt enable
        };

        // AStatus register
        struct ASR : public Register<0x40015418> {
            using FLVL = Field<16, 3>;    // FIFO level threshold
            using LFSDET = Field<6, 1>;    // Late frame synchronization detection
            using AFSDET = Field<5, 1>;    // Anticipated frame synchronization detection
            using CNRDY = Field<4, 1>;    // Codec not ready
            using FREQ = Field<3, 1>;    // FIFO request
            using WCKCFG = Field<2, 1>;    // Wrong clock configuration flag. This bit is read only
            using MUTEDET = Field<1, 1>;    // Mute detection
            using OVRUDR = Field<0, 1>;    // Overrun / underrun
        };

        // AClear flag register
        struct ACLRFR : public Register<0x4001541c> {
            using LFSDET = Field<6, 1>;    // Clear late frame synchronization detection flag
            using CAFSDET = Field<5, 1>;    // Clear anticipated frame synchronization detection flag
            using CNRDY = Field<4, 1>;    // Clear codec not ready flag
            using WCKCFG = Field<2, 1>;    // Clear wrong clock configuration flag
            using MUTEDET = Field<1, 1>;    // Mute detection flag
            using OVRUDR = Field<0, 1>;    // Clear overrun / underrun
        };

        // AData register
        struct ADR : public Register<0x40015420> {
            using DATA = Field<0, 32>;    // Data
        };

    };

    // General-purpose-timers
    struct TIM2 {
        // control register 1
        struct CR1 : public Register<0x40000000> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40000004> {
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40000008> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000000c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using COMDE = Field<13, 1>;    // COM DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40000010> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40000014> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40000018> {
            using OC2CE = Field<15, 1>;    // Output compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output compare 2 mode
            using OC2PE = Field<11, 1>;    // Output compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output compare 1 mode
            using OC1PE = Field<3, 1>;    // Output compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40000018> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PSC = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x4000001c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x4000001c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40000020> {
            using CC4NP = Field<15, 1>;    // Capture/Compare 4 output Polarity
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40000024> {
            using CNT_H = Field<16, 16>;    // High counter value (TIM2 only)
            using CNT_L = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40000028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000002c> {
            using ARR_H = Field<16, 16>;    // High Auto-reload value (TIM2 only)
            using ARR_L = Field<0, 16>;    // Low Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40000034> {
            using CCR1_H = Field<16, 16>;    // High Capture/Compare 1 value (TIM2 only)
            using CCR1_L = Field<0, 16>;    // Low Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40000038> {
            using CCR2_H = Field<16, 16>;    // High Capture/Compare 2 value (TIM2 only)
            using CCR2_L = Field<0, 16>;    // Low Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x4000003c> {
            using CCR3_H = Field<16, 16>;    // High Capture/Compare value (TIM2 only)
            using CCR3_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40000040> {
            using CCR4_H = Field<16, 16>;    // High Capture/Compare value (TIM2 only)
            using CCR4_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40000048> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4000004c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

        // TIM2 option register
        struct OR : public Register<0x40000050> {
            using ETR_RMP = Field<0, 3>;    // Timer2 ETR remap
            using TI4_RMP = Field<3, 2>;    // Internal trigger
        };

    };

    // General-purpose-timers
    struct TIM3 {
        // control register 1
        struct CR1 : public Register<0x40000400> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40000404> {
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40000408> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000040c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using COMDE = Field<13, 1>;    // COM DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40000410> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40000414> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40000418> {
            using OC2CE = Field<15, 1>;    // Output compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output compare 2 mode
            using OC2PE = Field<11, 1>;    // Output compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output compare 1 mode
            using OC1PE = Field<3, 1>;    // Output compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40000418> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PSC = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x4000041c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x4000041c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40000420> {
            using CC4NP = Field<15, 1>;    // Capture/Compare 4 output Polarity
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40000424> {
            using CNT_H = Field<16, 16>;    // High counter value (TIM2 only)
            using CNT_L = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40000428> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000042c> {
            using ARR_H = Field<16, 16>;    // High Auto-reload value (TIM2 only)
            using ARR_L = Field<0, 16>;    // Low Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40000434> {
            using CCR1_H = Field<16, 16>;    // High Capture/Compare 1 value (TIM2 only)
            using CCR1_L = Field<0, 16>;    // Low Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40000438> {
            using CCR2_H = Field<16, 16>;    // High Capture/Compare 2 value (TIM2 only)
            using CCR2_L = Field<0, 16>;    // Low Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x4000043c> {
            using CCR3_H = Field<16, 16>;    // High Capture/Compare value (TIM2 only)
            using CCR3_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40000440> {
            using CCR4_H = Field<16, 16>;    // High Capture/Compare value (TIM2 only)
            using CCR4_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40000448> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4000044c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

        // TIM2 option register
        struct OR : public Register<0x40000450> {
            using ETR_RMP = Field<0, 3>;    // Timer2 ETR remap
            using TI4_RMP = Field<3, 2>;    // Internal trigger
        };

    };

    // General purpose timers
    struct TIM15 {
        // control register 1
        struct CR1 : public Register<0x40014000> {
            using CEN = Field<0, 1>;    // Counter enable
            using UDIS = Field<1, 1>;    // Update disable
            using URS = Field<2, 1>;    // Update request source
            using OPM = Field<3, 1>;    // One-pulse mode
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CKD = Field<8, 2>;    // Clock division
            using UIFREMAP = Field<11, 1>;    // UIF status bit remapping
        };

        // control register 2
        struct CR2 : public Register<0x40014004> {
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001400c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using COMDE = Field<13, 1>;    // COM DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40014010> {
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40014014> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40014018> {
            using OC1M_2 = Field<16, 1>;    // Output Compare 1 mode
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40014018> {
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40014020> {
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40014024> {
            using Field = Field<0, 16>;    // counter value
            using UIFCPY = Field<31, 1>;    // UIF Copy
        };

        // prescaler
        struct PSC : public Register<0x40014028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001402c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // repetition counter register
        struct RCR : public Register<0x40014030> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40014034> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40014044> {
            using DTG = Field<0, 8>;    // Dead-time generator setup
            using LOCK = Field<8, 2>;    // Lock configuration
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using BKE = Field<12, 1>;    // Break enable
            using BKP = Field<13, 1>;    // Break polarity
            using AOE = Field<14, 1>;    // Automatic output enable
            using MOE = Field<15, 1>;    // Main output enable
            using BKF = Field<16, 4>;    // Break filter
        };

        // DMA control register
        struct DCR : public Register<0x40014048> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4001404c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General purpose timers
    struct TIM16 {
        // control register 1
        struct CR1 : public Register<0x40014400> {
            using CEN = Field<0, 1>;    // Counter enable
            using UDIS = Field<1, 1>;    // Update disable
            using URS = Field<2, 1>;    // Update request source
            using OPM = Field<3, 1>;    // One-pulse mode
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CKD = Field<8, 2>;    // Clock division
            using UIFREMAP = Field<11, 1>;    // UIF status bit remapping
        };

        // control register 2
        struct CR2 : public Register<0x40014404> {
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001440c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using COMDE = Field<13, 1>;    // COM DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40014410> {
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40014414> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40014418> {
            using OC1M_2 = Field<16, 1>;    // Output Compare 1 mode
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40014418> {
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40014420> {
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40014424> {
            using Field = Field<0, 16>;    // counter value
            using UIFCPY = Field<31, 1>;    // UIF Copy
        };

        // prescaler
        struct PSC : public Register<0x40014428> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001442c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // repetition counter register
        struct RCR : public Register<0x40014430> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40014434> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40014444> {
            using DTG = Field<0, 8>;    // Dead-time generator setup
            using LOCK = Field<8, 2>;    // Lock configuration
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using BKE = Field<12, 1>;    // Break enable
            using BKP = Field<13, 1>;    // Break polarity
            using AOE = Field<14, 1>;    // Automatic output enable
            using MOE = Field<15, 1>;    // Main output enable
            using BKF = Field<16, 4>;    // Break filter
        };

        // DMA control register
        struct DCR : public Register<0x40014448> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4001444c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

        // TIM16 option register 1
        struct OR1 : public Register<0x40014450> {
            using TI1_RMP = Field<0, 2>;    // Input capture 1 remap
        };

        // TIM17 option register 1
        struct OR2 : public Register<0x40014460> {
            using BKINE = Field<0, 1>;    // BRK BKIN input enable
            using BKCMP1E = Field<1, 1>;    // BRK COMP1 enable
            using BKCMP2E = Field<2, 1>;    // BRK COMP2 enable
            using BKDFBK1E = Field<8, 1>;    // BRK DFSDM_BREAK1 enable
            using BKINP = Field<9, 1>;    // BRK BKIN input polarity
            using BKCMP1P = Field<10, 1>;    // BRK COMP1 input polarity
            using BKCMP2P = Field<11, 1>;    // BRK COMP2 input polarit
        };

    };

    // Advanced-timers
    struct TIM1 {
        // control register 1
        struct CR1 : public Register<0x40012c00> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40012c04> {
            using OIS4 = Field<14, 1>;    // Output Idle state 4
            using OIS3N = Field<13, 1>;    // Output Idle state 3
            using OIS3 = Field<12, 1>;    // Output Idle state 3
            using OIS2N = Field<11, 1>;    // Output Idle state 2
            using OIS2 = Field<10, 1>;    // Output Idle state 2
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // slave mode control register
        struct SMCR : public Register<0x40012c08> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x40012c0c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using COMDE = Field<13, 1>;    // COM DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
        };

        // status register
        struct SR : public Register<0x40012c10> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40012c14> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40012c18> {
            using OC2CE = Field<15, 1>;    // Output Compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output Compare 2 mode
            using OC2PE = Field<11, 1>;    // Output Compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output Compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output Compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40012c18> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PCS = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using ICPCS = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x40012c1c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x40012c1c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40012c20> {
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3NE = Field<10, 1>;    // Capture/Compare 3 complementary output enable
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2NE = Field<6, 1>;    // Capture/Compare 2 complementary output enable
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40012c24> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40012c28> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x40012c2c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // repetition counter register
        struct RCR : public Register<0x40012c30> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40012c34> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40012c38> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x40012c3c> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40012c40> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40012c44> {
            using MOE = Field<15, 1>;    // Main output enable
            using AOE = Field<14, 1>;    // Automatic output enable
            using BKP = Field<13, 1>;    // Break polarity
            using BKE = Field<12, 1>;    // Break enable
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using LOCK = Field<8, 2>;    // Lock configuration
            using DTG = Field<0, 8>;    // Dead-time generator setup
        };

        // DMA control register
        struct DCR : public Register<0x40012c48> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x40012c4c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

        // DMA address for full transfer
        struct OR1 : public Register<0x40012c50> {
            using ETR_ADC1_RMP = Field<0, 2>;    // External trigger remap on ADC1 analog watchdog
            using ETR_ADC3_RMP = Field<2, 2>;    // External trigger remap on ADC3 analog watchdog
            using TI1_RMP = Field<4, 1>;    // Input Capture 1 remap
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR3_Output : public Register<0x40012c54> {
            using OC6M_bit3 = Field<24, 1>;    // Output Compare 6 mode bit 3
            using OC5M_bit3 = Field<16, 3>;    // Output Compare 5 mode bit 3
            using OC6CE = Field<15, 1>;    // Output compare 6 clear enable
            using OC6M = Field<12, 3>;    // Output compare 6 mode
            using OC6PE = Field<11, 1>;    // Output compare 6 preload enable
            using OC6FE = Field<10, 1>;    // Output compare 6 fast enable
            using OC5CE = Field<7, 1>;    // Output compare 5 clear enable
            using OC5M = Field<4, 3>;    // Output compare 5 mode
            using OC5PE = Field<3, 1>;    // Output compare 5 preload enable
            using OC5FE = Field<2, 1>;    // Output compare 5 fast enable
        };

        // capture/compare register 4
        struct CCR5 : public Register<0x40012c58> {
            using Field = Field<0, 16>;    // Capture/Compare value
            using GC5C1 = Field<29, 1>;    // Group Channel 5 and Channel 1
            using GC5C2 = Field<30, 1>;    // Group Channel 5 and Channel 2
            using GC5C3 = Field<31, 1>;    // Group Channel 5 and Channel 3
        };

        // capture/compare register 4
        struct CCR6 : public Register<0x40012c5c> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // DMA address for full transfer
        struct OR2 : public Register<0x40012c60> {
            using BKINE = Field<0, 1>;    // BRK BKIN input enable
            using BKCMP1E = Field<1, 1>;    // BRK COMP1 enable
            using BKCMP2E = Field<2, 1>;    // BRK COMP2 enable
            using BKDFBK0E = Field<8, 1>;    // BRK DFSDM_BREAK0 enable
            using BKINP = Field<9, 1>;    // BRK BKIN input polarity
            using BKCMP1P = Field<10, 1>;    // BRK COMP1 input polarity
            using BKCMP2P = Field<11, 1>;    // BRK COMP2 input polarity
            using ETRSEL = Field<14, 3>;    // ETR source selection
        };

        // DMA address for full transfer
        struct OR3 : public Register<0x40012c64> {
            using BK2INE = Field<0, 1>;    // BRK2 BKIN input enable
            using BK2CMP1E = Field<1, 1>;    // BRK2 COMP1 enable
            using BK2CMP2E = Field<2, 1>;    // BRK2 COMP2 enable
            using BK2DFBK0E = Field<8, 1>;    // BRK2 DFSDM_BREAK0 enable
            using BK2INP = Field<9, 1>;    // BRK2 BKIN input polarity
            using BK2CMP1P = Field<10, 1>;    // BRK2 COMP1 input polarity
            using BK2CMP2P = Field<11, 1>;    // BRK2 COMP2 input polarity
        };

    };

    // Basic-timers
    struct TIM6 {
        // control register 1
        struct CR1 : public Register<0x40001000> {
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40001004> {
            using MMS = Field<4, 3>;    // Master mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000100c> {
            using UDE = Field<8, 1>;    // Update DMA request enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40001010> {
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40001014> {
            using UG = Field<0, 1>;    // Update generation
        };

        // counter
        struct CNT : public Register<0x40001024> {
            using Field = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40001028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000102c> {
            using Field = Field<0, 16>;    // Low Auto-reload value
        };

    };

    // Basic-timers
    struct TIM7 {
        // control register 1
        struct CR1 : public Register<0x40001400> {
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40001404> {
            using MMS = Field<4, 3>;    // Master mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000140c> {
            using UDE = Field<8, 1>;    // Update DMA request enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40001410> {
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40001414> {
            using UG = Field<0, 1>;    // Update generation
        };

        // counter
        struct CNT : public Register<0x40001424> {
            using Field = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40001428> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000142c> {
            using Field = Field<0, 16>;    // Low Auto-reload value
        };

    };

    // Low power timer
    struct LPTIM1 {
        // Interrupt and Status Register
        struct ISR : public RegisterReadOnly<0x40007c00> {
            using DOWN = Field<6, 1>;    // Counter direction change up to down
            using UP = Field<5, 1>;    // Counter direction change down to up
            using ARROK = Field<4, 1>;    // Autoreload register update OK
            using CMPOK = Field<3, 1>;    // Compare register update OK
            using EXTTRIG = Field<2, 1>;    // External trigger edge event
            using ARRM = Field<1, 1>;    // Autoreload match
            using CMPM = Field<0, 1>;    // Compare match
        };

        // Interrupt Clear Register
        struct ICR : public RegisterWriteOnly<0x40007c04> {
            using DOWNCF = Field<6, 1>;    // Direction change to down Clear Flag
            using UPCF = Field<5, 1>;    // Direction change to UP Clear Flag
            using ARROKCF = Field<4, 1>;    // Autoreload register update OK Clear Flag
            using CMPOKCF = Field<3, 1>;    // Compare register update OK Clear Flag
            using EXTTRIGCF = Field<2, 1>;    // External trigger valid edge Clear Flag
            using ARRMCF = Field<1, 1>;    // Autoreload match Clear Flag
            using CMPMCF = Field<0, 1>;    // compare match Clear Flag
        };

        // Interrupt Enable Register
        struct IER : public Register<0x40007c08> {
            using DOWNIE = Field<6, 1>;    // Direction change to down Interrupt Enable
            using UPIE = Field<5, 1>;    // Direction change to UP Interrupt Enable
            using ARROKIE = Field<4, 1>;    // Autoreload register update OK Interrupt Enable
            using CMPOKIE = Field<3, 1>;    // Compare register update OK Interrupt Enable
            using EXTTRIGIE = Field<2, 1>;    // External trigger valid edge Interrupt Enable
            using ARRMIE = Field<1, 1>;    // Autoreload match Interrupt Enable
            using CMPMIE = Field<0, 1>;    // Compare match Interrupt Enable
        };

        // Configuration Register
        struct CFGR : public Register<0x40007c0c> {
            using ENC = Field<24, 1>;    // Encoder mode enable
            using COUNTMODE = Field<23, 1>;    // counter mode enabled
            using PRELOAD = Field<22, 1>;    // Registers update mode
            using WAVPOL = Field<21, 1>;    // Waveform shape polarity
            using WAVE = Field<20, 1>;    // Waveform shape
            using TIMOUT = Field<19, 1>;    // Timeout enable
            using TRIGEN = Field<17, 2>;    // Trigger enable and polarity
            using TRIGSEL = Field<13, 3>;    // Trigger selector
            using PRESC = Field<9, 3>;    // Clock prescaler
            using TRGFLT = Field<6, 2>;    // Configurable digital filter for trigger
            using CKFLT = Field<3, 2>;    // Configurable digital filter for external clock
            using CKPOL = Field<1, 2>;    // Clock Polarity
            using CKSEL = Field<0, 1>;    // Clock selector
        };

        // Control Register
        struct CR : public Register<0x40007c10> {
            using CNTSTRT = Field<2, 1>;    // Timer start in continuous mode
            using SNGSTRT = Field<1, 1>;    // LPTIM start in single mode
            using ENABLE = Field<0, 1>;    // LPTIM Enable
        };

        // Compare Register
        struct CMP : public Register<0x40007c14> {
            using Field = Field<0, 16>;    // Compare value
        };

        // Autoreload Register
        struct ARR : public Register<0x40007c18> {
            using Field = Field<0, 16>;    // Auto reload value
        };

        // Counter Register
        struct CNT : public RegisterReadOnly<0x40007c1c> {
            using Field = Field<0, 16>;    // Counter value
        };

    };

    // Low power timer
    struct LPTIM2 {
        // Interrupt and Status Register
        struct ISR : public RegisterReadOnly<0x40009400> {
            using DOWN = Field<6, 1>;    // Counter direction change up to down
            using UP = Field<5, 1>;    // Counter direction change down to up
            using ARROK = Field<4, 1>;    // Autoreload register update OK
            using CMPOK = Field<3, 1>;    // Compare register update OK
            using EXTTRIG = Field<2, 1>;    // External trigger edge event
            using ARRM = Field<1, 1>;    // Autoreload match
            using CMPM = Field<0, 1>;    // Compare match
        };

        // Interrupt Clear Register
        struct ICR : public RegisterWriteOnly<0x40009404> {
            using DOWNCF = Field<6, 1>;    // Direction change to down Clear Flag
            using UPCF = Field<5, 1>;    // Direction change to UP Clear Flag
            using ARROKCF = Field<4, 1>;    // Autoreload register update OK Clear Flag
            using CMPOKCF = Field<3, 1>;    // Compare register update OK Clear Flag
            using EXTTRIGCF = Field<2, 1>;    // External trigger valid edge Clear Flag
            using ARRMCF = Field<1, 1>;    // Autoreload match Clear Flag
            using CMPMCF = Field<0, 1>;    // compare match Clear Flag
        };

        // Interrupt Enable Register
        struct IER : public Register<0x40009408> {
            using DOWNIE = Field<6, 1>;    // Direction change to down Interrupt Enable
            using UPIE = Field<5, 1>;    // Direction change to UP Interrupt Enable
            using ARROKIE = Field<4, 1>;    // Autoreload register update OK Interrupt Enable
            using CMPOKIE = Field<3, 1>;    // Compare register update OK Interrupt Enable
            using EXTTRIGIE = Field<2, 1>;    // External trigger valid edge Interrupt Enable
            using ARRMIE = Field<1, 1>;    // Autoreload match Interrupt Enable
            using CMPMIE = Field<0, 1>;    // Compare match Interrupt Enable
        };

        // Configuration Register
        struct CFGR : public Register<0x4000940c> {
            using ENC = Field<24, 1>;    // Encoder mode enable
            using COUNTMODE = Field<23, 1>;    // counter mode enabled
            using PRELOAD = Field<22, 1>;    // Registers update mode
            using WAVPOL = Field<21, 1>;    // Waveform shape polarity
            using WAVE = Field<20, 1>;    // Waveform shape
            using TIMOUT = Field<19, 1>;    // Timeout enable
            using TRIGEN = Field<17, 2>;    // Trigger enable and polarity
            using TRIGSEL = Field<13, 3>;    // Trigger selector
            using PRESC = Field<9, 3>;    // Clock prescaler
            using TRGFLT = Field<6, 2>;    // Configurable digital filter for trigger
            using CKFLT = Field<3, 2>;    // Configurable digital filter for external clock
            using CKPOL = Field<1, 2>;    // Clock Polarity
            using CKSEL = Field<0, 1>;    // Clock selector
        };

        // Control Register
        struct CR : public Register<0x40009410> {
            using CNTSTRT = Field<2, 1>;    // Timer start in continuous mode
            using SNGSTRT = Field<1, 1>;    // LPTIM start in single mode
            using ENABLE = Field<0, 1>;    // LPTIM Enable
        };

        // Compare Register
        struct CMP : public Register<0x40009414> {
            using Field = Field<0, 16>;    // Compare value
        };

        // Autoreload Register
        struct ARR : public Register<0x40009418> {
            using Field = Field<0, 16>;    // Auto reload value
        };

        // Counter Register
        struct CNT : public RegisterReadOnly<0x4000941c> {
            using Field = Field<0, 16>;    // Counter value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART1 {
        // Control register 1
        struct CR1 : public Register<0x40013800> {
            using M1 = Field<28, 1>;    // Word length
            using EOBIE = Field<27, 1>;    // End of Block interrupt enable
            using RTOIE = Field<26, 1>;    // Receiver timeout interrupt enable
            using DEAT4 = Field<25, 1>;    // Driver Enable assertion time
            using DEAT3 = Field<24, 1>;    // DEAT3
            using DEAT2 = Field<23, 1>;    // DEAT2
            using DEAT1 = Field<22, 1>;    // DEAT1
            using DEAT0 = Field<21, 1>;    // DEAT0
            using DEDT4 = Field<20, 1>;    // Driver Enable de-assertion time
            using DEDT3 = Field<19, 1>;    // DEDT3
            using DEDT2 = Field<18, 1>;    // DEDT2
            using DEDT1 = Field<17, 1>;    // DEDT1
            using DEDT0 = Field<16, 1>;    // DEDT0
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using MME = Field<13, 1>;    // Mute mode enable
            using M0 = Field<12, 1>;    // Word length
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using PCE = Field<10, 1>;    // Parity control enable
            using PS = Field<9, 1>;    // Parity selection
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using TE = Field<3, 1>;    // Transmitter enable
            using RE = Field<2, 1>;    // Receiver enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using UE = Field<0, 1>;    // USART enable
        };

        // Control register 2
        struct CR2 : public Register<0x40013804> {
            using ADD4_7 = Field<28, 4>;    // Address of the USART node
            using ADD0_3 = Field<24, 4>;    // Address of the USART node
            using RTOEN = Field<23, 1>;    // Receiver timeout enable
            using ABRMOD1 = Field<22, 1>;    // Auto baud rate mode
            using ABRMOD0 = Field<21, 1>;    // ABRMOD0
            using ABREN = Field<20, 1>;    // Auto baud rate enable
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using TAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // LIN break detection length
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40013808> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using SCARCNT = Field<17, 3>;    // Smartcard auto-retry count
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // Ir low-power
            using IREN = Field<1, 1>;    // Ir mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x4001380c> {
            using DIV_Mantissa = Field<4, 12>;    // DIV_Mantissa
            using DIV_Fraction = Field<0, 4>;    // DIV_Fraction
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40013810> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

        // Receiver timeout register
        struct RTOR : public Register<0x40013814> {
            using BLEN = Field<24, 8>;    // Block Length
            using RTO = Field<0, 24>;    // Receiver timeout value
        };

        // Request register
        struct RQR : public RegisterWriteOnly<0x40013818> {
            using TXFRQ = Field<4, 1>;    // Transmit data flush request
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
            using ABRRQ = Field<0, 1>;    // Auto baud rate request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x4001381c> {
            using REACK = Field<22, 1>;    // REACK
            using TEACK = Field<21, 1>;    // TEACK
            using WUF = Field<20, 1>;    // WUF
            using RWU = Field<19, 1>;    // RWU
            using SBKF = Field<18, 1>;    // SBKF
            using CMF = Field<17, 1>;    // CMF
            using BUSY = Field<16, 1>;    // BUSY
            using ABRF = Field<15, 1>;    // ABRF
            using ABRE = Field<14, 1>;    // ABRE
            using EOBF = Field<12, 1>;    // EOBF
            using RTOF = Field<11, 1>;    // RTOF
            using CTS = Field<10, 1>;    // CTS
            using CTSIF = Field<9, 1>;    // CTSIF
            using LBDF = Field<8, 1>;    // LBDF
            using TXE = Field<7, 1>;    // TXE
            using TC = Field<6, 1>;    // TC
            using RXNE = Field<5, 1>;    // RXNE
            using IDLE = Field<4, 1>;    // IDLE
            using ORE = Field<3, 1>;    // ORE
            using NF = Field<2, 1>;    // NF
            using FE = Field<1, 1>;    // FE
            using PE = Field<0, 1>;    // PE
        };

        // Interrupt flag clear register
        struct ICR : public RegisterWriteOnly<0x40013820> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using EOBCF = Field<12, 1>;    // End of block clear flag
            using RTOCF = Field<11, 1>;    // Receiver timeout clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using LBDCF = Field<8, 1>;    // LIN break detection clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40013824> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40013828> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART2 {
        // Control register 1
        struct CR1 : public Register<0x40004400> {
            using M1 = Field<28, 1>;    // Word length
            using EOBIE = Field<27, 1>;    // End of Block interrupt enable
            using RTOIE = Field<26, 1>;    // Receiver timeout interrupt enable
            using DEAT4 = Field<25, 1>;    // Driver Enable assertion time
            using DEAT3 = Field<24, 1>;    // DEAT3
            using DEAT2 = Field<23, 1>;    // DEAT2
            using DEAT1 = Field<22, 1>;    // DEAT1
            using DEAT0 = Field<21, 1>;    // DEAT0
            using DEDT4 = Field<20, 1>;    // Driver Enable de-assertion time
            using DEDT3 = Field<19, 1>;    // DEDT3
            using DEDT2 = Field<18, 1>;    // DEDT2
            using DEDT1 = Field<17, 1>;    // DEDT1
            using DEDT0 = Field<16, 1>;    // DEDT0
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using MME = Field<13, 1>;    // Mute mode enable
            using M0 = Field<12, 1>;    // Word length
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using PCE = Field<10, 1>;    // Parity control enable
            using PS = Field<9, 1>;    // Parity selection
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using TE = Field<3, 1>;    // Transmitter enable
            using RE = Field<2, 1>;    // Receiver enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using UE = Field<0, 1>;    // USART enable
        };

        // Control register 2
        struct CR2 : public Register<0x40004404> {
            using ADD4_7 = Field<28, 4>;    // Address of the USART node
            using ADD0_3 = Field<24, 4>;    // Address of the USART node
            using RTOEN = Field<23, 1>;    // Receiver timeout enable
            using ABRMOD1 = Field<22, 1>;    // Auto baud rate mode
            using ABRMOD0 = Field<21, 1>;    // ABRMOD0
            using ABREN = Field<20, 1>;    // Auto baud rate enable
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using TAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // LIN break detection length
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40004408> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using SCARCNT = Field<17, 3>;    // Smartcard auto-retry count
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // Ir low-power
            using IREN = Field<1, 1>;    // Ir mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x4000440c> {
            using DIV_Mantissa = Field<4, 12>;    // DIV_Mantissa
            using DIV_Fraction = Field<0, 4>;    // DIV_Fraction
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40004410> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

        // Receiver timeout register
        struct RTOR : public Register<0x40004414> {
            using BLEN = Field<24, 8>;    // Block Length
            using RTO = Field<0, 24>;    // Receiver timeout value
        };

        // Request register
        struct RQR : public RegisterWriteOnly<0x40004418> {
            using TXFRQ = Field<4, 1>;    // Transmit data flush request
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
            using ABRRQ = Field<0, 1>;    // Auto baud rate request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x4000441c> {
            using REACK = Field<22, 1>;    // REACK
            using TEACK = Field<21, 1>;    // TEACK
            using WUF = Field<20, 1>;    // WUF
            using RWU = Field<19, 1>;    // RWU
            using SBKF = Field<18, 1>;    // SBKF
            using CMF = Field<17, 1>;    // CMF
            using BUSY = Field<16, 1>;    // BUSY
            using ABRF = Field<15, 1>;    // ABRF
            using ABRE = Field<14, 1>;    // ABRE
            using EOBF = Field<12, 1>;    // EOBF
            using RTOF = Field<11, 1>;    // RTOF
            using CTS = Field<10, 1>;    // CTS
            using CTSIF = Field<9, 1>;    // CTSIF
            using LBDF = Field<8, 1>;    // LBDF
            using TXE = Field<7, 1>;    // TXE
            using TC = Field<6, 1>;    // TC
            using RXNE = Field<5, 1>;    // RXNE
            using IDLE = Field<4, 1>;    // IDLE
            using ORE = Field<3, 1>;    // ORE
            using NF = Field<2, 1>;    // NF
            using FE = Field<1, 1>;    // FE
            using PE = Field<0, 1>;    // PE
        };

        // Interrupt flag clear register
        struct ICR : public RegisterWriteOnly<0x40004420> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using EOBCF = Field<12, 1>;    // End of block clear flag
            using RTOCF = Field<11, 1>;    // Receiver timeout clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using LBDCF = Field<8, 1>;    // LIN break detection clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40004424> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40004428> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct UART4 {
        // Control register 1
        struct CR1 : public Register<0x40004c00> {
            using M1 = Field<28, 1>;    // Word length
            using EOBIE = Field<27, 1>;    // End of Block interrupt enable
            using RTOIE = Field<26, 1>;    // Receiver timeout interrupt enable
            using DEAT4 = Field<25, 1>;    // Driver Enable assertion time
            using DEAT3 = Field<24, 1>;    // DEAT3
            using DEAT2 = Field<23, 1>;    // DEAT2
            using DEAT1 = Field<22, 1>;    // DEAT1
            using DEAT0 = Field<21, 1>;    // DEAT0
            using DEDT4 = Field<20, 1>;    // Driver Enable de-assertion time
            using DEDT3 = Field<19, 1>;    // DEDT3
            using DEDT2 = Field<18, 1>;    // DEDT2
            using DEDT1 = Field<17, 1>;    // DEDT1
            using DEDT0 = Field<16, 1>;    // DEDT0
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using MME = Field<13, 1>;    // Mute mode enable
            using M0 = Field<12, 1>;    // Word length
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using PCE = Field<10, 1>;    // Parity control enable
            using PS = Field<9, 1>;    // Parity selection
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using TE = Field<3, 1>;    // Transmitter enable
            using RE = Field<2, 1>;    // Receiver enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using UE = Field<0, 1>;    // USART enable
        };

        // Control register 2
        struct CR2 : public Register<0x40004c04> {
            using ADD4_7 = Field<28, 4>;    // Address of the USART node
            using ADD0_3 = Field<24, 4>;    // Address of the USART node
            using RTOEN = Field<23, 1>;    // Receiver timeout enable
            using ABRMOD1 = Field<22, 1>;    // Auto baud rate mode
            using ABRMOD0 = Field<21, 1>;    // ABRMOD0
            using ABREN = Field<20, 1>;    // Auto baud rate enable
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using TAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // LIN break detection length
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40004c08> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using SCARCNT = Field<17, 3>;    // Smartcard auto-retry count
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // Ir low-power
            using IREN = Field<1, 1>;    // Ir mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x40004c0c> {
            using DIV_Mantissa = Field<4, 12>;    // DIV_Mantissa
            using DIV_Fraction = Field<0, 4>;    // DIV_Fraction
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40004c10> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

        // Receiver timeout register
        struct RTOR : public Register<0x40004c14> {
            using BLEN = Field<24, 8>;    // Block Length
            using RTO = Field<0, 24>;    // Receiver timeout value
        };

        // Request register
        struct RQR : public RegisterWriteOnly<0x40004c18> {
            using TXFRQ = Field<4, 1>;    // Transmit data flush request
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
            using ABRRQ = Field<0, 1>;    // Auto baud rate request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x40004c1c> {
            using REACK = Field<22, 1>;    // REACK
            using TEACK = Field<21, 1>;    // TEACK
            using WUF = Field<20, 1>;    // WUF
            using RWU = Field<19, 1>;    // RWU
            using SBKF = Field<18, 1>;    // SBKF
            using CMF = Field<17, 1>;    // CMF
            using BUSY = Field<16, 1>;    // BUSY
            using ABRF = Field<15, 1>;    // ABRF
            using ABRE = Field<14, 1>;    // ABRE
            using EOBF = Field<12, 1>;    // EOBF
            using RTOF = Field<11, 1>;    // RTOF
            using CTS = Field<10, 1>;    // CTS
            using CTSIF = Field<9, 1>;    // CTSIF
            using LBDF = Field<8, 1>;    // LBDF
            using TXE = Field<7, 1>;    // TXE
            using TC = Field<6, 1>;    // TC
            using RXNE = Field<5, 1>;    // RXNE
            using IDLE = Field<4, 1>;    // IDLE
            using ORE = Field<3, 1>;    // ORE
            using NF = Field<2, 1>;    // NF
            using FE = Field<1, 1>;    // FE
            using PE = Field<0, 1>;    // PE
        };

        // Interrupt flag clear register
        struct ICR : public RegisterWriteOnly<0x40004c20> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using EOBCF = Field<12, 1>;    // End of block clear flag
            using RTOCF = Field<11, 1>;    // Receiver timeout clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using LBDCF = Field<8, 1>;    // LIN break detection clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40004c24> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40004c28> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART3 {
        // Control register 1
        struct CR1 : public Register<0x40004800> {
            using M1 = Field<28, 1>;    // Word length
            using EOBIE = Field<27, 1>;    // End of Block interrupt enable
            using RTOIE = Field<26, 1>;    // Receiver timeout interrupt enable
            using DEAT4 = Field<25, 1>;    // Driver Enable assertion time
            using DEAT3 = Field<24, 1>;    // DEAT3
            using DEAT2 = Field<23, 1>;    // DEAT2
            using DEAT1 = Field<22, 1>;    // DEAT1
            using DEAT0 = Field<21, 1>;    // DEAT0
            using DEDT4 = Field<20, 1>;    // Driver Enable de-assertion time
            using DEDT3 = Field<19, 1>;    // DEDT3
            using DEDT2 = Field<18, 1>;    // DEDT2
            using DEDT1 = Field<17, 1>;    // DEDT1
            using DEDT0 = Field<16, 1>;    // DEDT0
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using MME = Field<13, 1>;    // Mute mode enable
            using M0 = Field<12, 1>;    // Word length
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using PCE = Field<10, 1>;    // Parity control enable
            using PS = Field<9, 1>;    // Parity selection
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using TE = Field<3, 1>;    // Transmitter enable
            using RE = Field<2, 1>;    // Receiver enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using UE = Field<0, 1>;    // USART enable
        };

        // Control register 2
        struct CR2 : public Register<0x40004804> {
            using ADD4_7 = Field<28, 4>;    // Address of the USART node
            using ADD0_3 = Field<24, 4>;    // Address of the USART node
            using RTOEN = Field<23, 1>;    // Receiver timeout enable
            using ABRMOD1 = Field<22, 1>;    // Auto baud rate mode
            using ABRMOD0 = Field<21, 1>;    // ABRMOD0
            using ABREN = Field<20, 1>;    // Auto baud rate enable
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using TAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // LIN break detection length
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40004808> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using SCARCNT = Field<17, 3>;    // Smartcard auto-retry count
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // Ir low-power
            using IREN = Field<1, 1>;    // Ir mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
            using UCESM = Field<23, 1>;    // USART Clock Enable in Stop mode
            using TCBGTIE = Field<24, 1>;    // Transmission complete before guard time interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x4000480c> {
            using Field = Field<0, 12>;    // USARTDIV
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40004810> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

        // Receiver timeout register
        struct RTOR : public Register<0x40004814> {
            using BLEN = Field<24, 8>;    // Block Length
            using RTO = Field<0, 24>;    // Receiver timeout value
        };

        // Request register
        struct RQR : public RegisterWriteOnly<0x40004818> {
            using TXFRQ = Field<4, 1>;    // Transmit data flush request
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
            using ABRRQ = Field<0, 1>;    // Auto baud rate request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x4000481c> {
            using REACK = Field<22, 1>;    // REACK
            using TEACK = Field<21, 1>;    // TEACK
            using WUF = Field<20, 1>;    // WUF
            using RWU = Field<19, 1>;    // RWU
            using SBKF = Field<18, 1>;    // SBKF
            using CMF = Field<17, 1>;    // CMF
            using BUSY = Field<16, 1>;    // BUSY
            using ABRF = Field<15, 1>;    // ABRF
            using ABRE = Field<14, 1>;    // ABRE
            using EOBF = Field<12, 1>;    // EOBF
            using RTOF = Field<11, 1>;    // RTOF
            using CTS = Field<10, 1>;    // CTS
            using CTSIF = Field<9, 1>;    // CTSIF
            using LBDF = Field<8, 1>;    // LBDF
            using TXE = Field<7, 1>;    // TXE
            using TC = Field<6, 1>;    // TC
            using RXNE = Field<5, 1>;    // RXNE
            using IDLE = Field<4, 1>;    // IDLE
            using ORE = Field<3, 1>;    // ORE
            using NF = Field<2, 1>;    // NF
            using FE = Field<1, 1>;    // FE
            using PE = Field<0, 1>;    // PE
            using TCBGT = Field<25, 1>;    // Transmission complete before guard time completion
        };

        // Interrupt flag clear register
        struct ICR : public RegisterWriteOnly<0x40004820> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using EOBCF = Field<12, 1>;    // End of block clear flag
            using RTOCF = Field<11, 1>;    // Receiver timeout clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using LBDCF = Field<8, 1>;    // LIN break detection clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40004824> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40004828> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct LPUART1 {
        // Control register 1
        struct CR1 : public Register<0x40008000> {
            using M1 = Field<28, 1>;    // Word length
            using DEAT4 = Field<25, 1>;    // Driver Enable assertion time
            using DEAT3 = Field<24, 1>;    // DEAT3
            using DEAT2 = Field<23, 1>;    // DEAT2
            using DEAT1 = Field<22, 1>;    // DEAT1
            using DEAT0 = Field<21, 1>;    // DEAT0
            using DEDT4 = Field<20, 1>;    // Driver Enable de-assertion time
            using DEDT3 = Field<19, 1>;    // DEDT3
            using DEDT2 = Field<18, 1>;    // DEDT2
            using DEDT1 = Field<17, 1>;    // DEDT1
            using DEDT0 = Field<16, 1>;    // DEDT0
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using MME = Field<13, 1>;    // Mute mode enable
            using M0 = Field<12, 1>;    // Word length
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using PCE = Field<10, 1>;    // Parity control enable
            using PS = Field<9, 1>;    // Parity selection
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using TE = Field<3, 1>;    // Transmitter enable
            using RE = Field<2, 1>;    // Receiver enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using UE = Field<0, 1>;    // USART enable
        };

        // Control register 2
        struct CR2 : public Register<0x40008004> {
            using ADD4_7 = Field<28, 4>;    // Address of the USART node
            using ADD0_3 = Field<24, 4>;    // Address of the USART node
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using TAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40008008> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x4000800c> {
            using Field = Field<0, 20>;    // BRR
        };

        // Request register
        struct RQR : public RegisterWriteOnly<0x40008018> {
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x4000801c> {
            using REACK = Field<22, 1>;    // REACK
            using TEACK = Field<21, 1>;    // TEACK
            using WUF = Field<20, 1>;    // WUF
            using RWU = Field<19, 1>;    // RWU
            using SBKF = Field<18, 1>;    // SBKF
            using CMF = Field<17, 1>;    // CMF
            using BUSY = Field<16, 1>;    // BUSY
            using CTS = Field<10, 1>;    // CTS
            using CTSIF = Field<9, 1>;    // CTSIF
            using TXE = Field<7, 1>;    // TXE
            using TC = Field<6, 1>;    // TC
            using RXNE = Field<5, 1>;    // RXNE
            using IDLE = Field<4, 1>;    // IDLE
            using ORE = Field<3, 1>;    // ORE
            using NF = Field<2, 1>;    // NF
            using FE = Field<1, 1>;    // FE
            using PE = Field<0, 1>;    // PE
        };

        // Interrupt flag clear register
        struct ICR : public RegisterWriteOnly<0x40008020> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40008024> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40008028> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Serial peripheral interface/Inter-IC sound
    struct SPI1 {
        // control register 1
        struct CR1 : public Register<0x40013000> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40013004> {
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using SSOE = Field<2, 1>;    // SS output enable
            using NSSP = Field<3, 1>;    // NSS pulse management
            using FRF = Field<4, 1>;    // Frame format
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using DS = Field<8, 4>;    // Data size
            using FRXTH = Field<12, 1>;    // FIFO reception threshold
            using LDMA_RX = Field<13, 1>;    // Last DMA transfer for reception
            using LDMA_TX = Field<14, 1>;    // Last DMA transfer for transmission
        };

        // status register
        struct SR : public Register<0x40013008> {
            using RXNE = Field<0, 1>;    // Receive buffer not empty
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using CRCERR = Field<4, 1>;    // CRC error flag
            using MODF = Field<5, 1>;    // Mode fault
            using OVR = Field<6, 1>;    // Overrun flag
            using BSY = Field<7, 1>;    // Busy flag
            using TIFRFE = Field<8, 1>;    // TI frame format error
            using FRLVL = Field<9, 2>;    // FIFO reception level
            using FTLVL = Field<11, 2>;    // FIFO transmission level
        };

        // data register
        struct DR : public Register<0x4001300c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40013010> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public RegisterReadOnly<0x40013014> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public RegisterReadOnly<0x40013018> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

    };

    // Serial peripheral interface/Inter-IC sound
    struct SPI3 {
        // control register 1
        struct CR1 : public Register<0x40003c00> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40003c04> {
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using SSOE = Field<2, 1>;    // SS output enable
            using NSSP = Field<3, 1>;    // NSS pulse management
            using FRF = Field<4, 1>;    // Frame format
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using DS = Field<8, 4>;    // Data size
            using FRXTH = Field<12, 1>;    // FIFO reception threshold
            using LDMA_RX = Field<13, 1>;    // Last DMA transfer for reception
            using LDMA_TX = Field<14, 1>;    // Last DMA transfer for transmission
        };

        // status register
        struct SR : public Register<0x40003c08> {
            using RXNE = Field<0, 1>;    // Receive buffer not empty
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using CRCERR = Field<4, 1>;    // CRC error flag
            using MODF = Field<5, 1>;    // Mode fault
            using OVR = Field<6, 1>;    // Overrun flag
            using BSY = Field<7, 1>;    // Busy flag
            using TIFRFE = Field<8, 1>;    // TI frame format error
            using FRLVL = Field<9, 2>;    // FIFO reception level
            using FTLVL = Field<11, 2>;    // FIFO transmission level
        };

        // data register
        struct DR : public Register<0x40003c0c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40003c10> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public RegisterReadOnly<0x40003c14> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public RegisterReadOnly<0x40003c18> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

    };

    // Serial peripheral interface/Inter-IC sound
    struct SPI2 {
        // control register 1
        struct CR1 : public Register<0x40003800> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40003804> {
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using SSOE = Field<2, 1>;    // SS output enable
            using NSSP = Field<3, 1>;    // NSS pulse management
            using FRF = Field<4, 1>;    // Frame format
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using DS = Field<8, 4>;    // Data size
            using FRXTH = Field<12, 1>;    // FIFO reception threshold
            using LDMA_RX = Field<13, 1>;    // Last DMA transfer for reception
            using LDMA_TX = Field<14, 1>;    // Last DMA transfer for transmission
        };

        // status register
        struct SR : public Register<0x40003808> {
            using RXNE = Field<0, 1>;    // Receive buffer not empty
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using CRCERR = Field<4, 1>;    // CRC error flag
            using MODF = Field<5, 1>;    // Mode fault
            using OVR = Field<6, 1>;    // Overrun flag
            using BSY = Field<7, 1>;    // Busy flag
            using TIFRFE = Field<8, 1>;    // TI frame format error
            using FRLVL = Field<9, 2>;    // FIFO reception level
            using FTLVL = Field<11, 2>;    // FIFO transmission level
        };

        // data register
        struct DR : public Register<0x4000380c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40003810> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public RegisterReadOnly<0x40003814> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public RegisterReadOnly<0x40003818> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

    };

    // Secure digital input/output interface
    struct SDMMC {
        // power control register
        struct POWER : public Register<0x40012800> {
            using PWRCTRL = Field<0, 2>;    // PWRCTRL
        };

        // SDI clock control register
        struct CLKCR : public Register<0x40012804> {
            using HWFC_EN = Field<14, 1>;    // HW Flow Control enable
            using NEGEDGE = Field<13, 1>;    // SDIO_CK dephasing selection bit
            using WIDBUS = Field<11, 2>;    // Wide bus mode enable bit
            using BYPASS = Field<10, 1>;    // Clock divider bypass enable bit
            using PWRSAV = Field<9, 1>;    // Power saving configuration bit
            using CLKEN = Field<8, 1>;    // Clock enable bit
            using CLKDIV = Field<0, 8>;    // Clock divide factor
        };

        // argument register
        struct ARG : public Register<0x40012808> {
            using CMDARG = Field<0, 32>;    // Command argument
        };

        // command register
        struct CMD : public Register<0x4001280c> {
            using CE_ATACMD = Field<14, 1>;    // CE-ATA command
            using nIEN = Field<13, 1>;    // not Interrupt Enable
            using ENCMDcompl = Field<12, 1>;    // Enable CMD completion
            using SDIOSuspend = Field<11, 1>;    // SD I/O suspend command
            using CPSMEN = Field<10, 1>;    // Command path state machine (CPSM) Enable bit
            using WAITPEND = Field<9, 1>;    // CPSM Waits for ends of data transfer (CmdPend internal signal)
            using WAITINT = Field<8, 1>;    // CPSM waits for interrupt request
            using WAITRESP = Field<6, 2>;    // Wait for response bits
            using CMDINDEX = Field<0, 6>;    // Command index
        };

        // command response register
        struct RESPCMD : public RegisterReadOnly<0x40012810> {
            using Field = Field<0, 6>;    // Response command index
        };

        // response 1..4 register
        struct RESP1 : public RegisterReadOnly<0x40012814> {
            using CARDSTATUS1 = Field<0, 32>;    // see Table 132
        };

        // response 1..4 register
        struct RESP2 : public RegisterReadOnly<0x40012818> {
            using CARDSTATUS2 = Field<0, 32>;    // see Table 132
        };

        // response 1..4 register
        struct RESP3 : public RegisterReadOnly<0x4001281c> {
            using CARDSTATUS3 = Field<0, 32>;    // see Table 132
        };

        // response 1..4 register
        struct RESP4 : public RegisterReadOnly<0x40012820> {
            using CARDSTATUS4 = Field<0, 32>;    // see Table 132
        };

        // data timer register
        struct DTIMER : public Register<0x40012824> {
            using DATATIME = Field<0, 32>;    // Data timeout period
        };

        // data length register
        struct DLEN : public Register<0x40012828> {
            using DATALENGTH = Field<0, 25>;    // Data length value
        };

        // data control register
        struct DCTRL : public Register<0x4001282c> {
            using SDIOEN = Field<11, 1>;    // SD I/O enable functions
            using RWMOD = Field<10, 1>;    // Read wait mode
            using RWSTOP = Field<9, 1>;    // Read wait stop
            using RWSTART = Field<8, 1>;    // Read wait start
            using DBLOCKSIZE = Field<4, 4>;    // Data block size
            using DMAEN = Field<3, 1>;    // DMA enable bit
            using DTMODE = Field<2, 1>;    // Data transfer mode selection 1: Stream or SDIO multibyte data transfer
            using DTDIR = Field<1, 1>;    // Data transfer direction selection
            using DTEN = Field<0, 1>;    // DTEN
        };

        // data counter register
        struct DCOUNT : public RegisterReadOnly<0x40012830> {
            using DATACOUNT = Field<0, 25>;    // Data count value
        };

        // status register
        struct STA : public RegisterReadOnly<0x40012834> {
            using CEATAEND = Field<23, 1>;    // CE-ATA command completion signal received for CMD61
            using SDIOIT = Field<22, 1>;    // SDIO interrupt received
            using RXDAVL = Field<21, 1>;    // Data available in receive FIFO
            using TXDAVL = Field<20, 1>;    // Data available in transmit FIFO
            using RXFIFOE = Field<19, 1>;    // Receive FIFO empty
            using TXFIFOE = Field<18, 1>;    // Transmit FIFO empty
            using RXFIFOF = Field<17, 1>;    // Receive FIFO full
            using TXFIFOF = Field<16, 1>;    // Transmit FIFO full
            using RXFIFOHF = Field<15, 1>;    // Receive FIFO half full: there are at least 8 words in the FIFO
            using TXFIFOHE = Field<14, 1>;    // Transmit FIFO half empty: at least 8 words can be written into the FIFO
            using RXACT = Field<13, 1>;    // Data receive in progress
            using TXACT = Field<12, 1>;    // Data transmit in progress
            using CMDACT = Field<11, 1>;    // Command transfer in progress
            using DBCKEND = Field<10, 1>;    // Data block sent/received (CRC check passed)
            using STBITERR = Field<9, 1>;    // Start bit not detected on all data signals in wide bus mode
            using DATAEND = Field<8, 1>;    // Data end (data counter, SDIDCOUNT, is zero)
            using CMDSENT = Field<7, 1>;    // Command sent (no response required)
            using CMDREND = Field<6, 1>;    // Command response received (CRC check passed)
            using RXOVERR = Field<5, 1>;    // Received FIFO overrun error
            using TXUNDERR = Field<4, 1>;    // Transmit FIFO underrun error
            using DTIMEOUT = Field<3, 1>;    // Data timeout
            using CTIMEOUT = Field<2, 1>;    // Command response timeout
            using DCRCFAIL = Field<1, 1>;    // Data block sent/received (CRC check failed)
            using CCRCFAIL = Field<0, 1>;    // Command response received (CRC check failed)
        };

        // interrupt clear register
        struct ICR : public Register<0x40012838> {
            using CEATAENDC = Field<23, 1>;    // CEATAEND flag clear bit
            using SDIOITC = Field<22, 1>;    // SDIOIT flag clear bit
            using DBCKENDC = Field<10, 1>;    // DBCKEND flag clear bit
            using STBITERRC = Field<9, 1>;    // STBITERR flag clear bit
            using DATAENDC = Field<8, 1>;    // DATAEND flag clear bit
            using CMDSENTC = Field<7, 1>;    // CMDSENT flag clear bit
            using CMDRENDC = Field<6, 1>;    // CMDREND flag clear bit
            using RXOVERRC = Field<5, 1>;    // RXOVERR flag clear bit
            using TXUNDERRC = Field<4, 1>;    // TXUNDERR flag clear bit
            using DTIMEOUTC = Field<3, 1>;    // DTIMEOUT flag clear bit
            using CTIMEOUTC = Field<2, 1>;    // CTIMEOUT flag clear bit
            using DCRCFAILC = Field<1, 1>;    // DCRCFAIL flag clear bit
            using CCRCFAILC = Field<0, 1>;    // CCRCFAIL flag clear bit
        };

        // mask register
        struct MASK : public Register<0x4001283c> {
            using CEATAENDIE = Field<23, 1>;    // CE-ATA command completion signal received interrupt enable
            using SDIOITIE = Field<22, 1>;    // SDIO mode interrupt received interrupt enable
            using RXDAVLIE = Field<21, 1>;    // Data available in Rx FIFO interrupt enable
            using TXDAVLIE = Field<20, 1>;    // Data available in Tx FIFO interrupt enable
            using RXFIFOEIE = Field<19, 1>;    // Rx FIFO empty interrupt enable
            using TXFIFOEIE = Field<18, 1>;    // Tx FIFO empty interrupt enable
            using RXFIFOFIE = Field<17, 1>;    // Rx FIFO full interrupt enable
            using TXFIFOFIE = Field<16, 1>;    // Tx FIFO full interrupt enable
            using RXFIFOHFIE = Field<15, 1>;    // Rx FIFO half full interrupt enable
            using TXFIFOHEIE = Field<14, 1>;    // Tx FIFO half empty interrupt enable
            using RXACTIE = Field<13, 1>;    // Data receive acting interrupt enable
            using TXACTIE = Field<12, 1>;    // Data transmit acting interrupt enable
            using CMDACTIE = Field<11, 1>;    // Command acting interrupt enable
            using DBCKENDIE = Field<10, 1>;    // Data block end interrupt enable
            using STBITERRIE = Field<9, 1>;    // Start bit error interrupt enable
            using DATAENDIE = Field<8, 1>;    // Data end interrupt enable
            using CMDSENTIE = Field<7, 1>;    // Command sent interrupt enable
            using CMDRENDIE = Field<6, 1>;    // Command response received interrupt enable
            using RXOVERRIE = Field<5, 1>;    // Rx FIFO overrun error interrupt enable
            using TXUNDERRIE = Field<4, 1>;    // Tx FIFO underrun error interrupt enable
            using DTIMEOUTIE = Field<3, 1>;    // Data timeout interrupt enable
            using CTIMEOUTIE = Field<2, 1>;    // Command timeout interrupt enable
            using DCRCFAILIE = Field<1, 1>;    // Data CRC fail interrupt enable
            using CCRCFAILIE = Field<0, 1>;    // Command CRC fail interrupt enable
        };

        // FIFO counter register
        struct FIFOCNT : public RegisterReadOnly<0x40012848> {
            using FIFOCOUNT = Field<0, 24>;    // Remaining number of words to be written to or read from the FIFO
        };

        // data FIFO register
        struct FIFO : public Register<0x40012880> {
            using FIFOData = Field<0, 32>;    // Receive and transmit FIFO data
        };

    };

    // External interrupt/event controller
    struct EXTI {
        // Interrupt mask register
        struct IMR1 : public Register<0x40010400> {
            using MR0 = Field<0, 1>;    // Interrupt Mask on line 0
            using MR1 = Field<1, 1>;    // Interrupt Mask on line 1
            using MR2 = Field<2, 1>;    // Interrupt Mask on line 2
            using MR3 = Field<3, 1>;    // Interrupt Mask on line 3
            using MR4 = Field<4, 1>;    // Interrupt Mask on line 4
            using MR5 = Field<5, 1>;    // Interrupt Mask on line 5
            using MR6 = Field<6, 1>;    // Interrupt Mask on line 6
            using MR7 = Field<7, 1>;    // Interrupt Mask on line 7
            using MR8 = Field<8, 1>;    // Interrupt Mask on line 8
            using MR9 = Field<9, 1>;    // Interrupt Mask on line 9
            using MR10 = Field<10, 1>;    // Interrupt Mask on line 10
            using MR11 = Field<11, 1>;    // Interrupt Mask on line 11
            using MR12 = Field<12, 1>;    // Interrupt Mask on line 12
            using MR13 = Field<13, 1>;    // Interrupt Mask on line 13
            using MR14 = Field<14, 1>;    // Interrupt Mask on line 14
            using MR15 = Field<15, 1>;    // Interrupt Mask on line 15
            using MR16 = Field<16, 1>;    // Interrupt Mask on line 16
            using MR17 = Field<17, 1>;    // Interrupt Mask on line 17
            using MR18 = Field<18, 1>;    // Interrupt Mask on line 18
            using MR19 = Field<19, 1>;    // Interrupt Mask on line 19
            using MR20 = Field<20, 1>;    // Interrupt Mask on line 20
            using MR21 = Field<21, 1>;    // Interrupt Mask on line 21
            using MR22 = Field<22, 1>;    // Interrupt Mask on line 22
            using MR23 = Field<23, 1>;    // Interrupt Mask on line 23
            using MR24 = Field<24, 1>;    // Interrupt Mask on line 24
            using MR25 = Field<25, 1>;    // Interrupt Mask on line 25
            using MR26 = Field<26, 1>;    // Interrupt Mask on line 26
            using MR27 = Field<27, 1>;    // Interrupt Mask on line 27
            using MR28 = Field<28, 1>;    // Interrupt Mask on line 28
            using MR29 = Field<29, 1>;    // Interrupt Mask on line 29
            using MR30 = Field<30, 1>;    // Interrupt Mask on line 30
            using MR31 = Field<31, 1>;    // Interrupt Mask on line 31
        };

        // Event mask register
        struct EMR1 : public Register<0x40010404> {
            using MR0 = Field<0, 1>;    // Event Mask on line 0
            using MR1 = Field<1, 1>;    // Event Mask on line 1
            using MR2 = Field<2, 1>;    // Event Mask on line 2
            using MR3 = Field<3, 1>;    // Event Mask on line 3
            using MR4 = Field<4, 1>;    // Event Mask on line 4
            using MR5 = Field<5, 1>;    // Event Mask on line 5
            using MR6 = Field<6, 1>;    // Event Mask on line 6
            using MR7 = Field<7, 1>;    // Event Mask on line 7
            using MR8 = Field<8, 1>;    // Event Mask on line 8
            using MR9 = Field<9, 1>;    // Event Mask on line 9
            using MR10 = Field<10, 1>;    // Event Mask on line 10
            using MR11 = Field<11, 1>;    // Event Mask on line 11
            using MR12 = Field<12, 1>;    // Event Mask on line 12
            using MR13 = Field<13, 1>;    // Event Mask on line 13
            using MR14 = Field<14, 1>;    // Event Mask on line 14
            using MR15 = Field<15, 1>;    // Event Mask on line 15
            using MR16 = Field<16, 1>;    // Event Mask on line 16
            using MR17 = Field<17, 1>;    // Event Mask on line 17
            using MR18 = Field<18, 1>;    // Event Mask on line 18
            using MR19 = Field<19, 1>;    // Event Mask on line 19
            using MR20 = Field<20, 1>;    // Event Mask on line 20
            using MR21 = Field<21, 1>;    // Event Mask on line 21
            using MR22 = Field<22, 1>;    // Event Mask on line 22
            using MR23 = Field<23, 1>;    // Event Mask on line 23
            using MR24 = Field<24, 1>;    // Event Mask on line 24
            using MR25 = Field<25, 1>;    // Event Mask on line 25
            using MR26 = Field<26, 1>;    // Event Mask on line 26
            using MR27 = Field<27, 1>;    // Event Mask on line 27
            using MR28 = Field<28, 1>;    // Event Mask on line 28
            using MR29 = Field<29, 1>;    // Event Mask on line 29
            using MR30 = Field<30, 1>;    // Event Mask on line 30
            using MR31 = Field<31, 1>;    // Event Mask on line 31
        };

        // Rising Trigger selection register
        struct RTSR1 : public Register<0x40010408> {
            using TR0 = Field<0, 1>;    // Rising trigger event configuration of line 0
            using TR1 = Field<1, 1>;    // Rising trigger event configuration of line 1
            using TR2 = Field<2, 1>;    // Rising trigger event configuration of line 2
            using TR3 = Field<3, 1>;    // Rising trigger event configuration of line 3
            using TR4 = Field<4, 1>;    // Rising trigger event configuration of line 4
            using TR5 = Field<5, 1>;    // Rising trigger event configuration of line 5
            using TR6 = Field<6, 1>;    // Rising trigger event configuration of line 6
            using TR7 = Field<7, 1>;    // Rising trigger event configuration of line 7
            using TR8 = Field<8, 1>;    // Rising trigger event configuration of line 8
            using TR9 = Field<9, 1>;    // Rising trigger event configuration of line 9
            using TR10 = Field<10, 1>;    // Rising trigger event configuration of line 10
            using TR11 = Field<11, 1>;    // Rising trigger event configuration of line 11
            using TR12 = Field<12, 1>;    // Rising trigger event configuration of line 12
            using TR13 = Field<13, 1>;    // Rising trigger event configuration of line 13
            using TR14 = Field<14, 1>;    // Rising trigger event configuration of line 14
            using TR15 = Field<15, 1>;    // Rising trigger event configuration of line 15
            using TR16 = Field<16, 1>;    // Rising trigger event configuration of line 16
            using TR18 = Field<18, 1>;    // Rising trigger event configuration of line 18
            using TR19 = Field<19, 1>;    // Rising trigger event configuration of line 19
            using TR20 = Field<20, 1>;    // Rising trigger event configuration of line 20
            using TR21 = Field<21, 1>;    // Rising trigger event configuration of line 21
            using TR22 = Field<22, 1>;    // Rising trigger event configuration of line 22
        };

        // Falling Trigger selection register
        struct FTSR1 : public Register<0x4001040c> {
            using TR0 = Field<0, 1>;    // Falling trigger event configuration of line 0
            using TR1 = Field<1, 1>;    // Falling trigger event configuration of line 1
            using TR2 = Field<2, 1>;    // Falling trigger event configuration of line 2
            using TR3 = Field<3, 1>;    // Falling trigger event configuration of line 3
            using TR4 = Field<4, 1>;    // Falling trigger event configuration of line 4
            using TR5 = Field<5, 1>;    // Falling trigger event configuration of line 5
            using TR6 = Field<6, 1>;    // Falling trigger event configuration of line 6
            using TR7 = Field<7, 1>;    // Falling trigger event configuration of line 7
            using TR8 = Field<8, 1>;    // Falling trigger event configuration of line 8
            using TR9 = Field<9, 1>;    // Falling trigger event configuration of line 9
            using TR10 = Field<10, 1>;    // Falling trigger event configuration of line 10
            using TR11 = Field<11, 1>;    // Falling trigger event configuration of line 11
            using TR12 = Field<12, 1>;    // Falling trigger event configuration of line 12
            using TR13 = Field<13, 1>;    // Falling trigger event configuration of line 13
            using TR14 = Field<14, 1>;    // Falling trigger event configuration of line 14
            using TR15 = Field<15, 1>;    // Falling trigger event configuration of line 15
            using TR16 = Field<16, 1>;    // Falling trigger event configuration of line 16
            using TR18 = Field<18, 1>;    // Falling trigger event configuration of line 18
            using TR19 = Field<19, 1>;    // Falling trigger event configuration of line 19
            using TR20 = Field<20, 1>;    // Falling trigger event configuration of line 20
            using TR21 = Field<21, 1>;    // Falling trigger event configuration of line 21
            using TR22 = Field<22, 1>;    // Falling trigger event configuration of line 22
        };

        // Software interrupt event register
        struct SWIER1 : public Register<0x40010410> {
            using SWIER0 = Field<0, 1>;    // Software Interrupt on line 0
            using Field = Field<1, 1>;    // Software Interrupt on line 1
            using SWIER2 = Field<2, 1>;    // Software Interrupt on line 2
            using SWIER3 = Field<3, 1>;    // Software Interrupt on line 3
            using SWIER4 = Field<4, 1>;    // Software Interrupt on line 4
            using SWIER5 = Field<5, 1>;    // Software Interrupt on line 5
            using SWIER6 = Field<6, 1>;    // Software Interrupt on line 6
            using SWIER7 = Field<7, 1>;    // Software Interrupt on line 7
            using SWIER8 = Field<8, 1>;    // Software Interrupt on line 8
            using SWIER9 = Field<9, 1>;    // Software Interrupt on line 9
            using SWIER10 = Field<10, 1>;    // Software Interrupt on line 10
            using SWIER11 = Field<11, 1>;    // Software Interrupt on line 11
            using SWIER12 = Field<12, 1>;    // Software Interrupt on line 12
            using SWIER13 = Field<13, 1>;    // Software Interrupt on line 13
            using SWIER14 = Field<14, 1>;    // Software Interrupt on line 14
            using SWIER15 = Field<15, 1>;    // Software Interrupt on line 15
            using SWIER16 = Field<16, 1>;    // Software Interrupt on line 16
            using SWIER18 = Field<18, 1>;    // Software Interrupt on line 18
            using SWIER19 = Field<19, 1>;    // Software Interrupt on line 19
            using SWIER20 = Field<20, 1>;    // Software Interrupt on line 20
            using SWIER21 = Field<21, 1>;    // Software Interrupt on line 21
            using SWIER22 = Field<22, 1>;    // Software Interrupt on line 22
        };

        // Pending register
        struct PR1 : public Register<0x40010414> {
            using PR0 = Field<0, 1>;    // Pending bit 0
            using Field = Field<1, 1>;    // Pending bit 1
            using PR2 = Field<2, 1>;    // Pending bit 2
            using PR3 = Field<3, 1>;    // Pending bit 3
            using PR4 = Field<4, 1>;    // Pending bit 4
            using PR5 = Field<5, 1>;    // Pending bit 5
            using PR6 = Field<6, 1>;    // Pending bit 6
            using PR7 = Field<7, 1>;    // Pending bit 7
            using PR8 = Field<8, 1>;    // Pending bit 8
            using PR9 = Field<9, 1>;    // Pending bit 9
            using PR10 = Field<10, 1>;    // Pending bit 10
            using PR11 = Field<11, 1>;    // Pending bit 11
            using PR12 = Field<12, 1>;    // Pending bit 12
            using PR13 = Field<13, 1>;    // Pending bit 13
            using PR14 = Field<14, 1>;    // Pending bit 14
            using PR15 = Field<15, 1>;    // Pending bit 15
            using PR16 = Field<16, 1>;    // Pending bit 16
            using PR18 = Field<18, 1>;    // Pending bit 18
            using PR19 = Field<19, 1>;    // Pending bit 19
            using PR20 = Field<20, 1>;    // Pending bit 20
            using PR21 = Field<21, 1>;    // Pending bit 21
            using PR22 = Field<22, 1>;    // Pending bit 22
        };

        // Interrupt mask register
        struct IMR2 : public Register<0x40010420> {
            using MR32 = Field<0, 1>;    // Interrupt Mask on external/internal line 32
            using MR33 = Field<1, 1>;    // Interrupt Mask on external/internal line 33
            using MR34 = Field<2, 1>;    // Interrupt Mask on external/internal line 34
            using MR35 = Field<3, 1>;    // Interrupt Mask on external/internal line 35
            using MR36 = Field<4, 1>;    // Interrupt Mask on external/internal line 36
            using MR37 = Field<5, 1>;    // Interrupt Mask on external/internal line 37
            using MR38 = Field<6, 1>;    // Interrupt Mask on external/internal line 38
            using MR39 = Field<7, 1>;    // Interrupt Mask on external/internal line 39
        };

        // Event mask register
        struct EMR2 : public Register<0x40010424> {
            using MR32 = Field<0, 1>;    // Event mask on external/internal line 32
            using MR33 = Field<1, 1>;    // Event mask on external/internal line 33
            using MR34 = Field<2, 1>;    // Event mask on external/internal line 34
            using MR35 = Field<3, 1>;    // Event mask on external/internal line 35
            using MR36 = Field<4, 1>;    // Event mask on external/internal line 36
            using MR37 = Field<5, 1>;    // Event mask on external/internal line 37
            using MR38 = Field<6, 1>;    // Event mask on external/internal line 38
            using MR39 = Field<7, 1>;    // Event mask on external/internal line 39
        };

        // Rising Trigger selection register
        struct RTSR2 : public Register<0x40010428> {
            using RT35 = Field<3, 1>;    // Rising trigger event configuration bit of line 35
            using RT36 = Field<4, 1>;    // Rising trigger event configuration bit of line 36
            using RT37 = Field<5, 1>;    // Rising trigger event configuration bit of line 37
            using RT38 = Field<6, 1>;    // Rising trigger event configuration bit of line 38
        };

        // Falling Trigger selection register
        struct FTSR2 : public Register<0x4001042c> {
            using FT35 = Field<3, 1>;    // Falling trigger event configuration bit of line 35
            using FT36 = Field<4, 1>;    // Falling trigger event configuration bit of line 36
            using FT37 = Field<5, 1>;    // Falling trigger event configuration bit of line 37
            using FT38 = Field<6, 1>;    // Falling trigger event configuration bit of line 38
        };

        // Software interrupt event register
        struct SWIER2 : public Register<0x40010430> {
            using SWI35 = Field<3, 1>;    // Software interrupt on line 35
            using SWI36 = Field<4, 1>;    // Software interrupt on line 36
            using SWI37 = Field<5, 1>;    // Software interrupt on line 37
            using SWI38 = Field<6, 1>;    // Software interrupt on line 38
        };

        // Pending register
        struct PR2 : public Register<0x40010434> {
            using PIF35 = Field<3, 1>;    // Pending interrupt flag on line 35
            using PIF36 = Field<4, 1>;    // Pending interrupt flag on line 36
            using PIF37 = Field<5, 1>;    // Pending interrupt flag on line 37
            using PIF38 = Field<6, 1>;    // Pending interrupt flag on line 38
        };

    };

    // Voltage reference buffer
    struct VREFBUF {
        // VREF control and status register
        struct CSR : public Register<0x40010030> {
            using ENVR = Field<0, 1>;    // Voltage reference buffer enable
            using HIZ = Field<1, 1>;    // High impedance mode
            using VRS = Field<2, 1>;    // Voltage reference scale
            using VRR = Field<3, 1>;    // Voltage reference buffer ready
        };

        // calibration control register
        struct CCR : public Register<0x40010034> {
            using TRIM = Field<0, 6>;    // Trimming code
        };

    };

    // Controller area network
    struct CAN1 {
        // master control register
        struct MCR : public Register<0x40006400> {
            using DBF = Field<16, 1>;    // DBF
            using RESET = Field<15, 1>;    // RESET
            using TTCM = Field<7, 1>;    // TTCM
            using ABOM = Field<6, 1>;    // ABOM
            using AWUM = Field<5, 1>;    // AWUM
            using NART = Field<4, 1>;    // NART
            using RFLM = Field<3, 1>;    // RFLM
            using TXFP = Field<2, 1>;    // TXFP
            using SLEEP = Field<1, 1>;    // SLEEP
            using INRQ = Field<0, 1>;    // INRQ
        };

        // master status register
        struct MSR : public Register<0x40006404> {
            using RX = Field<11, 1>;    // RX
            using SAMP = Field<10, 1>;    // SAMP
            using RXM = Field<9, 1>;    // RXM
            using TXM = Field<8, 1>;    // TXM
            using SLAKI = Field<4, 1>;    // SLAKI
            using WKUI = Field<3, 1>;    // WKUI
            using ERRI = Field<2, 1>;    // ERRI
            using SLAK = Field<1, 1>;    // SLAK
            using INAK = Field<0, 1>;    // INAK
        };

        // transmit status register
        struct TSR : public Register<0x40006408> {
            using LOW2 = Field<31, 1>;    // Lowest priority flag for mailbox 2
            using LOW1 = Field<30, 1>;    // Lowest priority flag for mailbox 1
            using LOW0 = Field<29, 1>;    // Lowest priority flag for mailbox 0
            using TME2 = Field<28, 1>;    // Lowest priority flag for mailbox 2
            using TME1 = Field<27, 1>;    // Lowest priority flag for mailbox 1
            using TME0 = Field<26, 1>;    // Lowest priority flag for mailbox 0
            using CODE = Field<24, 2>;    // CODE
            using ABRQ2 = Field<23, 1>;    // ABRQ2
            using TERR2 = Field<19, 1>;    // TERR2
            using ALST2 = Field<18, 1>;    // ALST2
            using TXOK2 = Field<17, 1>;    // TXOK2
            using RQCP2 = Field<16, 1>;    // RQCP2
            using ABRQ1 = Field<15, 1>;    // ABRQ1
            using TERR1 = Field<11, 1>;    // TERR1
            using ALST1 = Field<10, 1>;    // ALST1
            using TXOK1 = Field<9, 1>;    // TXOK1
            using RQCP1 = Field<8, 1>;    // RQCP1
            using ABRQ0 = Field<7, 1>;    // ABRQ0
            using TERR0 = Field<3, 1>;    // TERR0
            using ALST0 = Field<2, 1>;    // ALST0
            using TXOK0 = Field<1, 1>;    // TXOK0
            using RQCP0 = Field<0, 1>;    // RQCP0
        };

        // receive FIFO 0 register
        struct RF0R : public Register<0x4000640c> {
            using RFOM0 = Field<5, 1>;    // RFOM0
            using FOVR0 = Field<4, 1>;    // FOVR0
            using FULL0 = Field<3, 1>;    // FULL0
            using FMP0 = Field<0, 2>;    // FMP0
        };

        // receive FIFO 1 register
        struct RF1R : public Register<0x40006410> {
            using RFOM1 = Field<5, 1>;    // RFOM1
            using FOVR1 = Field<4, 1>;    // FOVR1
            using FULL1 = Field<3, 1>;    // FULL1
            using FMP1 = Field<0, 2>;    // FMP1
        };

        // interrupt enable register
        struct IER : public Register<0x40006414> {
            using SLKIE = Field<17, 1>;    // SLKIE
            using WKUIE = Field<16, 1>;    // WKUIE
            using ERRIE = Field<15, 1>;    // ERRIE
            using LECIE = Field<11, 1>;    // LECIE
            using BOFIE = Field<10, 1>;    // BOFIE
            using EPVIE = Field<9, 1>;    // EPVIE
            using EWGIE = Field<8, 1>;    // EWGIE
            using FOVIE1 = Field<6, 1>;    // FOVIE1
            using FFIE1 = Field<5, 1>;    // FFIE1
            using FMPIE1 = Field<4, 1>;    // FMPIE1
            using FOVIE0 = Field<3, 1>;    // FOVIE0
            using FFIE0 = Field<2, 1>;    // FFIE0
            using FMPIE0 = Field<1, 1>;    // FMPIE0
            using TMEIE = Field<0, 1>;    // TMEIE
        };

        // interrupt enable register
        struct ESR : public Register<0x40006418> {
            using REC = Field<24, 8>;    // REC
            using TEC = Field<16, 8>;    // TEC
            using LEC = Field<4, 3>;    // LEC
            using BOFF = Field<2, 1>;    // BOFF
            using EPVF = Field<1, 1>;    // EPVF
            using EWGF = Field<0, 1>;    // EWGF
        };

        // bit timing register
        struct BTR : public Register<0x4000641c> {
            using SILM = Field<31, 1>;    // SILM
            using LBKM = Field<30, 1>;    // LBKM
            using SJW = Field<24, 2>;    // SJW
            using TS2 = Field<20, 3>;    // TS2
            using TS1 = Field<16, 4>;    // TS1
            using BRP = Field<0, 10>;    // BRP
        };

        // TX mailbox identifier register
        struct TI0R : public Register<0x40006580> {
            using STID = Field<21, 11>;    // STID
            using EXID = Field<3, 18>;    // EXID
            using IDE = Field<2, 1>;    // IDE
            using RTR = Field<1, 1>;    // RTR
            using TXRQ = Field<0, 1>;    // TXRQ
        };

        // mailbox data length control and time stamp register
        struct TDT0R : public Register<0x40006584> {
            using TIME = Field<16, 16>;    // TIME
            using TGT = Field<8, 1>;    // TGT
            using DLC = Field<0, 4>;    // DLC
        };

        // mailbox data low register
        struct TDL0R : public Register<0x40006588> {
            using DATA3 = Field<24, 8>;    // DATA3
            using DATA2 = Field<16, 8>;    // DATA2
            using DATA1 = Field<8, 8>;    // DATA1
            using DATA0 = Field<0, 8>;    // DATA0
        };

        // mailbox data high register
        struct TDH0R : public Register<0x4000658c> {
            using DATA7 = Field<24, 8>;    // DATA7
            using DATA6 = Field<16, 8>;    // DATA6
            using DATA5 = Field<8, 8>;    // DATA5
            using DATA4 = Field<0, 8>;    // DATA4
        };

        // mailbox identifier register
        struct TI1R : public Register<0x40006590> {
            using STID = Field<21, 11>;    // STID
            using EXID = Field<3, 18>;    // EXID
            using IDE = Field<2, 1>;    // IDE
            using RTR = Field<1, 1>;    // RTR
            using TXRQ = Field<0, 1>;    // TXRQ
        };

        // mailbox data length control and time stamp register
        struct TDT1R : public Register<0x40006594> {
            using TIME = Field<16, 16>;    // TIME
            using TGT = Field<8, 1>;    // TGT
            using DLC = Field<0, 4>;    // DLC
        };

        // mailbox data low register
        struct TDL1R : public Register<0x40006598> {
            using DATA3 = Field<24, 8>;    // DATA3
            using DATA2 = Field<16, 8>;    // DATA2
            using DATA1 = Field<8, 8>;    // DATA1
            using DATA0 = Field<0, 8>;    // DATA0
        };

        // mailbox data high register
        struct TDH1R : public Register<0x4000659c> {
            using DATA7 = Field<24, 8>;    // DATA7
            using DATA6 = Field<16, 8>;    // DATA6
            using DATA5 = Field<8, 8>;    // DATA5
            using DATA4 = Field<0, 8>;    // DATA4
        };

        // mailbox identifier register
        struct TI2R : public Register<0x400065a0> {
            using STID = Field<21, 11>;    // STID
            using EXID = Field<3, 18>;    // EXID
            using IDE = Field<2, 1>;    // IDE
            using RTR = Field<1, 1>;    // RTR
            using TXRQ = Field<0, 1>;    // TXRQ
        };

        // mailbox data length control and time stamp register
        struct TDT2R : public Register<0x400065a4> {
            using TIME = Field<16, 16>;    // TIME
            using TGT = Field<8, 1>;    // TGT
            using DLC = Field<0, 4>;    // DLC
        };

        // mailbox data low register
        struct TDL2R : public Register<0x400065a8> {
            using DATA3 = Field<24, 8>;    // DATA3
            using DATA2 = Field<16, 8>;    // DATA2
            using DATA1 = Field<8, 8>;    // DATA1
            using DATA0 = Field<0, 8>;    // DATA0
        };

        // mailbox data high register
        struct TDH2R : public Register<0x400065ac> {
            using DATA7 = Field<24, 8>;    // DATA7
            using DATA6 = Field<16, 8>;    // DATA6
            using DATA5 = Field<8, 8>;    // DATA5
            using DATA4 = Field<0, 8>;    // DATA4
        };

        // receive FIFO mailbox identifier register
        struct RI0R : public RegisterReadOnly<0x400065b0> {
            using STID = Field<21, 11>;    // STID
            using EXID = Field<3, 18>;    // EXID
            using IDE = Field<2, 1>;    // IDE
            using RTR = Field<1, 1>;    // RTR
        };

        // mailbox data high register
        struct RDT0R : public RegisterReadOnly<0x400065b4> {
            using TIME = Field<16, 16>;    // TIME
            using FMI = Field<8, 8>;    // FMI
            using DLC = Field<0, 4>;    // DLC
        };

        // mailbox data high register
        struct RDL0R : public RegisterReadOnly<0x400065b8> {
            using DATA3 = Field<24, 8>;    // DATA3
            using DATA2 = Field<16, 8>;    // DATA2
            using DATA1 = Field<8, 8>;    // DATA1
            using DATA0 = Field<0, 8>;    // DATA0
        };

        // receive FIFO mailbox data high register
        struct RDH0R : public RegisterReadOnly<0x400065bc> {
            using DATA7 = Field<24, 8>;    // DATA7
            using DATA6 = Field<16, 8>;    // DATA6
            using DATA5 = Field<8, 8>;    // DATA5
            using DATA4 = Field<0, 8>;    // DATA4
        };

        // mailbox data high register
        struct RI1R : public RegisterReadOnly<0x400065c0> {
            using STID = Field<21, 11>;    // STID
            using EXID = Field<3, 18>;    // EXID
            using IDE = Field<2, 1>;    // IDE
            using RTR = Field<1, 1>;    // RTR
        };

        // mailbox data high register
        struct RDT1R : public RegisterReadOnly<0x400065c4> {
            using TIME = Field<16, 16>;    // TIME
            using FMI = Field<8, 8>;    // FMI
            using DLC = Field<0, 4>;    // DLC
        };

        // mailbox data high register
        struct RDL1R : public RegisterReadOnly<0x400065c8> {
            using DATA3 = Field<24, 8>;    // DATA3
            using DATA2 = Field<16, 8>;    // DATA2
            using DATA1 = Field<8, 8>;    // DATA1
            using DATA0 = Field<0, 8>;    // DATA0
        };

        // mailbox data high register
        struct RDH1R : public RegisterReadOnly<0x400065cc> {
            using DATA7 = Field<24, 8>;    // DATA7
            using DATA6 = Field<16, 8>;    // DATA6
            using DATA5 = Field<8, 8>;    // DATA5
            using DATA4 = Field<0, 8>;    // DATA4
        };

        // filter master register
        struct FMR : public Register<0x40006600> {
            using FINIT = Field<0, 1>;    // Filter initialization mode
        };

        // filter mode register
        struct FM1R : public Register<0x40006604> {
            using FBM0 = Field<0, 1>;    // Filter mode
            using FBM1 = Field<1, 1>;    // Filter mode
            using FBM2 = Field<2, 1>;    // Filter mode
            using FBM3 = Field<3, 1>;    // Filter mode
            using FBM4 = Field<4, 1>;    // Filter mode
            using FBM5 = Field<5, 1>;    // Filter mode
            using FBM6 = Field<6, 1>;    // Filter mode
            using FBM7 = Field<7, 1>;    // Filter mode
            using FBM8 = Field<8, 1>;    // Filter mode
            using FBM9 = Field<9, 1>;    // Filter mode
            using FBM10 = Field<10, 1>;    // Filter mode
            using FBM11 = Field<11, 1>;    // Filter mode
            using FBM12 = Field<12, 1>;    // Filter mode
            using FBM13 = Field<13, 1>;    // Filter mode
        };

        // filter scale register
        struct FS1R : public Register<0x4000660c> {
            using FSC0 = Field<0, 1>;    // Filter scale configuration
            using FSC1 = Field<1, 1>;    // Filter scale configuration
            using FSC2 = Field<2, 1>;    // Filter scale configuration
            using FSC3 = Field<3, 1>;    // Filter scale configuration
            using FSC4 = Field<4, 1>;    // Filter scale configuration
            using FSC5 = Field<5, 1>;    // Filter scale configuration
            using FSC6 = Field<6, 1>;    // Filter scale configuration
            using FSC7 = Field<7, 1>;    // Filter scale configuration
            using FSC8 = Field<8, 1>;    // Filter scale configuration
            using FSC9 = Field<9, 1>;    // Filter scale configuration
            using FSC10 = Field<10, 1>;    // Filter scale configuration
            using FSC11 = Field<11, 1>;    // Filter scale configuration
            using FSC12 = Field<12, 1>;    // Filter scale configuration
            using FSC13 = Field<13, 1>;    // Filter scale configuration
        };

        // filter FIFO assignment register
        struct FFA1R : public Register<0x40006614> {
            using FFA0 = Field<0, 1>;    // Filter FIFO assignment for filter 0
            using FFA1 = Field<1, 1>;    // Filter FIFO assignment for filter 1
            using FFA2 = Field<2, 1>;    // Filter FIFO assignment for filter 2
            using FFA3 = Field<3, 1>;    // Filter FIFO assignment for filter 3
            using FFA4 = Field<4, 1>;    // Filter FIFO assignment for filter 4
            using FFA5 = Field<5, 1>;    // Filter FIFO assignment for filter 5
            using FFA6 = Field<6, 1>;    // Filter FIFO assignment for filter 6
            using FFA7 = Field<7, 1>;    // Filter FIFO assignment for filter 7
            using FFA8 = Field<8, 1>;    // Filter FIFO assignment for filter 8
            using FFA9 = Field<9, 1>;    // Filter FIFO assignment for filter 9
            using FFA10 = Field<10, 1>;    // Filter FIFO assignment for filter 10
            using FFA11 = Field<11, 1>;    // Filter FIFO assignment for filter 11
            using FFA12 = Field<12, 1>;    // Filter FIFO assignment for filter 12
            using FFA13 = Field<13, 1>;    // Filter FIFO assignment for filter 13
        };

        // filter activation register
        struct FA1R : public Register<0x4000661c> {
            using FACT0 = Field<0, 1>;    // Filter active
            using FACT1 = Field<1, 1>;    // Filter active
            using FACT2 = Field<2, 1>;    // Filter active
            using FACT3 = Field<3, 1>;    // Filter active
            using FACT4 = Field<4, 1>;    // Filter active
            using FACT5 = Field<5, 1>;    // Filter active
            using FACT6 = Field<6, 1>;    // Filter active
            using FACT7 = Field<7, 1>;    // Filter active
            using FACT8 = Field<8, 1>;    // Filter active
            using FACT9 = Field<9, 1>;    // Filter active
            using FACT10 = Field<10, 1>;    // Filter active
            using FACT11 = Field<11, 1>;    // Filter active
            using FACT12 = Field<12, 1>;    // Filter active
            using FACT13 = Field<13, 1>;    // Filter active
        };

        // Filter bank 0 register 1
        struct F0R1 : public Register<0x40006640> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 0 register 2
        struct F0R2 : public Register<0x40006644> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 1 register 1
        struct F1R1 : public Register<0x40006648> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 1 register 2
        struct F1R2 : public Register<0x4000664c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 2 register 1
        struct F2R1 : public Register<0x40006650> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 2 register 2
        struct F2R2 : public Register<0x40006654> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 3 register 1
        struct F3R1 : public Register<0x40006658> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 3 register 2
        struct F3R2 : public Register<0x4000665c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 4 register 1
        struct F4R1 : public Register<0x40006660> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 4 register 2
        struct F4R2 : public Register<0x40006664> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 5 register 1
        struct F5R1 : public Register<0x40006668> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 5 register 2
        struct F5R2 : public Register<0x4000666c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 6 register 1
        struct F6R1 : public Register<0x40006670> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 6 register 2
        struct F6R2 : public Register<0x40006674> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 7 register 1
        struct F7R1 : public Register<0x40006678> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 7 register 2
        struct F7R2 : public Register<0x4000667c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 8 register 1
        struct F8R1 : public Register<0x40006680> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 8 register 2
        struct F8R2 : public Register<0x40006684> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 9 register 1
        struct F9R1 : public Register<0x40006688> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 9 register 2
        struct F9R2 : public Register<0x4000668c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 10 register 1
        struct F10R1 : public Register<0x40006690> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 10 register 2
        struct F10R2 : public Register<0x40006694> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 11 register 1
        struct F11R1 : public Register<0x40006698> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 11 register 2
        struct F11R2 : public Register<0x4000669c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 4 register 1
        struct F12R1 : public Register<0x400066a0> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 12 register 2
        struct F12R2 : public Register<0x400066a4> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 13 register 1
        struct F13R1 : public Register<0x400066a8> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 13 register 2
        struct F13R2 : public Register<0x400066ac> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 14 register 1
        struct F14R1 : public Register<0x400066b0> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 14 register 2
        struct F14R2 : public Register<0x400066b4> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 15 register 1
        struct F15R1 : public Register<0x400066b8> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 15 register 2
        struct F15R2 : public Register<0x400066bc> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 16 register 1
        struct F16R1 : public Register<0x400066c0> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 16 register 2
        struct F16R2 : public Register<0x400066c4> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 17 register 1
        struct F17R1 : public Register<0x400066c8> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 17 register 2
        struct F17R2 : public Register<0x400066cc> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 18 register 1
        struct F18R1 : public Register<0x400066d0> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 18 register 2
        struct F18R2 : public Register<0x400066d4> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 19 register 1
        struct F19R1 : public Register<0x400066d8> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 19 register 2
        struct F19R2 : public Register<0x400066dc> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 20 register 1
        struct F20R1 : public Register<0x400066e0> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 20 register 2
        struct F20R2 : public Register<0x400066e4> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 21 register 1
        struct F21R1 : public Register<0x400066e8> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 21 register 2
        struct F21R2 : public Register<0x400066ec> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 22 register 1
        struct F22R1 : public Register<0x400066f0> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 22 register 2
        struct F22R2 : public Register<0x400066f4> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 23 register 1
        struct F23R1 : public Register<0x400066f8> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 23 register 2
        struct F23R2 : public Register<0x400066fc> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 24 register 1
        struct F24R1 : public Register<0x40006700> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 24 register 2
        struct F24R2 : public Register<0x40006704> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 25 register 1
        struct F25R1 : public Register<0x40006708> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 25 register 2
        struct F25R2 : public Register<0x4000670c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 26 register 1
        struct F26R1 : public Register<0x40006710> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 26 register 2
        struct F26R2 : public Register<0x40006714> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 27 register 1
        struct F27R1 : public Register<0x40006718> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 27 register 2
        struct F27R2 : public Register<0x4000671c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

    };

    // Real-time clock
    struct RTC {
        // time register
        struct TR : public Register<0x40002800> {
            using PM = Field<22, 1>;    // AM/PM notation
            using HT = Field<20, 2>;    // Hour tens in BCD format
            using HU = Field<16, 4>;    // Hour units in BCD format
            using MNT = Field<12, 3>;    // Minute tens in BCD format
            using MNU = Field<8, 4>;    // Minute units in BCD format
            using ST = Field<4, 3>;    // Second tens in BCD format
            using SU = Field<0, 4>;    // Second units in BCD format
        };

        // date register
        struct DR : public Register<0x40002804> {
            using YT = Field<20, 4>;    // Year tens in BCD format
            using YU = Field<16, 4>;    // Year units in BCD format
            using WDU = Field<13, 3>;    // Week day units
            using MT = Field<12, 1>;    // Month tens in BCD format
            using MU = Field<8, 4>;    // Month units in BCD format
            using DT = Field<4, 2>;    // Date tens in BCD format
            using DU = Field<0, 4>;    // Date units in BCD format
        };

        // control register
        struct CR : public Register<0x40002808> {
            using WCKSEL = Field<0, 3>;    // Wakeup clock selection
            using TSEDGE = Field<3, 1>;    // Time-stamp event active edge
            using REFCKON = Field<4, 1>;    // Reference clock detection enable (50 or 60 Hz)
            using BYPSHAD = Field<5, 1>;    // Bypass the shadow registers
            using FMT = Field<6, 1>;    // Hour format
            using ALRAE = Field<8, 1>;    // Alarm A enable
            using ALRBE = Field<9, 1>;    // Alarm B enable
            using WUTE = Field<10, 1>;    // Wakeup timer enable
            using TSE = Field<11, 1>;    // Time stamp enable
            using ALRAIE = Field<12, 1>;    // Alarm A interrupt enable
            using ALRBIE = Field<13, 1>;    // Alarm B interrupt enable
            using WUTIE = Field<14, 1>;    // Wakeup timer interrupt enable
            using TSIE = Field<15, 1>;    // Time-stamp interrupt enable
            using ADD1H = Field<16, 1>;    // Add 1 hour (summer time change)
            using SUB1H = Field<17, 1>;    // Subtract 1 hour (winter time change)
            using BKP = Field<18, 1>;    // Backup
            using COSEL = Field<19, 1>;    // Calibration output selection
            using POL = Field<20, 1>;    // Output polarity
            using OSEL = Field<21, 2>;    // Output selection
            using COE = Field<23, 1>;    // Calibration output enable
            using ITSE = Field<24, 1>;    // timestamp on internal event enable
        };

        // initialization and status register
        struct ISR : public Register<0x4000280c> {
            using ALRAWF = Field<0, 1>;    // Alarm A write flag
            using ALRBWF = Field<1, 1>;    // Alarm B write flag
            using WUTWF = Field<2, 1>;    // Wakeup timer write flag
            using SHPF = Field<3, 1>;    // Shift operation pending
            using INITS = Field<4, 1>;    // Initialization status flag
            using RSF = Field<5, 1>;    // Registers synchronization flag
            using INITF = Field<6, 1>;    // Initialization flag
            using INIT = Field<7, 1>;    // Initialization mode
            using ALRAF = Field<8, 1>;    // Alarm A flag
            using ALRBF = Field<9, 1>;    // Alarm B flag
            using WUTF = Field<10, 1>;    // Wakeup timer flag
            using TSF = Field<11, 1>;    // Time-stamp flag
            using TSOVF = Field<12, 1>;    // Time-stamp overflow flag
            using TAMP1F = Field<13, 1>;    // Tamper detection flag
            using TAMP2F = Field<14, 1>;    // RTC_TAMP2 detection flag
            using TAMP3F = Field<15, 1>;    // RTC_TAMP3 detection flag
            using RECALPF = Field<16, 1>;    // Recalibration pending Flag
        };

        // prescaler register
        struct PRER : public Register<0x40002810> {
            using PREDIV_A = Field<16, 7>;    // Asynchronous prescaler factor
            using PREDIV_S = Field<0, 15>;    // Synchronous prescaler factor
        };

        // wakeup timer register
        struct WUTR : public Register<0x40002814> {
            using WUT = Field<0, 16>;    // Wakeup auto-reload value bits
        };

        // alarm A register
        struct ALRMAR : public Register<0x4000281c> {
            using MSK4 = Field<31, 1>;    // Alarm A date mask
            using WDSEL = Field<30, 1>;    // Week day selection
            using DT = Field<28, 2>;    // Date tens in BCD format
            using DU = Field<24, 4>;    // Date units or day in BCD format
            using MSK3 = Field<23, 1>;    // Alarm A hours mask
            using PM = Field<22, 1>;    // AM/PM notation
            using HT = Field<20, 2>;    // Hour tens in BCD format
            using HU = Field<16, 4>;    // Hour units in BCD format
            using MSK2 = Field<15, 1>;    // Alarm A minutes mask
            using MNT = Field<12, 3>;    // Minute tens in BCD format
            using MNU = Field<8, 4>;    // Minute units in BCD format
            using MSK1 = Field<7, 1>;    // Alarm A seconds mask
            using ST = Field<4, 3>;    // Second tens in BCD format
            using SU = Field<0, 4>;    // Second units in BCD format
        };

        // alarm B register
        struct ALRMBR : public Register<0x40002820> {
            using MSK4 = Field<31, 1>;    // Alarm B date mask
            using WDSEL = Field<30, 1>;    // Week day selection
            using DT = Field<28, 2>;    // Date tens in BCD format
            using DU = Field<24, 4>;    // Date units or day in BCD format
            using MSK3 = Field<23, 1>;    // Alarm B hours mask
            using PM = Field<22, 1>;    // AM/PM notation
            using HT = Field<20, 2>;    // Hour tens in BCD format
            using HU = Field<16, 4>;    // Hour units in BCD format
            using MSK2 = Field<15, 1>;    // Alarm B minutes mask
            using MNT = Field<12, 3>;    // Minute tens in BCD format
            using MNU = Field<8, 4>;    // Minute units in BCD format
            using MSK1 = Field<7, 1>;    // Alarm B seconds mask
            using ST = Field<4, 3>;    // Second tens in BCD format
            using SU = Field<0, 4>;    // Second units in BCD format
        };

        // write protection register
        struct WPR : public RegisterWriteOnly<0x40002824> {
            using KEY = Field<0, 8>;    // Write protection key
        };

        // sub second register
        struct SSR : public RegisterReadOnly<0x40002828> {
            using SS = Field<0, 16>;    // Sub second value
        };

        // shift control register
        struct SHIFTR : public RegisterWriteOnly<0x4000282c> {
            using ADD1S = Field<31, 1>;    // Add one second
            using SUBFS = Field<0, 15>;    // Subtract a fraction of a second
        };

        // time stamp time register
        struct TSTR : public RegisterReadOnly<0x40002830> {
            using SU = Field<0, 4>;    // Second units in BCD format
            using ST = Field<4, 3>;    // Second tens in BCD format
            using MNU = Field<8, 4>;    // Minute units in BCD format
            using MNT = Field<12, 3>;    // Minute tens in BCD format
            using HU = Field<16, 4>;    // Hour units in BCD format
            using HT = Field<20, 2>;    // Hour tens in BCD format
            using PM = Field<22, 1>;    // AM/PM notation
        };

        // time stamp date register
        struct TSDR : public RegisterReadOnly<0x40002834> {
            using WDU = Field<13, 3>;    // Week day units
            using MT = Field<12, 1>;    // Month tens in BCD format
            using MU = Field<8, 4>;    // Month units in BCD format
            using DT = Field<4, 2>;    // Date tens in BCD format
            using DU = Field<0, 4>;    // Date units in BCD format
        };

        // timestamp sub second register
        struct TSSSR : public RegisterReadOnly<0x40002838> {
            using SS = Field<0, 16>;    // Sub second value
        };

        // calibration register
        struct CALR : public Register<0x4000283c> {
            using CALP = Field<15, 1>;    // Increase frequency of RTC by 488.5 ppm
            using CALW8 = Field<14, 1>;    // Use an 8-second calibration cycle period
            using CALW16 = Field<13, 1>;    // Use a 16-second calibration cycle period
            using CALM = Field<0, 9>;    // Calibration minus
        };

        // tamper configuration register
        struct TAMPCR : public Register<0x40002840> {
            using TAMP1E = Field<0, 1>;    // Tamper 1 detection enable
            using TAMP1TRG = Field<1, 1>;    // Active level for tamper 1
            using TAMPIE = Field<2, 1>;    // Tamper interrupt enable
            using TAMP2E = Field<3, 1>;    // Tamper 2 detection enable
            using TAMP2TRG = Field<4, 1>;    // Active level for tamper 2
            using TAMP3E = Field<5, 1>;    // Tamper 3 detection enable
            using TAMP3TRG = Field<6, 1>;    // Active level for tamper 3
            using TAMPTS = Field<7, 1>;    // Activate timestamp on tamper detection event
            using TAMPFREQ = Field<8, 3>;    // Tamper sampling frequency
            using TAMPFLT = Field<11, 2>;    // Tamper filter count
            using TAMPPRCH = Field<13, 2>;    // Tamper precharge duration
            using TAMPPUDIS = Field<15, 1>;    // TAMPER pull-up disable
            using TAMP1IE = Field<16, 1>;    // Tamper 1 interrupt enable
            using TAMP1NOERASE = Field<17, 1>;    // Tamper 1 no erase
            using TAMP1MF = Field<18, 1>;    // Tamper 1 mask flag
            using TAMP2IE = Field<19, 1>;    // Tamper 2 interrupt enable
            using TAMP2NOERASE = Field<20, 1>;    // Tamper 2 no erase
            using TAMP2MF = Field<21, 1>;    // Tamper 2 mask flag
            using TAMP3IE = Field<22, 1>;    // Tamper 3 interrupt enable
            using TAMP3NOERASE = Field<23, 1>;    // Tamper 3 no erase
            using TAMP3MF = Field<24, 1>;    // Tamper 3 mask flag
        };

        // alarm A sub second register
        struct ALRMASSR : public Register<0x40002844> {
            using MASKSS = Field<24, 4>;    // Mask the most-significant bits starting at this bit
            using SS = Field<0, 15>;    // Sub seconds value
        };

        // alarm B sub second register
        struct ALRMBSSR : public Register<0x40002848> {
            using MASKSS = Field<24, 4>;    // Mask the most-significant bits starting at this bit
            using SS = Field<0, 15>;    // Sub seconds value
        };

        // option register
        struct OR : public Register<0x4000284c> {
            using RTC_ALARM_TYPE = Field<0, 1>;    // RTC_ALARM on PC13 output type
            using RTC_OUT_RMP = Field<1, 1>;    // RTC_OUT remap
        };

        // backup register
        struct BKP0R : public Register<0x40002850> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP1R : public Register<0x40002854> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP2R : public Register<0x40002858> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP3R : public Register<0x4000285c> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP4R : public Register<0x40002860> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP5R : public Register<0x40002864> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP6R : public Register<0x40002868> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP7R : public Register<0x4000286c> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP8R : public Register<0x40002870> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP9R : public Register<0x40002874> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP10R : public Register<0x40002878> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP11R : public Register<0x4000287c> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP12R : public Register<0x40002880> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP13R : public Register<0x40002884> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP14R : public Register<0x40002888> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP15R : public Register<0x4000288c> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP16R : public Register<0x40002890> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP17R : public Register<0x40002894> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP18R : public Register<0x40002898> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP19R : public Register<0x4000289c> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP20R : public Register<0x400028a0> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP21R : public Register<0x400028a4> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP22R : public Register<0x400028a8> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP23R : public Register<0x400028ac> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP24R : public Register<0x400028b0> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP25R : public Register<0x400028b4> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP26R : public Register<0x400028b8> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP27R : public Register<0x400028bc> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP28R : public Register<0x400028c0> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP29R : public Register<0x400028c4> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP30R : public Register<0x400028c8> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP31R : public Register<0x400028cc> {
            using BKP = Field<0, 32>;    // BKP
        };

    };

    // Single Wire Protocol Master Interface
    struct SWPMI1 {
        // SWPMI Configuration/Control register
        struct CR : public Register<0x40008800> {
            using RXDMA = Field<0, 1>;    // Reception DMA enable
            using TXDMA = Field<1, 1>;    // Transmission DMA enable
            using RXMODE = Field<2, 1>;    // Reception buffering mode
            using TXMODE = Field<3, 1>;    // Transmission buffering mode
            using LPBK = Field<4, 1>;    // Loopback mode enable
            using SWPME = Field<5, 1>;    // Single wire protocol master interface enable
            using DEACT = Field<10, 1>;    // Single wire protocol master interface deactivate
        };

        // SWPMI Bitrate register
        struct BRR : public Register<0x40008804> {
            using BR = Field<0, 6>;    // Bitrate prescaler
        };

        // SWPMI Interrupt and Status register
        struct ISR : public RegisterReadOnly<0x4000880c> {
            using RXBFF = Field<0, 1>;    // Receive buffer full flag
            using TXBEF = Field<1, 1>;    // Transmit buffer empty flag
            using RXBERF = Field<2, 1>;    // Receive CRC error flag
            using RXOVRF = Field<3, 1>;    // Receive overrun error flag
            using TXUNRF = Field<4, 1>;    // Transmit underrun error flag
            using RXNE = Field<5, 1>;    // Receive data register not empty
            using TXE = Field<6, 1>;    // Transmit data register empty
            using TCF = Field<7, 1>;    // Transfer complete flag
            using SRF = Field<8, 1>;    // Slave resume flag
            using SUSP = Field<9, 1>;    // SUSPEND flag
            using DEACTF = Field<10, 1>;    // DEACTIVATED flag
        };

        // SWPMI Interrupt Flag Clear register
        struct ICR : public RegisterWriteOnly<0x40008810> {
            using CRXBFF = Field<0, 1>;    // Clear receive buffer full flag
            using CTXBEF = Field<1, 1>;    // Clear transmit buffer empty flag
            using CRXBERF = Field<2, 1>;    // Clear receive CRC error flag
            using CRXOVRF = Field<3, 1>;    // Clear receive overrun error flag
            using CTXUNRF = Field<4, 1>;    // Clear transmit underrun error flag
            using CTCF = Field<7, 1>;    // Clear transfer complete flag
            using CSRF = Field<8, 1>;    // Clear slave resume flag
        };

        // SWPMI Interrupt Enable register
        struct IER : public Register<0x40008814> {
            using RXBFIE = Field<0, 1>;    // Receive buffer full interrupt enable
            using TXBEIE = Field<1, 1>;    // Transmit buffer empty interrupt enable
            using RXBERIE = Field<2, 1>;    // Receive CRC error interrupt enable
            using RXOVRIE = Field<3, 1>;    // Receive overrun error interrupt enable
            using TXUNRIE = Field<4, 1>;    // Transmit underrun error interrupt enable
            using RIE = Field<5, 1>;    // Receive interrupt enable
            using TIE = Field<6, 1>;    // Transmit interrupt enable
            using TCIE = Field<7, 1>;    // Transmit complete interrupt enable
            using SRIE = Field<8, 1>;    // Slave resume interrupt enable
        };

        // SWPMI Receive Frame Length register
        struct RFL : public RegisterReadOnly<0x40008818> {
            using Field = Field<0, 5>;    // Receive frame length
        };

        // SWPMI Transmit data register
        struct TDR : public RegisterWriteOnly<0x4000881c> {
            using TD = Field<0, 32>;    // Transmit data
        };

        // SWPMI Receive data register
        struct RDR : public RegisterReadOnly<0x40008820> {
            using RD = Field<0, 32>;    // received data
        };

    };

    // Operational amplifiers
    struct OPAMP {
        // OPAMP1 control/status register
        struct OPAMP1_CSR : public Register<0x40007800> {
            using OPAEN = Field<0, 1>;    // Operational amplifier Enable
            using OPALPM = Field<1, 1>;    // Operational amplifier Low Power Mode
            using OPAMODE = Field<2, 2>;    // Operational amplifier PGA mode
            using PGA_GAIN = Field<4, 2>;    // Operational amplifier Programmable amplifier gain value
            using VM_SEL = Field<8, 2>;    // Inverting input selection
            using VP_SEL = Field<10, 1>;    // Non inverted input selection
            using CALON = Field<12, 1>;    // Calibration mode enabled
            using CALSEL = Field<13, 1>;    // Calibration selection
            using USERTRIM = Field<14, 1>;    // allows to switch from AOP offset trimmed values to AOP offset
            using CALOUT = Field<15, 1>;    // Operational amplifier calibration output
            using OPA_RANGE = Field<31, 1>;    // Operational amplifier power supply range for stability
        };

        // OPAMP1 offset trimming register in normal mode
        struct OPAMP1_OTR : public Register<0x40007804> {
            using TRIMOFFSETN = Field<0, 5>;    // Trim for NMOS differential pairs
            using TRIMOFFSETP = Field<8, 5>;    // Trim for PMOS differential pairs
        };

        // OPAMP1 offset trimming register in low-power mode
        struct OPAMP1_LPOTR : public Register<0x40007808> {
            using TRIMLPOFFSETN = Field<0, 5>;    // Trim for NMOS differential pairs
            using TRIMLPOFFSETP = Field<8, 5>;    // Trim for PMOS differential pairs
        };

        // OPAMP2 control/status register
        struct OPAMP2_CSR : public Register<0x40007810> {
            using OPAEN = Field<0, 1>;    // Operational amplifier Enable
            using OPALPM = Field<1, 1>;    // Operational amplifier Low Power Mode
            using OPAMODE = Field<2, 2>;    // Operational amplifier PGA mode
            using PGA_GAIN = Field<4, 2>;    // Operational amplifier Programmable amplifier gain value
            using VM_SEL = Field<8, 2>;    // Inverting input selection
            using VP_SEL = Field<10, 1>;    // Non inverted input selection
            using CALON = Field<12, 1>;    // Calibration mode enabled
            using CALSEL = Field<13, 1>;    // Calibration selection
            using USERTRIM = Field<14, 1>;    // allows to switch from AOP offset trimmed values to AOP offset
            using CALOUT = Field<15, 1>;    // Operational amplifier calibration output
        };

        // OPAMP2 offset trimming register in normal mode
        struct OPAMP2_OTR : public Register<0x40007814> {
            using TRIMOFFSETN = Field<0, 5>;    // Trim for NMOS differential pairs
            using TRIMOFFSETP = Field<8, 5>;    // Trim for PMOS differential pairs
        };

        // OPAMP2 offset trimming register in low-power mode
        struct OPAMP2_LPOTR : public Register<0x40007818> {
            using TRIMLPOFFSETN = Field<0, 5>;    // Trim for NMOS differential pairs
            using TRIMLPOFFSETP = Field<8, 5>;    // Trim for PMOS differential pairs
        };

    };

    // Nested Vectored Interrupt Controller
    struct NVIC {
        // Interrupt Set-Enable Register
        struct ISER0 : public Register<0xe000e100> {
            using SETENA = Field<0, 32>;    // SETENA
        };

        // Interrupt Set-Enable Register
        struct ISER1 : public Register<0xe000e104> {
            using SETENA = Field<0, 32>;    // SETENA
        };

        // Interrupt Set-Enable Register
        struct ISER2 : public Register<0xe000e108> {
            using SETENA = Field<0, 32>;    // SETENA
        };

        // Interrupt Clear-Enable Register
        struct ICER0 : public Register<0xe000e180> {
            using CLRENA = Field<0, 32>;    // CLRENA
        };

        // Interrupt Clear-Enable Register
        struct ICER1 : public Register<0xe000e184> {
            using CLRENA = Field<0, 32>;    // CLRENA
        };

        // Interrupt Clear-Enable Register
        struct ICER2 : public Register<0xe000e188> {
            using CLRENA = Field<0, 32>;    // CLRENA
        };

        // Interrupt Set-Pending Register
        struct ISPR0 : public Register<0xe000e200> {
            using SETPEND = Field<0, 32>;    // SETPEND
        };

        // Interrupt Set-Pending Register
        struct ISPR1 : public Register<0xe000e204> {
            using SETPEND = Field<0, 32>;    // SETPEND
        };

        // Interrupt Set-Pending Register
        struct ISPR2 : public Register<0xe000e208> {
            using SETPEND = Field<0, 32>;    // SETPEND
        };

        // Interrupt Clear-Pending Register
        struct ICPR0 : public Register<0xe000e280> {
            using CLRPEND = Field<0, 32>;    // CLRPEND
        };

        // Interrupt Clear-Pending Register
        struct ICPR1 : public Register<0xe000e284> {
            using CLRPEND = Field<0, 32>;    // CLRPEND
        };

        // Interrupt Clear-Pending Register
        struct ICPR2 : public Register<0xe000e288> {
            using CLRPEND = Field<0, 32>;    // CLRPEND
        };

        // Interrupt Active Bit Register
        struct IABR0 : public RegisterReadOnly<0xe000e300> {
            using ACTIVE = Field<0, 32>;    // ACTIVE
        };

        // Interrupt Active Bit Register
        struct IABR1 : public RegisterReadOnly<0xe000e304> {
            using ACTIVE = Field<0, 32>;    // ACTIVE
        };

        // Interrupt Active Bit Register
        struct IABR2 : public RegisterReadOnly<0xe000e308> {
            using ACTIVE = Field<0, 32>;    // ACTIVE
        };

        // Interrupt Priority Register
        struct IPR0 : public Register<0xe000e400> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR1 : public Register<0xe000e404> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR2 : public Register<0xe000e408> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR3 : public Register<0xe000e40c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR4 : public Register<0xe000e410> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR5 : public Register<0xe000e414> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR6 : public Register<0xe000e418> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR7 : public Register<0xe000e41c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR8 : public Register<0xe000e420> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR9 : public Register<0xe000e424> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR10 : public Register<0xe000e428> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR11 : public Register<0xe000e42c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR12 : public Register<0xe000e430> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR13 : public Register<0xe000e434> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR14 : public Register<0xe000e438> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR15 : public Register<0xe000e43c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR16 : public Register<0xe000e440> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR17 : public Register<0xe000e444> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR18 : public Register<0xe000e448> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR19 : public Register<0xe000e44c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR20 : public Register<0xe000e450> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

    };

    // Clock recovery system
    struct CRS {
        // control register
        struct CR : public Register<0x40006000> {
            using TRIM = Field<8, 6>;    // HSI48 oscillator smooth trimming
            using SWSYNC = Field<7, 1>;    // Generate software SYNC event
            using AUTOTRIMEN = Field<6, 1>;    // Automatic trimming enable
            using CEN = Field<5, 1>;    // Frequency error counter enable
            using ESYNCIE = Field<3, 1>;    // Expected SYNC interrupt enable
            using ERRIE = Field<2, 1>;    // Synchronization or trimming error interrupt enable
            using SYNCWARNIE = Field<1, 1>;    // SYNC warning interrupt enable
            using SYNCOKIE = Field<0, 1>;    // SYNC event OK interrupt enable
        };

        // configuration register
        struct CFGR : public Register<0x40006004> {
            using SYNCPOL = Field<31, 1>;    // SYNC polarity selection
            using SYNCSRC = Field<28, 2>;    // SYNC signal source selection
            using SYNCDIV = Field<24, 3>;    // SYNC divider
            using FELIM = Field<16, 8>;    // Frequency error limit
            using RELOAD = Field<0, 16>;    // Counter reload value
        };

        // interrupt and status register
        struct ISR : public RegisterReadOnly<0x40006008> {
            using FECAP = Field<16, 16>;    // Frequency error capture
            using FEDIR = Field<15, 1>;    // Frequency error direction
            using TRIMOVF = Field<10, 1>;    // Trimming overflow or underflow
            using SYNCMISS = Field<9, 1>;    // SYNC missed
            using SYNCERR = Field<8, 1>;    // SYNC error
            using ESYNCF = Field<3, 1>;    // Expected SYNC flag
            using ERRF = Field<2, 1>;    // Error flag
            using SYNCWARNF = Field<1, 1>;    // SYNC warning flag
            using SYNCOKF = Field<0, 1>;    // SYNC event OK flag
        };

        // interrupt flag clear register
        struct ICR : public Register<0x4000600c> {
            using ESYNCC = Field<3, 1>;    // Expected SYNC clear flag
            using ERRC = Field<2, 1>;    // Error clear flag
            using SYNCWARNC = Field<1, 1>;    // SYNC warning clear flag
            using SYNCOKC = Field<0, 1>;    // SYNC event OK clear flag
        };

    };

    // Universal serial bus full-speed device interface
    struct USB_SRAM {
        // endpoint 0 register
        struct EP0R : public Register<0x40006c00> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 1 register
        struct EP1R : public Register<0x40006c04> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 2 register
        struct EP2R : public Register<0x40006c08> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 3 register
        struct EP3R : public Register<0x40006c0c> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 4 register
        struct EP4R : public Register<0x40006c10> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 5 register
        struct EP5R : public Register<0x40006c14> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 6 register
        struct EP6R : public Register<0x40006c18> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 7 register
        struct EP7R : public Register<0x40006c1c> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // control register
        struct CNTR : public Register<0x40006c40> {
            using FRES = Field<0, 1>;    // Force USB Reset
            using PDWN = Field<1, 1>;    // Power down
            using LPMODE = Field<2, 1>;    // Low-power mode
            using FSUSP = Field<3, 1>;    // Force suspend
            using RESUME = Field<4, 1>;    // Resume request
            using L1RESUME = Field<5, 1>;    // LPM L1 Resume request
            using L1REQM = Field<7, 1>;    // LPM L1 state request interrupt mask
            using ESOFM = Field<8, 1>;    // Expected start of frame interrupt mask
            using SOFM = Field<9, 1>;    // Start of frame interrupt mask
            using RESETM = Field<10, 1>;    // USB reset interrupt mask
            using SUSPM = Field<11, 1>;    // Suspend mode interrupt mask
            using WKUPM = Field<12, 1>;    // Wakeup interrupt mask
            using ERRM = Field<13, 1>;    // Error interrupt mask
            using PMAOVRM = Field<14, 1>;    // Packet memory area over / underrun interrupt mask
            using CTRM = Field<15, 1>;    // Correct transfer interrupt mask
        };

        // interrupt status register
        struct ISTR : public Register<0x40006c44> {
            using EP_ID = Field<0, 4>;    // Endpoint Identifier
            using DIR = Field<4, 1>;    // Direction of transaction
            using L1REQ = Field<7, 1>;    // LPM L1 state request
            using ESOF = Field<8, 1>;    // Expected start frame
            using SOF = Field<9, 1>;    // start of frame
            using RESET = Field<10, 1>;    // reset request
            using SUSP = Field<11, 1>;    // Suspend mode request
            using WKUP = Field<12, 1>;    // Wakeup
            using ERR = Field<13, 1>;    // Error
            using PMAOVR = Field<14, 1>;    // Packet memory area over / underrun
            using CTR = Field<15, 1>;    // Correct transfer
        };

        // frame number register
        struct FNR : public RegisterReadOnly<0x40006c48> {
            using FN = Field<0, 11>;    // Frame number
            using LSOF = Field<11, 2>;    // Lost SOF
            using LCK = Field<13, 1>;    // Locked
            using RXDM = Field<14, 1>;    // Receive data - line status
            using RXDP = Field<15, 1>;    // Receive data + line status
        };

        // device address
        struct DADDR : public Register<0x40006c4c> {
            using ADD = Field<0, 7>;    // Device address
            using EF = Field<7, 1>;    // Enable function
        };

        // Buffer table address
        struct BTABLE : public Register<0x40006c50> {
            using Field = Field<3, 13>;    // Buffer table
        };

        // LPM control and status register
        struct LPMCSR : public Register<0x40006c54> {
            using LPMEN = Field<0, 1>;    // LPM support enable
            using LPMACK = Field<1, 1>;    // LPM Token acknowledge enable
            using REMWAKE = Field<3, 1>;    // bRemoteWake value
            using BESL = Field<4, 4>;    // BESL value
        };

        // Battery charging detector
        struct BCDR : public Register<0x40006c58> {
            using BCDEN = Field<0, 1>;    // Battery charging detector
            using DCDEN = Field<1, 1>;    // Data contact detection
            using PDEN = Field<2, 1>;    // Primary detection
            using SDEN = Field<3, 1>;    // Secondary detection
            using DCDET = Field<4, 1>;    // Data contact detection
            using PDET = Field<5, 1>;    // Primary detection
            using SDET = Field<6, 1>;    // Secondary detection
            using PS2DET = Field<7, 1>;    // DM pull-up detection status
            using DPPU = Field<15, 1>;    // DP pull-up control
        };

    };

    // Universal serial bus full-speed device interface
    struct USB_FS {
        // endpoint 0 register
        struct EP0R : public Register<0x40006800> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 1 register
        struct EP1R : public Register<0x40006804> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 2 register
        struct EP2R : public Register<0x40006808> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 3 register
        struct EP3R : public Register<0x4000680c> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 4 register
        struct EP4R : public Register<0x40006810> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 5 register
        struct EP5R : public Register<0x40006814> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 6 register
        struct EP6R : public Register<0x40006818> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 7 register
        struct EP7R : public Register<0x4000681c> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // control register
        struct CNTR : public Register<0x40006840> {
            using FRES = Field<0, 1>;    // Force USB Reset
            using PDWN = Field<1, 1>;    // Power down
            using LPMODE = Field<2, 1>;    // Low-power mode
            using FSUSP = Field<3, 1>;    // Force suspend
            using RESUME = Field<4, 1>;    // Resume request
            using L1RESUME = Field<5, 1>;    // LPM L1 Resume request
            using L1REQM = Field<7, 1>;    // LPM L1 state request interrupt mask
            using ESOFM = Field<8, 1>;    // Expected start of frame interrupt mask
            using SOFM = Field<9, 1>;    // Start of frame interrupt mask
            using RESETM = Field<10, 1>;    // USB reset interrupt mask
            using SUSPM = Field<11, 1>;    // Suspend mode interrupt mask
            using WKUPM = Field<12, 1>;    // Wakeup interrupt mask
            using ERRM = Field<13, 1>;    // Error interrupt mask
            using PMAOVRM = Field<14, 1>;    // Packet memory area over / underrun interrupt mask
            using CTRM = Field<15, 1>;    // Correct transfer interrupt mask
        };

        // interrupt status register
        struct ISTR : public Register<0x40006844> {
            using EP_ID = Field<0, 4>;    // Endpoint Identifier
            using DIR = Field<4, 1>;    // Direction of transaction
            using L1REQ = Field<7, 1>;    // LPM L1 state request
            using ESOF = Field<8, 1>;    // Expected start frame
            using SOF = Field<9, 1>;    // start of frame
            using RESET = Field<10, 1>;    // reset request
            using SUSP = Field<11, 1>;    // Suspend mode request
            using WKUP = Field<12, 1>;    // Wakeup
            using ERR = Field<13, 1>;    // Error
            using PMAOVR = Field<14, 1>;    // Packet memory area over / underrun
            using CTR = Field<15, 1>;    // Correct transfer
        };

        // frame number register
        struct FNR : public RegisterReadOnly<0x40006848> {
            using FN = Field<0, 11>;    // Frame number
            using LSOF = Field<11, 2>;    // Lost SOF
            using LCK = Field<13, 1>;    // Locked
            using RXDM = Field<14, 1>;    // Receive data - line status
            using RXDP = Field<15, 1>;    // Receive data + line status
        };

        // device address
        struct DADDR : public Register<0x4000684c> {
            using ADD = Field<0, 7>;    // Device address
            using EF = Field<7, 1>;    // Enable function
        };

        // Buffer table address
        struct BTABLE : public Register<0x40006850> {
            using Field = Field<3, 13>;    // Buffer table
        };

        // LPM control and status register
        struct LPMCSR : public Register<0x40006854> {
            using LPMEN = Field<0, 1>;    // LPM support enable
            using LPMACK = Field<1, 1>;    // LPM Token acknowledge enable
            using REMWAKE = Field<3, 1>;    // bRemoteWake value
            using BESL = Field<4, 4>;    // BESL value
        };

        // Battery charging detector
        struct BCDR : public Register<0x40006858> {
            using BCDEN = Field<0, 1>;    // Battery charging detector
            using DCDEN = Field<1, 1>;    // Data contact detection
            using PDEN = Field<2, 1>;    // Primary detection
            using SDEN = Field<3, 1>;    // Secondary detection
            using DCDET = Field<4, 1>;    // Data contact detection
            using PDET = Field<5, 1>;    // Primary detection
            using SDET = Field<6, 1>;    // Secondary detection
            using PS2DET = Field<7, 1>;    // DM pull-up detection status
            using DPPU = Field<15, 1>;    // DP pull-up control
        };

    };

    // Digital filter for sigma delta modulators
    struct DFSDM {
        // channel configuration y register
        struct CHCFG0R1 : public Register<0x40016000> {
            using DFSDMEN = Field<31, 1>;    // DFSDMEN
            using CKOUTSRC = Field<30, 1>;    // CKOUTSRC
            using CKOUTDIV = Field<16, 8>;    // CKOUTDIV
            using DATPACK = Field<14, 2>;    // DATPACK
            using DATMPX = Field<12, 2>;    // DATMPX
            using CHINSEL = Field<8, 1>;    // CHINSEL
            using CHEN = Field<7, 1>;    // CHEN
            using CKABEN = Field<6, 1>;    // CKABEN
            using SCDEN = Field<5, 1>;    // SCDEN
            using SPICKSEL = Field<2, 2>;    // SPICKSEL
            using SITP = Field<0, 2>;    // SITP
        };

        // channel configuration y register
        struct CHCFG0R2 : public Register<0x40016004> {
            using OFFSET = Field<8, 24>;    // OFFSET
            using DTRBS = Field<3, 5>;    // DTRBS
        };

        // analog watchdog and short-circuit detector register
        struct AWSCD0R : public Register<0x40016008> {
            using AWFORD = Field<22, 2>;    // AWFORD
            using AWFOSR = Field<16, 5>;    // AWFOSR
            using BKSCD = Field<12, 4>;    // BKSCD
            using SCDT = Field<0, 8>;    // SCDT
        };

        // channel watchdog filter data register
        struct CHWDAT0R : public Register<0x4001600c> {
            using WDATA = Field<0, 16>;    // WDATA
        };

        // channel data input register
        struct CHDATIN0R : public Register<0x40016010> {
            using INDAT1 = Field<16, 16>;    // INDAT1
            using INDAT0 = Field<0, 16>;    // INDAT0
        };

        // CHCFG1R1
        struct CHCFG1R1 : public Register<0x40016020> {
            using DATPACK = Field<14, 2>;    // DATPACK
            using DATMPX = Field<12, 2>;    // DATMPX
            using CHINSEL = Field<8, 1>;    // CHINSEL
            using CHEN = Field<7, 1>;    // CHEN
            using CKABEN = Field<6, 1>;    // CKABEN
            using SCDEN = Field<5, 1>;    // SCDEN
            using SPICKSEL = Field<2, 2>;    // SPICKSEL
            using SITP = Field<0, 2>;    // SITP
        };

        // CHCFG1R2
        struct CHCFG1R2 : public Register<0x40016024> {
            using OFFSET = Field<8, 24>;    // OFFSET
            using DTRBS = Field<3, 5>;    // DTRBS
        };

        // AWSCD1R
        struct AWSCD1R : public Register<0x40016028> {
            using AWFORD = Field<22, 2>;    // AWFORD
            using AWFOSR = Field<16, 5>;    // AWFOSR
            using BKSCD = Field<12, 4>;    // BKSCD
            using SCDT = Field<0, 8>;    // SCDT
        };

        // CHWDAT1R
        struct CHWDAT1R : public Register<0x4001602c> {
            using WDATA = Field<0, 16>;    // WDATA
        };

        // CHDATIN1R
        struct CHDATIN1R : public Register<0x40016030> {
            using INDAT1 = Field<16, 16>;    // INDAT1
            using INDAT0 = Field<0, 16>;    // INDAT0
        };

        // CHCFG2R1
        struct CHCFG2R1 : public Register<0x40016040> {
            using DATPACK = Field<14, 2>;    // DATPACK
            using DATMPX = Field<12, 2>;    // DATMPX
            using CHINSEL = Field<8, 1>;    // CHINSEL
            using CHEN = Field<7, 1>;    // CHEN
            using CKABEN = Field<6, 1>;    // CKABEN
            using SCDEN = Field<5, 1>;    // SCDEN
            using SPICKSEL = Field<2, 2>;    // SPICKSEL
            using SITP = Field<0, 2>;    // SITP
        };

        // CHCFG2R2
        struct CHCFG2R2 : public Register<0x40016044> {
            using OFFSET = Field<8, 24>;    // OFFSET
            using DTRBS = Field<3, 5>;    // DTRBS
        };

        // AWSCD2R
        struct AWSCD2R : public Register<0x40016048> {
            using AWFORD = Field<22, 2>;    // AWFORD
            using AWFOSR = Field<16, 5>;    // AWFOSR
            using BKSCD = Field<12, 4>;    // BKSCD
            using SCDT = Field<0, 8>;    // SCDT
        };

        // CHWDAT2R
        struct CHWDAT2R : public Register<0x4001604c> {
            using WDATA = Field<0, 16>;    // WDATA
        };

        // CHDATIN2R
        struct CHDATIN2R : public Register<0x40016050> {
            using INDAT1 = Field<16, 16>;    // INDAT1
            using INDAT0 = Field<0, 16>;    // INDAT0
        };

        // CHCFG3R1
        struct CHCFG3R1 : public Register<0x40016060> {
            using DATPACK = Field<14, 2>;    // DATPACK
            using DATMPX = Field<12, 2>;    // DATMPX
            using CHINSEL = Field<8, 1>;    // CHINSEL
            using CHEN = Field<7, 1>;    // CHEN
            using CKABEN = Field<6, 1>;    // CKABEN
            using SCDEN = Field<5, 1>;    // SCDEN
            using SPICKSEL = Field<2, 2>;    // SPICKSEL
            using SITP = Field<0, 2>;    // SITP
        };

        // CHCFG3R2
        struct CHCFG3R2 : public Register<0x40016064> {
            using OFFSET = Field<8, 24>;    // OFFSET
            using DTRBS = Field<3, 5>;    // DTRBS
        };

        // AWSCD3R
        struct AWSCD3R : public Register<0x40016068> {
            using AWFORD = Field<22, 2>;    // AWFORD
            using AWFOSR = Field<16, 5>;    // AWFOSR
            using BKSCD = Field<12, 4>;    // BKSCD
            using SCDT = Field<0, 8>;    // SCDT
        };

        // CHWDAT3R
        struct CHWDAT3R : public Register<0x4001606c> {
            using WDATA = Field<0, 16>;    // WDATA
        };

        // CHDATIN3R
        struct CHDATIN3R : public Register<0x40016070> {
            using INDAT1 = Field<16, 16>;    // INDAT1
            using INDAT0 = Field<0, 16>;    // INDAT0
        };

        // CHCFG4R1
        struct CHCFG4R1 : public Register<0x40016080> {
            using DATPACK = Field<14, 2>;    // DATPACK
            using DATMPX = Field<12, 2>;    // DATMPX
            using CHINSEL = Field<8, 1>;    // CHINSEL
            using CHEN = Field<7, 1>;    // CHEN
            using CKABEN = Field<6, 1>;    // CKABEN
            using SCDEN = Field<5, 1>;    // SCDEN
            using SPICKSEL = Field<2, 2>;    // SPICKSEL
            using SITP = Field<0, 2>;    // SITP
        };

        // CHCFG4R2
        struct CHCFG4R2 : public Register<0x40016084> {
            using OFFSET = Field<8, 24>;    // OFFSET
            using DTRBS = Field<3, 5>;    // DTRBS
        };

        // AWSCD4R
        struct AWSCD4R : public Register<0x40016088> {
            using AWFORD = Field<22, 2>;    // AWFORD
            using AWFOSR = Field<16, 5>;    // AWFOSR
            using BKSCD = Field<12, 4>;    // BKSCD
            using SCDT = Field<0, 8>;    // SCDT
        };

        // CHWDAT4R
        struct CHWDAT4R : public Register<0x4001608c> {
            using WDATA = Field<0, 16>;    // WDATA
        };

        // CHDATIN4R
        struct CHDATIN4R : public Register<0x40016090> {
            using INDAT1 = Field<16, 16>;    // INDAT1
            using INDAT0 = Field<0, 16>;    // INDAT0
        };

        // CHCFG5R1
        struct CHCFG5R1 : public Register<0x400160a0> {
            using DATPACK = Field<14, 2>;    // DATPACK
            using DATMPX = Field<12, 2>;    // DATMPX
            using CHINSEL = Field<8, 1>;    // CHINSEL
            using CHEN = Field<7, 1>;    // CHEN
            using CKABEN = Field<6, 1>;    // CKABEN
            using SCDEN = Field<5, 1>;    // SCDEN
            using SPICKSEL = Field<2, 2>;    // SPICKSEL
            using SITP = Field<0, 2>;    // SITP
        };

        // CHCFG5R2
        struct CHCFG5R2 : public Register<0x400160a4> {
            using OFFSET = Field<8, 24>;    // OFFSET
            using DTRBS = Field<3, 5>;    // DTRBS
        };

        // AWSCD5R
        struct AWSCD5R : public Register<0x400160a8> {
            using AWFORD = Field<22, 2>;    // AWFORD
            using AWFOSR = Field<16, 5>;    // AWFOSR
            using BKSCD = Field<12, 4>;    // BKSCD
            using SCDT = Field<0, 8>;    // SCDT
        };

        // CHWDAT5R
        struct CHWDAT5R : public Register<0x400160ac> {
            using WDATA = Field<0, 16>;    // WDATA
        };

        // CHDATIN5R
        struct CHDATIN5R : public Register<0x400160b0> {
            using INDAT1 = Field<16, 16>;    // INDAT1
            using INDAT0 = Field<0, 16>;    // INDAT0
        };

        // CHCFG6R1
        struct CHCFG6R1 : public Register<0x400160c0> {
            using DATPACK = Field<14, 2>;    // DATPACK
            using DATMPX = Field<12, 2>;    // DATMPX
            using CHINSEL = Field<8, 1>;    // CHINSEL
            using CHEN = Field<7, 1>;    // CHEN
            using CKABEN = Field<6, 1>;    // CKABEN
            using SCDEN = Field<5, 1>;    // SCDEN
            using SPICKSEL = Field<2, 2>;    // SPICKSEL
            using SITP = Field<0, 2>;    // SITP
        };

        // CHCFG6R2
        struct CHCFG6R2 : public Register<0x400160c4> {
            using OFFSET = Field<8, 24>;    // OFFSET
            using DTRBS = Field<3, 5>;    // DTRBS
        };

        // AWSCD6R
        struct AWSCD6R : public Register<0x400160c8> {
            using AWFORD = Field<22, 2>;    // AWFORD
            using AWFOSR = Field<16, 5>;    // AWFOSR
            using BKSCD = Field<12, 4>;    // BKSCD
            using SCDT = Field<0, 8>;    // SCDT
        };

        // CHWDAT6R
        struct CHWDAT6R : public Register<0x400160cc> {
            using WDATA = Field<0, 16>;    // WDATA
        };

        // CHDATIN6R
        struct CHDATIN6R : public Register<0x400160d0> {
            using INDAT1 = Field<16, 16>;    // INDAT1
            using INDAT0 = Field<0, 16>;    // INDAT0
        };

        // CHCFG7R1
        struct CHCFG7R1 : public Register<0x400160e0> {
            using DATPACK = Field<14, 2>;    // DATPACK
            using DATMPX = Field<12, 2>;    // DATMPX
            using CHINSEL = Field<8, 1>;    // CHINSEL
            using CHEN = Field<7, 1>;    // CHEN
            using CKABEN = Field<6, 1>;    // CKABEN
            using SCDEN = Field<5, 1>;    // SCDEN
            using SPICKSEL = Field<2, 2>;    // SPICKSEL
            using SITP = Field<0, 2>;    // SITP
        };

        // CHCFG7R2
        struct CHCFG7R2 : public Register<0x400160e4> {
            using OFFSET = Field<8, 24>;    // OFFSET
            using DTRBS = Field<3, 5>;    // DTRBS
        };

        // AWSCD7R
        struct AWSCD7R : public Register<0x400160e8> {
            using AWFORD = Field<22, 2>;    // AWFORD
            using AWFOSR = Field<16, 5>;    // AWFOSR
            using BKSCD = Field<12, 4>;    // BKSCD
            using SCDT = Field<0, 8>;    // SCDT
        };

        // CHWDAT7R
        struct CHWDAT7R : public Register<0x400160ec> {
            using WDATA = Field<0, 16>;    // WDATA
        };

        // CHDATIN7R
        struct CHDATIN7R : public Register<0x400160f0> {
            using INDAT1 = Field<16, 16>;    // INDAT1
            using INDAT0 = Field<0, 16>;    // INDAT0
        };

        // control register 1
        struct DFSDM0_CR1 : public Register<0x40016100> {
            using AWFSEL = Field<30, 1>;    // Analog watchdog fast mode select
            using FAST = Field<29, 1>;    // Fast conversion mode selection for regular conversions
            using RCH = Field<24, 3>;    // Regular channel selection
            using RDMAEN = Field<21, 1>;    // DMA channel enabled to read data for the regular conversion
            using RSYNC = Field<19, 1>;    // Launch regular conversion synchronously with DFSDM0
            using RCONT = Field<18, 1>;    // Continuous mode selection for regular conversions
            using RSWSTART = Field<17, 1>;    // Software start of a conversion on the regular channel
            using JEXTEN = Field<13, 2>;    // Trigger enable and trigger edge selection for injected conversions
            using JEXTSEL = Field<8, 3>;    // Trigger signal selection for launching injected conversions
            using JDMAEN = Field<5, 1>;    // DMA channel enabled to read data for the injected channel group
            using JSCAN = Field<4, 1>;    // Scanning conversion mode for injected conversions
            using JSYNC = Field<3, 1>;    // Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
            using JSWSTART = Field<1, 1>;    // Start a conversion of the injected group of channels
            using DFEN = Field<0, 1>;    // DFSDM enable
        };

        // control register 2
        struct DFSDM0_CR2 : public Register<0x40016104> {
            using AWDCH = Field<16, 8>;    // Analog watchdog channel selection
            using EXCH = Field<8, 8>;    // Extremes detector channel selection
            using CKABIE = Field<6, 1>;    // Clock absence interrupt enable
            using SCDIE = Field<5, 1>;    // Short-circuit detector interrupt enable
            using AWDIE = Field<4, 1>;    // Analog watchdog interrupt enable
            using ROVRIE = Field<3, 1>;    // Regular data overrun interrupt enable
            using JOVRIE = Field<2, 1>;    // Injected data overrun interrupt enable
            using REOCIE = Field<1, 1>;    // Regular end of conversion interrupt enable
            using JEOCIE = Field<0, 1>;    // Injected end of conversion interrupt enable
        };

        // interrupt and status register
        struct DFSDM0_ISR : public RegisterReadOnly<0x40016108> {
            using SCDF = Field<24, 8>;    // short-circuit detector flag
            using CKABF = Field<16, 8>;    // Clock absence flag
            using RCIP = Field<14, 1>;    // Regular conversion in progress status
            using JCIP = Field<13, 1>;    // Injected conversion in progress status
            using AWDF = Field<4, 1>;    // Analog watchdog
            using ROVRF = Field<3, 1>;    // Regular conversion overrun flag
            using JOVRF = Field<2, 1>;    // Injected conversion overrun flag
            using REOCF = Field<1, 1>;    // End of regular conversion flag
            using JEOCF = Field<0, 1>;    // End of injected conversion flag
        };

        // interrupt flag clear register
        struct DFSDM0_ICR : public Register<0x4001610c> {
            using CLRSCDF = Field<24, 8>;    // Clear the short-circuit detector flag
            using CLRCKABF = Field<16, 8>;    // Clear the clock absence flag
            using CLRROVRF = Field<3, 1>;    // Clear the regular conversion overrun flag
            using CLRJOVRF = Field<2, 1>;    // Clear the injected conversion overrun flag
        };

        // injected channel group selection register
        struct DFSDM0_JCHGR : public Register<0x40016110> {
            using JCHG = Field<0, 8>;    // Injected channel group selection
        };

        // filter control register
        struct DFSDM0_FCR : public Register<0x40016114> {
            using FORD = Field<29, 3>;    // Sinc filter order
            using FOSR = Field<16, 10>;    // Sinc filter oversampling ratio (decimation rate)
            using IOSR = Field<0, 8>;    // Integrator oversampling ratio (averaging length)
        };

        // data register for injected group
        struct DFSDM0_JDATAR : public RegisterReadOnly<0x40016118> {
            using JDATA = Field<8, 24>;    // Injected group conversion data
            using JDATACH = Field<0, 3>;    // Injected channel most recently converted
        };

        // data register for the regular channel
        struct DFSDM0_RDATAR : public RegisterReadOnly<0x4001611c> {
            using RDATA = Field<8, 24>;    // Regular channel conversion data
            using RPEND = Field<4, 1>;    // Regular channel pending data
            using RDATACH = Field<0, 3>;    // Regular channel most recently converted
        };

        // analog watchdog high threshold register
        struct DFSDM0_AWHTR : public Register<0x40016120> {
            using AWHT = Field<8, 24>;    // Analog watchdog high threshold
            using BKAWH = Field<0, 4>;    // Break signal assignment to analog watchdog high threshold event
        };

        // analog watchdog low threshold register
        struct DFSDM0_AWLTR : public Register<0x40016124> {
            using AWLT = Field<8, 24>;    // Analog watchdog low threshold
            using BKAWL = Field<0, 4>;    // Break signal assignment to analog watchdog low threshold event
        };

        // analog watchdog status register
        struct DFSDM0_AWSR : public RegisterReadOnly<0x40016128> {
            using AWHTF = Field<8, 8>;    // Analog watchdog high threshold flag
            using AWLTF = Field<0, 8>;    // Analog watchdog low threshold flag
        };

        // analog watchdog clear flag register
        struct DFSDM0_AWCFR : public Register<0x4001612c> {
            using CLRAWHTF = Field<8, 8>;    // Clear the analog watchdog high threshold flag
            using CLRAWLTF = Field<0, 8>;    // Clear the analog watchdog low threshold flag
        };

        // Extremes detector maximum register
        struct DFSDM0_EXMAX : public RegisterReadOnly<0x40016130> {
            using EXMAX = Field<8, 24>;    // Extremes detector maximum value
            using EXMAXCH = Field<0, 3>;    // Extremes detector maximum data channel
        };

        // Extremes detector minimum register
        struct DFSDM0_EXMIN : public RegisterReadOnly<0x40016134> {
            using EXMIN = Field<8, 24>;    // EXMIN
            using EXMINCH = Field<0, 3>;    // Extremes detector minimum data channel
        };

        // conversion timer register
        struct DFSDM0_CNVTIMR : public RegisterReadOnly<0x40016138> {
            using CNVCNT = Field<4, 28>;    // 28-bit timer counting conversion time t = CNVCNT[27:0] / fDFSDM_CKIN
        };

        // control register 1
        struct DFSDM1_CR1 : public Register<0x40016200> {
            using AWFSEL = Field<30, 1>;    // Analog watchdog fast mode select
            using FAST = Field<29, 1>;    // Fast conversion mode selection for regular conversions
            using RCH = Field<24, 3>;    // Regular channel selection
            using RDMAEN = Field<21, 1>;    // DMA channel enabled to read data for the regular conversion
            using RSYNC = Field<19, 1>;    // Launch regular conversion synchronously with DFSDM0
            using RCONT = Field<18, 1>;    // Continuous mode selection for regular conversions
            using RSWSTART = Field<17, 1>;    // Software start of a conversion on the regular channel
            using JEXTEN = Field<13, 2>;    // Trigger enable and trigger edge selection for injected conversions
            using JEXTSEL = Field<8, 3>;    // Trigger signal selection for launching injected conversions
            using JDMAEN = Field<5, 1>;    // DMA channel enabled to read data for the injected channel group
            using JSCAN = Field<4, 1>;    // Scanning conversion mode for injected conversions
            using JSYNC = Field<3, 1>;    // Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
            using JSWSTART = Field<1, 1>;    // Start a conversion of the injected group of channels
            using DFEN = Field<0, 1>;    // DFSDM enable
        };

        // control register 2
        struct DFSDM1_CR2 : public Register<0x40016204> {
            using AWDCH = Field<16, 8>;    // Analog watchdog channel selection
            using EXCH = Field<8, 8>;    // Extremes detector channel selection
            using CKABIE = Field<6, 1>;    // Clock absence interrupt enable
            using SCDIE = Field<5, 1>;    // Short-circuit detector interrupt enable
            using AWDIE = Field<4, 1>;    // Analog watchdog interrupt enable
            using ROVRIE = Field<3, 1>;    // Regular data overrun interrupt enable
            using JOVRIE = Field<2, 1>;    // Injected data overrun interrupt enable
            using REOCIE = Field<1, 1>;    // Regular end of conversion interrupt enable
            using JEOCIE = Field<0, 1>;    // Injected end of conversion interrupt enable
        };

        // interrupt and status register
        struct DFSDM1_ISR : public RegisterReadOnly<0x40016208> {
            using SCDF = Field<24, 8>;    // short-circuit detector flag
            using CKABF = Field<16, 8>;    // Clock absence flag
            using RCIP = Field<14, 1>;    // Regular conversion in progress status
            using JCIP = Field<13, 1>;    // Injected conversion in progress status
            using AWDF = Field<4, 1>;    // Analog watchdog
            using ROVRF = Field<3, 1>;    // Regular conversion overrun flag
            using JOVRF = Field<2, 1>;    // Injected conversion overrun flag
            using REOCF = Field<1, 1>;    // End of regular conversion flag
            using JEOCF = Field<0, 1>;    // End of injected conversion flag
        };

        // interrupt flag clear register
        struct DFSDM1_ICR : public Register<0x4001620c> {
            using CLRSCDF = Field<24, 8>;    // Clear the short-circuit detector flag
            using CLRCKABF = Field<16, 8>;    // Clear the clock absence flag
            using CLRROVRF = Field<3, 1>;    // Clear the regular conversion overrun flag
            using CLRJOVRF = Field<2, 1>;    // Clear the injected conversion overrun flag
        };

        // injected channel group selection register
        struct DFSDM1_JCHGR : public Register<0x40016210> {
            using JCHG = Field<0, 8>;    // Injected channel group selection
        };

        // filter control register
        struct DFSDM1_FCR : public Register<0x40016214> {
            using FORD = Field<29, 3>;    // Sinc filter order
            using FOSR = Field<16, 10>;    // Sinc filter oversampling ratio (decimation rate)
            using IOSR = Field<0, 8>;    // Integrator oversampling ratio (averaging length)
        };

        // data register for injected group
        struct DFSDM1_JDATAR : public RegisterReadOnly<0x40016218> {
            using JDATA = Field<8, 24>;    // Injected group conversion data
            using JDATACH = Field<0, 3>;    // Injected channel most recently converted
        };

        // data register for the regular channel
        struct DFSDM1_RDATAR : public RegisterReadOnly<0x4001621c> {
            using RDATA = Field<8, 24>;    // Regular channel conversion data
            using RPEND = Field<4, 1>;    // Regular channel pending data
            using RDATACH = Field<0, 3>;    // Regular channel most recently converted
        };

        // analog watchdog high threshold register
        struct DFSDM1_AWHTR : public Register<0x40016220> {
            using AWHT = Field<8, 24>;    // Analog watchdog high threshold
            using BKAWH = Field<0, 4>;    // Break signal assignment to analog watchdog high threshold event
        };

        // analog watchdog low threshold register
        struct DFSDM1_AWLTR : public Register<0x40016224> {
            using AWLT = Field<8, 24>;    // Analog watchdog low threshold
            using BKAWL = Field<0, 4>;    // Break signal assignment to analog watchdog low threshold event
        };

        // analog watchdog status register
        struct DFSDM1_AWSR : public RegisterReadOnly<0x40016228> {
            using AWHTF = Field<8, 8>;    // Analog watchdog high threshold flag
            using AWLTF = Field<0, 8>;    // Analog watchdog low threshold flag
        };

        // analog watchdog clear flag register
        struct DFSDM1_AWCFR : public Register<0x4001622c> {
            using CLRAWHTF = Field<8, 8>;    // Clear the analog watchdog high threshold flag
            using CLRAWLTF = Field<0, 8>;    // Clear the analog watchdog low threshold flag
        };

        // Extremes detector maximum register
        struct DFSDM1_EXMAX : public RegisterReadOnly<0x40016230> {
            using EXMAX = Field<8, 24>;    // Extremes detector maximum value
            using EXMAXCH = Field<0, 3>;    // Extremes detector maximum data channel
        };

        // Extremes detector minimum register
        struct DFSDM1_EXMIN : public RegisterReadOnly<0x40016234> {
            using EXMIN = Field<8, 24>;    // EXMIN
            using EXMINCH = Field<0, 3>;    // Extremes detector minimum data channel
        };

        // conversion timer register
        struct DFSDM1_CNVTIMR : public RegisterReadOnly<0x40016238> {
            using CNVCNT = Field<4, 28>;    // 28-bit timer counting conversion time t = CNVCNT[27:0] / fDFSDM_CKIN
        };

        // control register 1
        struct DFSDM2_CR1 : public Register<0x40016300> {
            using AWFSEL = Field<30, 1>;    // Analog watchdog fast mode select
            using FAST = Field<29, 1>;    // Fast conversion mode selection for regular conversions
            using RCH = Field<24, 3>;    // Regular channel selection
            using RDMAEN = Field<21, 1>;    // DMA channel enabled to read data for the regular conversion
            using RSYNC = Field<19, 1>;    // Launch regular conversion synchronously with DFSDM0
            using RCONT = Field<18, 1>;    // Continuous mode selection for regular conversions
            using RSWSTART = Field<17, 1>;    // Software start of a conversion on the regular channel
            using JEXTEN = Field<13, 2>;    // Trigger enable and trigger edge selection for injected conversions
            using JEXTSEL = Field<8, 3>;    // Trigger signal selection for launching injected conversions
            using JDMAEN = Field<5, 1>;    // DMA channel enabled to read data for the injected channel group
            using JSCAN = Field<4, 1>;    // Scanning conversion mode for injected conversions
            using JSYNC = Field<3, 1>;    // Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
            using JSWSTART = Field<1, 1>;    // Start a conversion of the injected group of channels
            using DFEN = Field<0, 1>;    // DFSDM enable
        };

        // control register 2
        struct DFSDM2_CR2 : public Register<0x40016304> {
            using AWDCH = Field<16, 8>;    // Analog watchdog channel selection
            using EXCH = Field<8, 8>;    // Extremes detector channel selection
            using CKABIE = Field<6, 1>;    // Clock absence interrupt enable
            using SCDIE = Field<5, 1>;    // Short-circuit detector interrupt enable
            using AWDIE = Field<4, 1>;    // Analog watchdog interrupt enable
            using ROVRIE = Field<3, 1>;    // Regular data overrun interrupt enable
            using JOVRIE = Field<2, 1>;    // Injected data overrun interrupt enable
            using REOCIE = Field<1, 1>;    // Regular end of conversion interrupt enable
            using JEOCIE = Field<0, 1>;    // Injected end of conversion interrupt enable
        };

        // interrupt and status register
        struct DFSDM2_ISR : public RegisterReadOnly<0x40016308> {
            using SCDF = Field<24, 8>;    // short-circuit detector flag
            using CKABF = Field<16, 8>;    // Clock absence flag
            using RCIP = Field<14, 1>;    // Regular conversion in progress status
            using JCIP = Field<13, 1>;    // Injected conversion in progress status
            using AWDF = Field<4, 1>;    // Analog watchdog
            using ROVRF = Field<3, 1>;    // Regular conversion overrun flag
            using JOVRF = Field<2, 1>;    // Injected conversion overrun flag
            using REOCF = Field<1, 1>;    // End of regular conversion flag
            using JEOCF = Field<0, 1>;    // End of injected conversion flag
        };

        // interrupt flag clear register
        struct DFSDM2_ICR : public Register<0x4001630c> {
            using CLRSCDF = Field<24, 8>;    // Clear the short-circuit detector flag
            using CLRCKABF = Field<16, 8>;    // Clear the clock absence flag
            using CLRROVRF = Field<3, 1>;    // Clear the regular conversion overrun flag
            using CLRJOVRF = Field<2, 1>;    // Clear the injected conversion overrun flag
        };

        // injected channel group selection register
        struct DFSDM2_JCHGR : public Register<0x40016310> {
            using JCHG = Field<0, 8>;    // Injected channel group selection
        };

        // filter control register
        struct DFSDM2_FCR : public Register<0x40016314> {
            using FORD = Field<29, 3>;    // Sinc filter order
            using FOSR = Field<16, 10>;    // Sinc filter oversampling ratio (decimation rate)
            using IOSR = Field<0, 8>;    // Integrator oversampling ratio (averaging length)
        };

        // data register for injected group
        struct DFSDM2_JDATAR : public RegisterReadOnly<0x40016318> {
            using JDATA = Field<8, 24>;    // Injected group conversion data
            using JDATACH = Field<0, 3>;    // Injected channel most recently converted
        };

        // data register for the regular channel
        struct DFSDM2_RDATAR : public RegisterReadOnly<0x4001631c> {
            using RDATA = Field<8, 24>;    // Regular channel conversion data
            using RPEND = Field<4, 1>;    // Regular channel pending data
            using RDATACH = Field<0, 3>;    // Regular channel most recently converted
        };

        // analog watchdog high threshold register
        struct DFSDM2_AWHTR : public Register<0x40016320> {
            using AWHT = Field<8, 24>;    // Analog watchdog high threshold
            using BKAWH = Field<0, 4>;    // Break signal assignment to analog watchdog high threshold event
        };

        // analog watchdog low threshold register
        struct DFSDM2_AWLTR : public Register<0x40016324> {
            using AWLT = Field<8, 24>;    // Analog watchdog low threshold
            using BKAWL = Field<0, 4>;    // Break signal assignment to analog watchdog low threshold event
        };

        // analog watchdog status register
        struct DFSDM2_AWSR : public RegisterReadOnly<0x40016328> {
            using AWHTF = Field<8, 8>;    // Analog watchdog high threshold flag
            using AWLTF = Field<0, 8>;    // Analog watchdog low threshold flag
        };

        // analog watchdog clear flag register
        struct DFSDM2_AWCFR : public Register<0x4001632c> {
            using CLRAWHTF = Field<8, 8>;    // Clear the analog watchdog high threshold flag
            using CLRAWLTF = Field<0, 8>;    // Clear the analog watchdog low threshold flag
        };

        // Extremes detector maximum register
        struct DFSDM2_EXMAX : public RegisterReadOnly<0x40016330> {
            using EXMAX = Field<8, 24>;    // Extremes detector maximum value
            using EXMAXCH = Field<0, 3>;    // Extremes detector maximum data channel
        };

        // Extremes detector minimum register
        struct DFSDM2_EXMIN : public RegisterReadOnly<0x40016334> {
            using EXMIN = Field<8, 24>;    // EXMIN
            using EXMINCH = Field<0, 3>;    // Extremes detector minimum data channel
        };

        // conversion timer register
        struct DFSDM2_CNVTIMR : public RegisterReadOnly<0x40016338> {
            using CNVCNT = Field<4, 28>;    // 28-bit timer counting conversion time t = CNVCNT[27:0] / fDFSDM_CKIN
        };

        // control register 1
        struct DFSDM3_CR1 : public Register<0x40016400> {
            using AWFSEL = Field<30, 1>;    // Analog watchdog fast mode select
            using FAST = Field<29, 1>;    // Fast conversion mode selection for regular conversions
            using RCH = Field<24, 3>;    // Regular channel selection
            using RDMAEN = Field<21, 1>;    // DMA channel enabled to read data for the regular conversion
            using RSYNC = Field<19, 1>;    // Launch regular conversion synchronously with DFSDM0
            using RCONT = Field<18, 1>;    // Continuous mode selection for regular conversions
            using RSWSTART = Field<17, 1>;    // Software start of a conversion on the regular channel
            using JEXTEN = Field<13, 2>;    // Trigger enable and trigger edge selection for injected conversions
            using JEXTSEL = Field<8, 3>;    // Trigger signal selection for launching injected conversions
            using JDMAEN = Field<5, 1>;    // DMA channel enabled to read data for the injected channel group
            using JSCAN = Field<4, 1>;    // Scanning conversion mode for injected conversions
            using JSYNC = Field<3, 1>;    // Launch an injected conversion synchronously with the DFSDM0 JSWSTART trigger
            using JSWSTART = Field<1, 1>;    // Start a conversion of the injected group of channels
            using DFEN = Field<0, 1>;    // DFSDM enable
        };

        // control register 2
        struct DFSDM3_CR2 : public Register<0x40016404> {
            using AWDCH = Field<16, 8>;    // Analog watchdog channel selection
            using EXCH = Field<8, 8>;    // Extremes detector channel selection
            using CKABIE = Field<6, 1>;    // Clock absence interrupt enable
            using SCDIE = Field<5, 1>;    // Short-circuit detector interrupt enable
            using AWDIE = Field<4, 1>;    // Analog watchdog interrupt enable
            using ROVRIE = Field<3, 1>;    // Regular data overrun interrupt enable
            using JOVRIE = Field<2, 1>;    // Injected data overrun interrupt enable
            using REOCIE = Field<1, 1>;    // Regular end of conversion interrupt enable
            using JEOCIE = Field<0, 1>;    // Injected end of conversion interrupt enable
        };

        // interrupt and status register
        struct DFSDM3_ISR : public RegisterReadOnly<0x40016408> {
            using SCDF = Field<24, 8>;    // short-circuit detector flag
            using CKABF = Field<16, 8>;    // Clock absence flag
            using RCIP = Field<14, 1>;    // Regular conversion in progress status
            using JCIP = Field<13, 1>;    // Injected conversion in progress status
            using AWDF = Field<4, 1>;    // Analog watchdog
            using ROVRF = Field<3, 1>;    // Regular conversion overrun flag
            using JOVRF = Field<2, 1>;    // Injected conversion overrun flag
            using REOCF = Field<1, 1>;    // End of regular conversion flag
            using JEOCF = Field<0, 1>;    // End of injected conversion flag
        };

        // interrupt flag clear register
        struct DFSDM3_ICR : public Register<0x4001640c> {
            using CLRSCDF = Field<24, 8>;    // Clear the short-circuit detector flag
            using CLRCKABF = Field<16, 8>;    // Clear the clock absence flag
            using CLRROVRF = Field<3, 1>;    // Clear the regular conversion overrun flag
            using CLRJOVRF = Field<2, 1>;    // Clear the injected conversion overrun flag
        };

        // injected channel group selection register
        struct DFSDM3_JCHGR : public Register<0x40016410> {
            using JCHG = Field<0, 8>;    // Injected channel group selection
        };

        // filter control register
        struct DFSDM3_FCR : public Register<0x40016414> {
            using FORD = Field<29, 3>;    // Sinc filter order
            using FOSR = Field<16, 10>;    // Sinc filter oversampling ratio (decimation rate)
            using IOSR = Field<0, 8>;    // Integrator oversampling ratio (averaging length)
        };

        // data register for injected group
        struct DFSDM3_JDATAR : public RegisterReadOnly<0x40016418> {
            using JDATA = Field<8, 24>;    // Injected group conversion data
            using JDATACH = Field<0, 3>;    // Injected channel most recently converted
        };

        // data register for the regular channel
        struct DFSDM3_RDATAR : public RegisterReadOnly<0x4001641c> {
            using RDATA = Field<8, 24>;    // Regular channel conversion data
            using RPEND = Field<4, 1>;    // Regular channel pending data
            using RDATACH = Field<0, 3>;    // Regular channel most recently converted
        };

        // analog watchdog high threshold register
        struct DFSDM3_AWHTR : public Register<0x40016420> {
            using AWHT = Field<8, 24>;    // Analog watchdog high threshold
            using BKAWH = Field<0, 4>;    // Break signal assignment to analog watchdog high threshold event
        };

        // analog watchdog low threshold register
        struct DFSDM3_AWLTR : public Register<0x40016424> {
            using AWLT = Field<8, 24>;    // Analog watchdog low threshold
            using BKAWL = Field<0, 4>;    // Break signal assignment to analog watchdog low threshold event
        };

        // analog watchdog status register
        struct DFSDM3_AWSR : public RegisterReadOnly<0x40016428> {
            using AWHTF = Field<8, 8>;    // Analog watchdog high threshold flag
            using AWLTF = Field<0, 8>;    // Analog watchdog low threshold flag
        };

        // analog watchdog clear flag register
        struct DFSDM3_AWCFR : public Register<0x4001642c> {
            using CLRAWHTF = Field<8, 8>;    // Clear the analog watchdog high threshold flag
            using CLRAWLTF = Field<0, 8>;    // Clear the analog watchdog low threshold flag
        };

        // Extremes detector maximum register
        struct DFSDM3_EXMAX : public RegisterReadOnly<0x40016430> {
            using EXMAX = Field<8, 24>;    // Extremes detector maximum value
            using EXMAXCH = Field<0, 3>;    // Extremes detector maximum data channel
        };

        // Extremes detector minimum register
        struct DFSDM3_EXMIN : public RegisterReadOnly<0x40016434> {
            using EXMIN = Field<8, 24>;    // EXMIN
            using EXMINCH = Field<0, 3>;    // Extremes detector minimum data channel
        };

        // conversion timer register
        struct DFSDM3_CNVTIMR : public RegisterReadOnly<0x40016438> {
            using CNVCNT = Field<4, 28>;    // 28-bit timer counting conversion time t = CNVCNT[27:0] / fDFSDM_CKIN
        };

    };

    // QuadSPI interface
    struct QUADSPI {
        // control register
        struct CR : public Register<0xa0001000> {
            using PRESCALER = Field<24, 8>;    // Clock prescaler
            using PMM = Field<23, 1>;    // Polling match mode
            using APMS = Field<22, 1>;    // Automatic poll mode stop
            using TOIE = Field<20, 1>;    // TimeOut interrupt enable
            using SMIE = Field<19, 1>;    // Status match interrupt enable
            using FTIE = Field<18, 1>;    // FIFO threshold interrupt enable
            using TCIE = Field<17, 1>;    // Transfer complete interrupt enable
            using TEIE = Field<16, 1>;    // Transfer error interrupt enable
            using FTHRES = Field<8, 5>;    // IFO threshold level
            using FSEL = Field<7, 1>;    // FLASH memory selection
            using DFM = Field<6, 1>;    // Dual-flash mode
            using SSHIFT = Field<4, 1>;    // Sample shift
            using TCEN = Field<3, 1>;    // Timeout counter enable
            using DMAEN = Field<2, 1>;    // DMA enable
            using ABORT = Field<1, 1>;    // Abort request
            using EN = Field<0, 1>;    // Enable
        };

        // device configuration register
        struct DCR : public Register<0xa0001004> {
            using FSIZE = Field<16, 5>;    // FLASH memory size
            using CSHT = Field<8, 3>;    // Chip select high time
            using CKMODE = Field<0, 1>;    // Mode 0 / mode 3
        };

        // status register
        struct SR : public RegisterReadOnly<0xa0001008> {
            using FLEVEL = Field<8, 7>;    // FIFO level
            using BUSY = Field<5, 1>;    // Busy
            using TOF = Field<4, 1>;    // Timeout flag
            using SMF = Field<3, 1>;    // Status match flag
            using FTF = Field<2, 1>;    // FIFO threshold flag
            using TCF = Field<1, 1>;    // Transfer complete flag
            using TEF = Field<0, 1>;    // Transfer error flag
        };

        // flag clear register
        struct FCR : public Register<0xa000100c> {
            using CTOF = Field<4, 1>;    // Clear timeout flag
            using CSMF = Field<3, 1>;    // Clear status match flag
            using CTCF = Field<1, 1>;    // Clear transfer complete flag
            using CTEF = Field<0, 1>;    // Clear transfer error flag
        };

        // data length register
        struct DLR : public Register<0xa0001010> {
            using DL = Field<0, 32>;    // Data length
        };

        // communication configuration register
        struct CCR : public Register<0xa0001014> {
            using DDRM = Field<31, 1>;    // Double data rate mode
            using DHHC = Field<30, 1>;    // DDR hold half cycle
            using SIOO = Field<28, 1>;    // Send instruction only once mode
            using FMODE = Field<26, 2>;    // Functional mode
            using DMODE = Field<24, 2>;    // Data mode
            using DCYC = Field<18, 5>;    // Number of dummy cycles
            using ABSIZE = Field<16, 2>;    // Alternate bytes size
            using ABMODE = Field<14, 2>;    // Alternate bytes mode
            using ADSIZE = Field<12, 2>;    // Address size
            using ADMODE = Field<10, 2>;    // Address mode
            using IMODE = Field<8, 2>;    // Instruction mode
            using INSTRUCTION = Field<0, 8>;    // Instruction
        };

        // address register
        struct AR : public Register<0xa0001018> {
            using ADDRESS = Field<0, 32>;    // Address
        };

        // ABR
        struct ABR : public Register<0xa000101c> {
            using ALTERNATE = Field<0, 32>;    // ALTERNATE
        };

        // data register
        struct DR : public Register<0xa0001020> {
            using DATA = Field<0, 32>;    // Data
        };

        // polling status mask register
        struct PSMKR : public Register<0xa0001024> {
            using MASK = Field<0, 32>;    // Status mask
        };

        // polling status match register
        struct PSMAR : public Register<0xa0001028> {
            using MATCH = Field<0, 32>;    // Status match
        };

        // polling interval register
        struct PIR : public Register<0xa000102c> {
            using INTERVAL = Field<0, 16>;    // Polling interval
        };

        // low-power timeout register
        struct LPTR : public Register<0xa0001030> {
            using TIMEOUT = Field<0, 16>;    // Timeout period
        };

    };

    // MCU debug component
    struct DBGMCU {
        // DBGMCU_IDCODE
        struct IDCODE : public RegisterReadOnly<0xe0042000> {
            using DEV_ID = Field<0, 12>;    // Device identifier
            using REV_ID = Field<16, 16>;    // Revision identifie
        };

        // Debug MCU configuration register
        struct CR : public Register<0xe0042004> {
            using DBG_SLEEP = Field<0, 1>;    // Debug Sleep mode
            using DBG_STOP = Field<1, 1>;    // Debug Stop mode
            using DBG_STANDBY = Field<2, 1>;    // Debug Standby mode
            using TRACE_IOEN = Field<5, 1>;    // Trace pin assignment control
            using TRACE_MODE = Field<6, 2>;    // Trace pin assignment control
        };

        // Debug MCU APB1 freeze register1
        struct APB1FZR1 : public Register<0xe0042008> {
            using DBG_TIM2_STOP = Field<0, 1>;    // TIM2 counter stopped when core is halted
            using DBG_TIM6_STOP = Field<4, 1>;    // TIM6 counter stopped when core is halted
            using DBG_TIM7_STOP = Field<5, 1>;    // TIM7 counter stopped when core is halted
            using DBG_RTC_STOP = Field<10, 1>;    // RTC counter stopped when core is halted
            using DBG_WWDG_STOP = Field<11, 1>;    // Window watchdog counter stopped when core is halted
            using DBG_IWDG_STOP = Field<12, 1>;    // Independent watchdog counter stopped when core is halted
            using DBG_I2C1_STOP = Field<21, 1>;    // I2C1 SMBUS timeout counter stopped when core is halted
            using DBG_I2C2_STOP = Field<22, 1>;    // I2C2 SMBUS timeout counter stopped when core is halted
            using DBG_I2C3_STOP = Field<23, 1>;    // I2C3 SMBUS timeout counter stopped when core is halted
            using DBG_CAN_STOP = Field<25, 1>;    // bxCAN stopped when core is halted
            using DBG_LPTIM1_STOP = Field<31, 1>;    // LPTIM1 counter stopped when core is halted
        };

        // Debug MCU APB1 freeze register 2
        struct APB1FZR2 : public Register<0xe004200c> {
            using DBG_LPTIM2_STOP = Field<5, 1>;    // LPTIM2 counter stopped when core is halted
        };

        // Debug MCU APB2 freeze register
        struct APB2FZR : public Register<0xe0042010> {
            using DBG_TIM1_STOP = Field<11, 1>;    // TIM1 counter stopped when core is halted
            using DBG_TIM15_STOP = Field<16, 1>;    // TIM15 counter stopped when core is halted
            using DBG_TIM16_STOP = Field<17, 1>;    // TIM16 counter stopped when core is halted
        };

    };

    // Floting point unit
    struct FPU {
        // Floating-point context control register
        struct FPCCR : public Register<0xe000ef34> {
            using LSPACT = Field<0, 1>;    // LSPACT
            using USER = Field<1, 1>;    // USER
            using THREAD = Field<3, 1>;    // THREAD
            using HFRDY = Field<4, 1>;    // HFRDY
            using MMRDY = Field<5, 1>;    // MMRDY
            using BFRDY = Field<6, 1>;    // BFRDY
            using MONRDY = Field<8, 1>;    // MONRDY
            using LSPEN = Field<30, 1>;    // LSPEN
            using ASPEN = Field<31, 1>;    // ASPEN
        };

        // Floating-point context address register
        struct FPCAR : public Register<0xe000ef38> {
            using ADDRESS = Field<3, 29>;    // Location of unpopulated floating-point
        };

        // Floating-point status control register
        struct FPSCR : public Register<0xe000ef3c> {
            using IOC = Field<0, 1>;    // Invalid operation cumulative exception bit
            using DZC = Field<1, 1>;    // Division by zero cumulative exception bit.
            using OFC = Field<2, 1>;    // Overflow cumulative exception bit
            using UFC = Field<3, 1>;    // Underflow cumulative exception bit
            using IXC = Field<4, 1>;    // Inexact cumulative exception bit
            using IDC = Field<7, 1>;    // Input denormal cumulative exception bit.
            using RMode = Field<22, 2>;    // Rounding Mode control field
            using FZ = Field<24, 1>;    // Flush-to-zero mode control bit:
            using DN = Field<25, 1>;    // Default NaN mode control bit
            using AHP = Field<26, 1>;    // Alternative half-precision control bit
            using V = Field<28, 1>;    // Overflow condition code flag
            using C = Field<29, 1>;    // Carry condition code flag
            using Z = Field<30, 1>;    // Zero condition code flag
            using N = Field<31, 1>;    // Negative condition code flag
        };

    };

    // Memory protection unit
    struct MPU {
        // MPU type register
        struct MPU_TYPER : public RegisterReadOnly<0xe000ed90> {
            using SEPARATE = Field<0, 1>;    // Separate flag
            using DREGION = Field<8, 8>;    // Number of MPU data regions
            using IREGION = Field<16, 8>;    // Number of MPU instruction regions
        };

        // MPU control register
        struct MPU_CTRL : public RegisterReadOnly<0xe000ed94> {
            using ENABLE = Field<0, 1>;    // Enables the MPU
            using HFNMIENA = Field<1, 1>;    // Enables the operation of MPU during hard fault
            using PRIVDEFENA = Field<2, 1>;    // Enable priviliged software access to default memory map
        };

        // MPU region number register
        struct MPU_RNR : public Register<0xe000ed98> {
            using REGION = Field<0, 8>;    // MPU region
        };

        // MPU region base address register
        struct MPU_RBAR : public Register<0xe000ed9c> {
            using REGION = Field<0, 4>;    // MPU region field
            using VALID = Field<4, 1>;    // MPU region number valid
            using ADDR = Field<5, 27>;    // Region base address field
        };

        // MPU region attribute and size register
        struct MPU_RASR : public Register<0xe000eda0> {
            using ENABLE = Field<0, 1>;    // Region enable bit.
            using SIZE = Field<1, 5>;    // Size of the MPU protection region
            using SRD = Field<8, 8>;    // Subregion disable bits
            using B = Field<16, 1>;    // memory attribute
            using C = Field<17, 1>;    // memory attribute
            using S = Field<18, 1>;    // Shareable memory attribute
            using TEX = Field<19, 3>;    // memory attribute
            using AP = Field<24, 3>;    // Access permission
            using XN = Field<28, 1>;    // Instruction access disable bit
        };

    };

    // SysTick timer
    struct STK {
        // SysTick control and status register
        struct CTRL : public Register<0xe000e010> {
            using ENABLE = Field<0, 1>;    // Counter enable
            using TICKINT = Field<1, 1>;    // SysTick exception request enable
            using CLKSOURCE = Field<2, 1>;    // Clock source selection
            using COUNTFLAG = Field<16, 1>;    // COUNTFLAG
        };

        // SysTick reload value register
        struct LOAD : public Register<0xe000e014> {
            using RELOAD = Field<0, 24>;    // RELOAD value
        };

        // SysTick current value register
        struct VAL : public Register<0xe000e018> {
            using CURRENT = Field<0, 24>;    // Current counter value
        };

        // SysTick calibration value register
        struct CALIB : public Register<0xe000e01c> {
            using TENMS = Field<0, 24>;    // Calibration value
            using SKEW = Field<30, 1>;    // SKEW flag: Indicates whether the TENMS value is exact
            using NOREF = Field<31, 1>;    // NOREF flag. Reads as zero
        };

    };

    // System control block
    struct SCB {
        // CPUID base register
        struct CPUID : public RegisterReadOnly<0xe000ed00> {
            using Revision = Field<0, 4>;    // Revision number
            using PartNo = Field<4, 12>;    // Part number of the processor
            using Constant = Field<16, 4>;    // Reads as 0xF
            using Variant = Field<20, 4>;    // Variant number
            using Implementer = Field<24, 8>;    // Implementer code
        };

        // Interrupt control and state register
        struct ICSR : public Register<0xe000ed04> {
            using VECTACTIVE = Field<0, 9>;    // Active vector
            using RETTOBASE = Field<11, 1>;    // Return to base level
            using VECTPENDING = Field<12, 7>;    // Pending vector
            using ISRPENDING = Field<22, 1>;    // Interrupt pending flag
            using PENDSTCLR = Field<25, 1>;    // SysTick exception clear-pending bit
            using PENDSTSET = Field<26, 1>;    // SysTick exception set-pending bit
            using PENDSVCLR = Field<27, 1>;    // PendSV clear-pending bit
            using PENDSVSET = Field<28, 1>;    // PendSV set-pending bit
            using NMIPENDSET = Field<31, 1>;    // NMI set-pending bit.
        };

        // Vector table offset register
        struct VTOR : public Register<0xe000ed08> {
            using TBLOFF = Field<9, 21>;    // Vector table base offset field
        };

        // Application interrupt and reset control register
        struct AIRCR : public Register<0xe000ed0c> {
            using VECTRESET = Field<0, 1>;    // VECTRESET
            using VECTCLRACTIVE = Field<1, 1>;    // VECTCLRACTIVE
            using SYSRESETREQ = Field<2, 1>;    // SYSRESETREQ
            using PRIGROUP = Field<8, 3>;    // PRIGROUP
            using ENDIANESS = Field<15, 1>;    // ENDIANESS
            using VECTKEYSTAT = Field<16, 16>;    // Register key
        };

        // System control register
        struct SCR : public Register<0xe000ed10> {
            using SLEEPONEXIT = Field<1, 1>;    // SLEEPONEXIT
            using SLEEPDEEP = Field<2, 1>;    // SLEEPDEEP
            using SEVEONPEND = Field<4, 1>;    // Send Event on Pending bit
        };

        // Configuration and control register
        struct CCR : public Register<0xe000ed14> {
            using NONBASETHRDENA = Field<0, 1>;    // Configures how the processor enters Thread mode
            using USERSETMPEND = Field<1, 1>;    // USERSETMPEND
            using UNALIGN__TRP = Field<3, 1>;    // UNALIGN_ TRP
            using DIV_0_TRP = Field<4, 1>;    // DIV_0_TRP
            using BFHFNMIGN = Field<8, 1>;    // BFHFNMIGN
            using STKALIGN = Field<9, 1>;    // STKALIGN
        };

        // System handler priority registers
        struct SHPR1 : public Register<0xe000ed18> {
            using PRI_4 = Field<0, 8>;    // Priority of system handler 4
            using PRI_5 = Field<8, 8>;    // Priority of system handler 5
            using PRI_6 = Field<16, 8>;    // Priority of system handler 6
        };

        // System handler priority registers
        struct SHPR2 : public Register<0xe000ed1c> {
            using PRI_11 = Field<24, 8>;    // Priority of system handler 11
        };

        // System handler priority registers
        struct SHPR3 : public Register<0xe000ed20> {
            using PRI_14 = Field<16, 8>;    // Priority of system handler 14
            using PRI_15 = Field<24, 8>;    // Priority of system handler 15
        };

        // System handler control and state register
        struct SHCRS : public Register<0xe000ed24> {
            using MEMFAULTACT = Field<0, 1>;    // Memory management fault exception active bit
            using BUSFAULTACT = Field<1, 1>;    // Bus fault exception active bit
            using USGFAULTACT = Field<3, 1>;    // Usage fault exception active bit
            using SVCALLACT = Field<7, 1>;    // SVC call active bit
            using MONITORACT = Field<8, 1>;    // Debug monitor active bit
            using PENDSVACT = Field<10, 1>;    // PendSV exception active bit
            using SYSTICKACT = Field<11, 1>;    // SysTick exception active bit
            using USGFAULTPENDED = Field<12, 1>;    // Usage fault exception pending bit
            using MEMFAULTPENDED = Field<13, 1>;    // Memory management fault exception pending bit
            using BUSFAULTPENDED = Field<14, 1>;    // Bus fault exception pending bit
            using SVCALLPENDED = Field<15, 1>;    // SVC call pending bit
            using MEMFAULTENA = Field<16, 1>;    // Memory management fault enable bit
            using BUSFAULTENA = Field<17, 1>;    // Bus fault enable bit
            using USGFAULTENA = Field<18, 1>;    // Usage fault enable bit
        };

        // Configurable fault status register
        struct CFSR_UFSR_BFSR_MMFSR : public Register<0xe000ed28> {
            using IACCVIOL = Field<1, 1>;    // Instruction access violation flag
            using MUNSTKERR = Field<3, 1>;    // Memory manager fault on unstacking for a return from exception
            using MSTKERR = Field<4, 1>;    // Memory manager fault on stacking for exception entry.
            using MLSPERR = Field<5, 1>;    // MLSPERR
            using MMARVALID = Field<7, 1>;    // Memory Management Fault Address Register (MMAR) valid flag
            using IBUSERR = Field<8, 1>;    // Instruction bus error
            using PRECISERR = Field<9, 1>;    // Precise data bus error
            using IMPRECISERR = Field<10, 1>;    // Imprecise data bus error
            using UNSTKERR = Field<11, 1>;    // Bus fault on unstacking for a return from exception
            using STKERR = Field<12, 1>;    // Bus fault on stacking for exception entry
            using LSPERR = Field<13, 1>;    // Bus fault on floating-point lazy state preservation
            using BFARVALID = Field<15, 1>;    // Bus Fault Address Register (BFAR) valid flag
            using UNDEFINSTR = Field<16, 1>;    // Undefined instruction usage fault
            using INVSTATE = Field<17, 1>;    // Invalid state usage fault
            using INVPC = Field<18, 1>;    // Invalid PC load usage fault
            using NOCP = Field<19, 1>;    // No coprocessor usage fault.
            using UNALIGNED = Field<24, 1>;    // Unaligned access usage fault
            using DIVBYZERO = Field<25, 1>;    // Divide by zero usage fault
        };

        // Hard fault status register
        struct HFSR : public Register<0xe000ed2c> {
            using VECTTBL = Field<1, 1>;    // Vector table hard fault
            using FORCED = Field<30, 1>;    // Forced hard fault
            using DEBUG_VT = Field<31, 1>;    // Reserved for Debug use
        };

        // Memory management fault address register
        struct MMFAR : public Register<0xe000ed34> {
            using Field = Field<0, 32>;    // Memory management fault address
        };

        // Bus fault address register
        struct BFAR : public Register<0xe000ed38> {
            using Field = Field<0, 32>;    // Bus fault address
        };

        // Auxiliary fault status register
        struct AFSR : public Register<0xe000ed3c> {
            using IMPDEF = Field<0, 32>;    // Implementation defined
        };

    };

    // Nested vectored interrupt controller
    struct NVIC_STIR {
        // Software trigger interrupt register
        struct STIR : public Register<0xe000ef00> {
            using INTID = Field<0, 9>;    // Software generated interrupt ID
        };

    };

    // Floating point unit CPACR
    struct FPU_CPACR {
        // Coprocessor access control register
        struct CPACR : public Register<0xe000ed88> {
            using CP = Field<20, 4>;    // CP
        };

    };

    // System control block ACTLR
    struct SCB_ACTRL {
        // Auxiliary control register
        struct ACTRL : public Register<0xe000e008> {
            using DISMCYCINT = Field<0, 1>;    // DISMCYCINT
            using DISDEFWBUF = Field<1, 1>;    // DISDEFWBUF
            using DISFOLD = Field<2, 1>;    // DISFOLD
            using DISFPCA = Field<8, 1>;    // DISFPCA
            using DISOOFP = Field<9, 1>;    // DISOOFP
        };

    };

    static std::uint32_t const numInterrupts = 85;

    enum class Interrupts: std::uint32_t {
        WWDG = 0,
        PVD_PVM = 1,
        RTC_TAMP_STAMP = 2,
        RTC_WKUP = 3,
        FLASH = 4,
        RCC = 5,
        EXTI0 = 6,
        EXTI1 = 7,
        EXTI2 = 8,
        EXTI3 = 9,
        EXTI4 = 10,
        DMA1_CH1 = 11,
        DMA1_CH2 = 12,
        DMA1_CH3 = 13,
        DMA1_CH4 = 14,
        DMA1_CH5 = 15,
        DMA1_CH6 = 16,
        DMA1_CH7 = 17,
        ADC1 = 18,
        CAN1_TX = 19,
        CAN1_RX0 = 20,
        CAN1_RX1 = 21,
        CAN1_SCE = 22,
        EXTI9_5 = 23,
        TIM1_BRK_TIM15 = 24,
        TIM1_UP_TIM16 = 25,
        TIM1_TRG_COM = 26,
        TIM1_CC = 27,
        TIM2 = 28,
        TIM3 = 29,
        I2C1_EV = 31,
        I2C1_ER = 32,
        I2C2_EV = 33,
        I2C2_ER = 34,
        SPI1 = 35,
        SPI2 = 36,
        USART1 = 37,
        USART2 = 38,
        USART3 = 39,
        EXTI15_10 = 40,
        RTC_ALARM = 41,
        DFSDM1_FLT3 = 42,
        SDMMC1 = 49,
        SPI3 = 51,
        UART4 = 52,
        TIM6_DACUNDER = 54,
        TIM7 = 55,
        DMA2_CH1 = 56,
        DMA2_CH2 = 57,
        DMA2_CH3 = 58,
        DMA2_CH4 = 59,
        DMA2_CH5 = 60,
        DFSDM1 = 61,
        DFSDM2 = 62,
        DFSDM1_FLT2 = 63,
        COMP = 64,
        LPTIM1 = 65,
        LPTIM2 = 66,
        USB_FS = 67,
        DMA2_CH6 = 68,
        DMA2_CH7 = 69,
        LPUART1 = 70,
        QUADSPI = 71,
        I2C3_EV = 72,
        I2C3_ER = 73,
        SAI1 = 74,
        SWPMI1 = 76,
        TSC = 77,
        LCD = 78,
        AES = 79,
        RNG = 80,
        FPU = 81,
        CRS = 82,
        I2C4_EV = 83,
        I2C4_ER = 84,
    };

};
