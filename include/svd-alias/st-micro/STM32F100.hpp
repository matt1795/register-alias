// This is a file generated by svd-alias.

#pragma once

#include "svd-alias/bit-field.hpp"
#include "svd-alias/register.hpp"

struct STM32F100 {
    // Flexible static memory controller
    struct FSMC {
        // SRAM/NOR-Flash chip-select control register 1
        struct BCR1 : public Register<0xa0000000> {
            using CBURSTRW = Field<19, 1>;    // CBURSTRW
            using ASYNCWAIT = Field<15, 1>;    // ASYNCWAIT
            using EXTMOD = Field<14, 1>;    // EXTMOD
            using WAITEN = Field<13, 1>;    // WAITEN
            using WREN = Field<12, 1>;    // WREN
            using WAITCFG = Field<11, 1>;    // WAITCFG
            using WAITPOL = Field<9, 1>;    // WAITPOL
            using BURSTEN = Field<8, 1>;    // BURSTEN
            using FACCEN = Field<6, 1>;    // FACCEN
            using MWID = Field<4, 2>;    // MWID
            using MTYP = Field<2, 2>;    // MTYP
            using MUXEN = Field<1, 1>;    // MUXEN
            using MBKEN = Field<0, 1>;    // MBKEN
        };

        // SRAM/NOR-Flash chip-select timing register 1
        struct BTR1 : public Register<0xa0000004> {
            using ACCMOD = Field<28, 2>;    // ACCMOD
            using DATLAT = Field<24, 4>;    // DATLAT
            using CLKDIV = Field<20, 4>;    // CLKDIV
            using BUSTURN = Field<16, 4>;    // BUSTURN
            using DATAST = Field<8, 8>;    // DATAST
            using ADDHLD = Field<4, 4>;    // ADDHLD
            using ADDSET = Field<0, 4>;    // ADDSET
        };

        // SRAM/NOR-Flash chip-select control register 2
        struct BCR2 : public Register<0xa0000008> {
            using CBURSTRW = Field<19, 1>;    // CBURSTRW
            using ASYNCWAIT = Field<15, 1>;    // ASYNCWAIT
            using EXTMOD = Field<14, 1>;    // EXTMOD
            using WAITEN = Field<13, 1>;    // WAITEN
            using WREN = Field<12, 1>;    // WREN
            using WAITCFG = Field<11, 1>;    // WAITCFG
            using WRAPMOD = Field<10, 1>;    // WRAPMOD
            using WAITPOL = Field<9, 1>;    // WAITPOL
            using BURSTEN = Field<8, 1>;    // BURSTEN
            using FACCEN = Field<6, 1>;    // FACCEN
            using MWID = Field<4, 2>;    // MWID
            using MTYP = Field<2, 2>;    // MTYP
            using MUXEN = Field<1, 1>;    // MUXEN
            using MBKEN = Field<0, 1>;    // MBKEN
        };

        // SRAM/NOR-Flash chip-select timing register 2
        struct BTR2 : public Register<0xa000000c> {
            using ACCMOD = Field<28, 2>;    // ACCMOD
            using DATLAT = Field<24, 4>;    // DATLAT
            using CLKDIV = Field<20, 4>;    // CLKDIV
            using BUSTURN = Field<16, 4>;    // BUSTURN
            using DATAST = Field<8, 8>;    // DATAST
            using ADDHLD = Field<4, 4>;    // ADDHLD
            using ADDSET = Field<0, 4>;    // ADDSET
        };

        // SRAM/NOR-Flash chip-select control register 3
        struct BCR3 : public Register<0xa0000010> {
            using CBURSTRW = Field<19, 1>;    // CBURSTRW
            using ASYNCWAIT = Field<15, 1>;    // ASYNCWAIT
            using EXTMOD = Field<14, 1>;    // EXTMOD
            using WAITEN = Field<13, 1>;    // WAITEN
            using WREN = Field<12, 1>;    // WREN
            using WAITCFG = Field<11, 1>;    // WAITCFG
            using WRAPMOD = Field<10, 1>;    // WRAPMOD
            using WAITPOL = Field<9, 1>;    // WAITPOL
            using BURSTEN = Field<8, 1>;    // BURSTEN
            using FACCEN = Field<6, 1>;    // FACCEN
            using MWID = Field<4, 2>;    // MWID
            using MTYP = Field<2, 2>;    // MTYP
            using MUXEN = Field<1, 1>;    // MUXEN
            using MBKEN = Field<0, 1>;    // MBKEN
        };

        // SRAM/NOR-Flash chip-select timing register 3
        struct BTR3 : public Register<0xa0000014> {
            using ACCMOD = Field<28, 2>;    // ACCMOD
            using DATLAT = Field<24, 4>;    // DATLAT
            using CLKDIV = Field<20, 4>;    // CLKDIV
            using BUSTURN = Field<16, 4>;    // BUSTURN
            using DATAST = Field<8, 8>;    // DATAST
            using ADDHLD = Field<4, 4>;    // ADDHLD
            using ADDSET = Field<0, 4>;    // ADDSET
        };

        // SRAM/NOR-Flash chip-select control register 4
        struct BCR4 : public Register<0xa0000018> {
            using CBURSTRW = Field<19, 1>;    // CBURSTRW
            using ASYNCWAIT = Field<15, 1>;    // ASYNCWAIT
            using EXTMOD = Field<14, 1>;    // EXTMOD
            using WAITEN = Field<13, 1>;    // WAITEN
            using WREN = Field<12, 1>;    // WREN
            using WAITCFG = Field<11, 1>;    // WAITCFG
            using WRAPMOD = Field<10, 1>;    // WRAPMOD
            using WAITPOL = Field<9, 1>;    // WAITPOL
            using BURSTEN = Field<8, 1>;    // BURSTEN
            using FACCEN = Field<6, 1>;    // FACCEN
            using MWID = Field<4, 2>;    // MWID
            using MTYP = Field<2, 2>;    // MTYP
            using MUXEN = Field<1, 1>;    // MUXEN
            using MBKEN = Field<0, 1>;    // MBKEN
        };

        // SRAM/NOR-Flash chip-select timing register 4
        struct BTR4 : public Register<0xa000001c> {
            using ACCMOD = Field<28, 2>;    // ACCMOD
            using DATLAT = Field<24, 4>;    // DATLAT
            using CLKDIV = Field<20, 4>;    // CLKDIV
            using BUSTURN = Field<16, 4>;    // BUSTURN
            using DATAST = Field<8, 8>;    // DATAST
            using ADDHLD = Field<4, 4>;    // ADDHLD
            using ADDSET = Field<0, 4>;    // ADDSET
        };

        // SRAM/NOR-Flash write timing registers 1
        struct BWTR1 : public Register<0xa0000104> {
            using ACCMOD = Field<28, 2>;    // ACCMOD
            using DATLAT = Field<24, 4>;    // DATLAT
            using CLKDIV = Field<20, 4>;    // CLKDIV
            using DATAST = Field<8, 8>;    // DATAST
            using ADDHLD = Field<4, 4>;    // ADDHLD
            using ADDSET = Field<0, 4>;    // ADDSET
        };

        // SRAM/NOR-Flash write timing registers 2
        struct BWTR2 : public Register<0xa000010c> {
            using ACCMOD = Field<28, 2>;    // ACCMOD
            using DATLAT = Field<24, 4>;    // DATLAT
            using CLKDIV = Field<20, 4>;    // CLKDIV
            using DATAST = Field<8, 8>;    // DATAST
            using ADDHLD = Field<4, 4>;    // ADDHLD
            using ADDSET = Field<0, 4>;    // ADDSET
        };

        // SRAM/NOR-Flash write timing registers 3
        struct BWTR3 : public Register<0xa0000114> {
            using ACCMOD = Field<28, 2>;    // ACCMOD
            using DATLAT = Field<24, 4>;    // DATLAT
            using CLKDIV = Field<20, 4>;    // CLKDIV
            using DATAST = Field<8, 8>;    // DATAST
            using ADDHLD = Field<4, 4>;    // ADDHLD
            using ADDSET = Field<0, 4>;    // ADDSET
        };

        // SRAM/NOR-Flash write timing registers 4
        struct BWTR4 : public Register<0xa000011c> {
            using ACCMOD = Field<28, 2>;    // ACCMOD
            using DATLAT = Field<24, 4>;    // DATLAT
            using CLKDIV = Field<20, 4>;    // CLKDIV
            using DATAST = Field<8, 8>;    // DATAST
            using ADDHLD = Field<4, 4>;    // ADDHLD
            using ADDSET = Field<0, 4>;    // ADDSET
        };

    };

    // Power control
    struct PWR {
        // Power control register (PWR_CR)
        struct CR : public Register<0x40007000> {
            using LPDS = Field<0, 1>;    // Low Power Deep Sleep
            using PDDS = Field<1, 1>;    // Power Down Deep Sleep
            using CWUF = Field<2, 1>;    // Clear Wake-up Flag
            using CSBF = Field<3, 1>;    // Clear STANDBY Flag
            using PVDE = Field<4, 1>;    // Power Voltage Detector Enable
            using PLS = Field<5, 3>;    // PVD Level Selection
            using DBP = Field<8, 1>;    // Disable Backup Domain write protection
        };

        // Power control register (PWR_CR)
        struct CSR : public Register<0x40007004> {
            using WUF = Field<0, 1>;    // Wake-Up Flag
            using SBF = Field<1, 1>;    // STANDBY Flag
            using PVDO = Field<2, 1>;    // PVD Output
            using EWUP = Field<8, 1>;    // Enable WKUP pin
        };

    };

    // Reset and clock control
    struct RCC {
        // Clock control register
        struct CR : public Register<0x40021000> {
            using HSION = Field<0, 1>;    // Internal High Speed clock enable
            using HSIRDY = Field<1, 1>;    // Internal High Speed clock ready flag
            using HSITRIM = Field<3, 5>;    // Internal High Speed clock trimming
            using HSICAL = Field<8, 8>;    // Internal High Speed clock Calibration
            using HSEON = Field<16, 1>;    // External High Speed clock enable
            using HSERDY = Field<17, 1>;    // External High Speed clock ready flag
            using HSEBYP = Field<18, 1>;    // External High Speed clock Bypass
            using CSSON = Field<19, 1>;    // Clock Security System enable
            using PLLON = Field<24, 1>;    // PLL enable
            using PLLRDY = Field<25, 1>;    // PLL clock ready flag
        };

        // Clock configuration register (RCC_CFGR)
        struct CFGR : public Register<0x40021004> {
            using SW = Field<0, 2>;    // System clock Switch
            using SWS = Field<2, 2>;    // System Clock Switch Status
            using HPRE = Field<4, 4>;    // AHB prescaler
            using PPRE1 = Field<8, 3>;    // APB Low speed prescaler (APB1)
            using PPRE2 = Field<11, 3>;    // APB High speed prescaler (APB2)
            using ADCPRE = Field<14, 2>;    // ADC prescaler
            using PLLSRC = Field<16, 1>;    // PLL entry clock source
            using PLLXTPRE = Field<17, 1>;    // HSE divider for PLL entry
            using PLLMUL = Field<18, 4>;    // PLL Multiplication Factor
            using MCO = Field<24, 3>;    // Microcontroller clock output
        };

        // Clock interrupt register (RCC_CIR)
        struct CIR : public Register<0x40021008> {
            using LSIRDYF = Field<0, 1>;    // LSI Ready Interrupt flag
            using LSERDYF = Field<1, 1>;    // LSE Ready Interrupt flag
            using HSIRDYF = Field<2, 1>;    // HSI Ready Interrupt flag
            using HSERDYF = Field<3, 1>;    // HSE Ready Interrupt flag
            using PLLRDYF = Field<4, 1>;    // PLL Ready Interrupt flag
            using CSSF = Field<7, 1>;    // Clock Security System Interrupt flag
            using LSIRDYIE = Field<8, 1>;    // LSI Ready Interrupt Enable
            using LSERDYIE = Field<9, 1>;    // LSE Ready Interrupt Enable
            using HSIRDYIE = Field<10, 1>;    // HSI Ready Interrupt Enable
            using HSERDYIE = Field<11, 1>;    // HSE Ready Interrupt Enable
            using PLLRDYIE = Field<12, 1>;    // PLL Ready Interrupt Enable
            using LSIRDYC = Field<16, 1>;    // LSI Ready Interrupt Clear
            using LSERDYC = Field<17, 1>;    // LSE Ready Interrupt Clear
            using HSIRDYC = Field<18, 1>;    // HSI Ready Interrupt Clear
            using HSERDYC = Field<19, 1>;    // HSE Ready Interrupt Clear
            using PLLRDYC = Field<20, 1>;    // PLL Ready Interrupt Clear
            using CSSC = Field<23, 1>;    // Clock security system interrupt clear
        };

        // APB2 peripheral reset register (RCC_APB2RSTR)
        struct APB2RSTR : public Register<0x4002100c> {
            using AFIORST = Field<0, 1>;    // Alternate function I/O reset
            using IOPARST = Field<2, 1>;    // IO port A reset
            using IOPBRST = Field<3, 1>;    // IO port B reset
            using IOPCRST = Field<4, 1>;    // IO port C reset
            using IOPDRST = Field<5, 1>;    // IO port D reset
            using IOPERST = Field<6, 1>;    // IO port E reset
            using IOPFRST = Field<7, 1>;    // IO port F reset
            using IOPGRST = Field<8, 1>;    // IO port G reset
            using ADC1RST = Field<9, 1>;    // ADC 1 interface reset
            using TIM1RST = Field<11, 1>;    // TIM1 timer reset
            using SPI1RST = Field<12, 1>;    // SPI 1 reset
            using USART1RST = Field<14, 1>;    // USART1 reset
            using TIM15RST = Field<16, 1>;    // TIM15 timer reset
            using TIM16RST = Field<17, 1>;    // TIM16 timer reset
            using TIM17RST = Field<18, 1>;    // TIM17 timer reset
        };

        // APB1 peripheral reset register (RCC_APB1RSTR)
        struct APB1RSTR : public Register<0x40021010> {
            using TIM2RST = Field<0, 1>;    // Timer 2 reset
            using TIM3RST = Field<1, 1>;    // Timer 3 reset
            using TIM4RST = Field<2, 1>;    // Timer 4 reset
            using TIM5RST = Field<3, 1>;    // Timer 5 reset
            using TIM6RST = Field<4, 1>;    // Timer 6 reset
            using TIM7RST = Field<5, 1>;    // Timer 7 reset
            using TIM12RST = Field<6, 1>;    // Timer 12 reset
            using TIM13RST = Field<7, 1>;    // Timer 13 reset
            using TIM14RST = Field<8, 1>;    // Timer 14 reset
            using WWDGRST = Field<11, 1>;    // Window watchdog reset
            using SPI2RST = Field<14, 1>;    // SPI2 reset
            using SPI3RST = Field<15, 1>;    // SPI3 reset
            using USART2RST = Field<17, 1>;    // USART 2 reset
            using USART3RST = Field<18, 1>;    // USART 3 reset
            using USART4RST = Field<19, 1>;    // USART 4 reset
            using USART5RST = Field<20, 1>;    // USART 5 reset
            using I2C1RST = Field<21, 1>;    // I2C1 reset
            using I2C2RST = Field<22, 1>;    // I2C2 reset
            using BKPRST = Field<27, 1>;    // Backup interface reset
            using PWRRST = Field<28, 1>;    // Power interface reset
            using DACRST = Field<29, 1>;    // DAC interface reset
            using CECRST = Field<30, 1>;    // CEC reset
        };

        // AHB Peripheral Clock enable register (RCC_AHBENR)
        struct AHBENR : public Register<0x40021014> {
            using DMA1EN = Field<0, 1>;    // DMA1 clock enable
            using DMA2EN = Field<1, 1>;    // DMA2 clock enable
            using SRAMEN = Field<2, 1>;    // SRAM interface clock enable
            using FLITFEN = Field<4, 1>;    // FLITF clock enable
            using CRCEN = Field<6, 1>;    // CRC clock enable
            using FSMCEN = Field<8, 1>;    // FSMC clock enable
        };

        // APB2 peripheral clock enable register (RCC_APB2ENR)
        struct APB2ENR : public Register<0x40021018> {
            using AFIOEN = Field<0, 1>;    // Alternate function I/O clock enable
            using IOPAEN = Field<2, 1>;    // I/O port A clock enable
            using IOPBEN = Field<3, 1>;    // I/O port B clock enable
            using IOPCEN = Field<4, 1>;    // I/O port C clock enable
            using IOPDEN = Field<5, 1>;    // I/O port D clock enable
            using IOPEEN = Field<6, 1>;    // I/O port E clock enable
            using IOPFEN = Field<7, 1>;    // I/O port F clock enable
            using IOPGEN = Field<8, 1>;    // I/O port G clock enable
            using ADC1EN = Field<9, 1>;    // ADC 1 interface clock enable
            using TIM1EN = Field<11, 1>;    // TIM1 Timer clock enable
            using SPI1EN = Field<12, 1>;    // SPI 1 clock enable
            using USART1EN = Field<14, 1>;    // USART1 clock enable
            using TIM15EN = Field<16, 1>;    // TIM15 Timer clock enable
            using TIM16EN = Field<17, 1>;    // TIM16 Timer clock enable
            using TIM17EN = Field<18, 1>;    // TIM17 Timer clock enable
        };

        // APB1 peripheral clock enable register (RCC_APB1ENR)
        struct APB1ENR : public Register<0x4002101c> {
            using TIM2EN = Field<0, 1>;    // Timer 2 clock enable
            using TIM3EN = Field<1, 1>;    // Timer 3 clock enable
            using TIM4EN = Field<2, 1>;    // Timer 4 clock enable
            using TIM5EN = Field<3, 1>;    // Timer 5 clock enable
            using TIM6EN = Field<4, 1>;    // Timer 6 clock enable
            using TIM7EN = Field<5, 1>;    // Timer 7 clock enable
            using TIM12EN = Field<6, 1>;    // Timer 12 clock enable
            using TIM13EN = Field<7, 1>;    // Timer 13 clock enable
            using TIM14EN = Field<8, 1>;    // Timer 14 clock enable
            using WWDGEN = Field<11, 1>;    // Window watchdog clock enable
            using SPI2EN = Field<14, 1>;    // SPI 2 clock enable
            using SPI3EN = Field<15, 1>;    // SPI 3 clock enable
            using USART2EN = Field<17, 1>;    // USART 2 clock enable
            using USART3EN = Field<18, 1>;    // USART 3 clock enable
            using UART4EN = Field<19, 1>;    // UART 4 clock enable
            using UART5EN = Field<20, 1>;    // UART 5 clock enable
            using I2C1EN = Field<21, 1>;    // I2C 1 clock enable
            using I2C2EN = Field<22, 1>;    // I2C 2 clock enable
            using BKPEN = Field<27, 1>;    // Backup interface clock enable
            using PWREN = Field<28, 1>;    // Power interface clock enable
            using DACEN = Field<29, 1>;    // DAC interface clock enable
            using CECEN = Field<30, 1>;    // CEC clock enable
        };

        // Backup domain control register (RCC_BDCR)
        struct BDCR : public Register<0x40021020> {
            using LSEON = Field<0, 1>;    // External Low Speed oscillator enable
            using LSERDY = Field<1, 1>;    // External Low Speed oscillator ready
            using LSEBYP = Field<2, 1>;    // External Low Speed oscillator bypass
            using RTCSEL = Field<8, 2>;    // RTC clock source selection
            using RTCEN = Field<15, 1>;    // RTC clock enable
            using BDRST = Field<16, 1>;    // Backup domain software reset
        };

        // Control/status register (RCC_CSR)
        struct CSR : public Register<0x40021024> {
            using LSION = Field<0, 1>;    // Internal low speed oscillator enable
            using LSIRDY = Field<1, 1>;    // Internal low speed oscillator ready
            using RMVF = Field<24, 1>;    // Remove reset flag
            using PINRSTF = Field<26, 1>;    // PIN reset flag
            using PORRSTF = Field<27, 1>;    // POR/PDR reset flag
            using SFTRSTF = Field<28, 1>;    // Software reset flag
            using IWDGRSTF = Field<29, 1>;    // Independent watchdog reset flag
            using WWDGRSTF = Field<30, 1>;    // Window watchdog reset flag
            using LPWRRSTF = Field<31, 1>;    // Low-power reset flag
        };

        // Clock configuration register 2
        struct CFGR2 : public Register<0x4002102c> {
            using PREDIV1 = Field<0, 4>;    // PREDIV1 division factor
        };

    };

    // General purpose I/O
    struct GPIOA {
        // Port configuration register low (GPIOn_CRL)
        struct CRL : public Register<0x40010800> {
            using MODE0 = Field<0, 2>;    // Port n.0 mode bits
            using CNF0 = Field<2, 2>;    // Port n.0 configuration bits
            using MODE1 = Field<4, 2>;    // Port n.1 mode bits
            using CNF1 = Field<6, 2>;    // Port n.1 configuration bits
            using MODE2 = Field<8, 2>;    // Port n.2 mode bits
            using CNF2 = Field<10, 2>;    // Port n.2 configuration bits
            using MODE3 = Field<12, 2>;    // Port n.3 mode bits
            using CNF3 = Field<14, 2>;    // Port n.3 configuration bits
            using MODE4 = Field<16, 2>;    // Port n.4 mode bits
            using CNF4 = Field<18, 2>;    // Port n.4 configuration bits
            using MODE5 = Field<20, 2>;    // Port n.5 mode bits
            using CNF5 = Field<22, 2>;    // Port n.5 configuration bits
            using MODE6 = Field<24, 2>;    // Port n.6 mode bits
            using CNF6 = Field<26, 2>;    // Port n.6 configuration bits
            using MODE7 = Field<28, 2>;    // Port n.7 mode bits
            using CNF7 = Field<30, 2>;    // Port n.7 configuration bits
        };

        // Port configuration register high (GPIOn_CRL)
        struct CRH : public Register<0x40010804> {
            using MODE8 = Field<0, 2>;    // Port n.8 mode bits
            using CNF8 = Field<2, 2>;    // Port n.8 configuration bits
            using MODE9 = Field<4, 2>;    // Port n.9 mode bits
            using CNF9 = Field<6, 2>;    // Port n.9 configuration bits
            using MODE10 = Field<8, 2>;    // Port n.10 mode bits
            using CNF10 = Field<10, 2>;    // Port n.10 configuration bits
            using MODE11 = Field<12, 2>;    // Port n.11 mode bits
            using CNF11 = Field<14, 2>;    // Port n.11 configuration bits
            using MODE12 = Field<16, 2>;    // Port n.12 mode bits
            using CNF12 = Field<18, 2>;    // Port n.12 configuration bits
            using MODE13 = Field<20, 2>;    // Port n.13 mode bits
            using CNF13 = Field<22, 2>;    // Port n.13 configuration bits
            using MODE14 = Field<24, 2>;    // Port n.14 mode bits
            using CNF14 = Field<26, 2>;    // Port n.14 configuration bits
            using MODE15 = Field<28, 2>;    // Port n.15 mode bits
            using CNF15 = Field<30, 2>;    // Port n.15 configuration bits
        };

        // Port input data register (GPIOn_IDR)
        struct IDR : public Register<0x40010808> {
            using IDR0 = Field<0, 1>;    // Port input data
            using IDR1 = Field<1, 1>;    // Port input data
            using IDR2 = Field<2, 1>;    // Port input data
            using IDR3 = Field<3, 1>;    // Port input data
            using IDR4 = Field<4, 1>;    // Port input data
            using IDR5 = Field<5, 1>;    // Port input data
            using IDR6 = Field<6, 1>;    // Port input data
            using IDR7 = Field<7, 1>;    // Port input data
            using IDR8 = Field<8, 1>;    // Port input data
            using IDR9 = Field<9, 1>;    // Port input data
            using IDR10 = Field<10, 1>;    // Port input data
            using IDR11 = Field<11, 1>;    // Port input data
            using IDR12 = Field<12, 1>;    // Port input data
            using IDR13 = Field<13, 1>;    // Port input data
            using IDR14 = Field<14, 1>;    // Port input data
            using IDR15 = Field<15, 1>;    // Port input data
        };

        // Port output data register (GPIOn_ODR)
        struct ODR : public Register<0x4001080c> {
            using ODR0 = Field<0, 1>;    // Port output data
            using ODR1 = Field<1, 1>;    // Port output data
            using ODR2 = Field<2, 1>;    // Port output data
            using ODR3 = Field<3, 1>;    // Port output data
            using ODR4 = Field<4, 1>;    // Port output data
            using ODR5 = Field<5, 1>;    // Port output data
            using ODR6 = Field<6, 1>;    // Port output data
            using ODR7 = Field<7, 1>;    // Port output data
            using ODR8 = Field<8, 1>;    // Port output data
            using ODR9 = Field<9, 1>;    // Port output data
            using ODR10 = Field<10, 1>;    // Port output data
            using ODR11 = Field<11, 1>;    // Port output data
            using ODR12 = Field<12, 1>;    // Port output data
            using ODR13 = Field<13, 1>;    // Port output data
            using ODR14 = Field<14, 1>;    // Port output data
            using ODR15 = Field<15, 1>;    // Port output data
        };

        // Port bit set/reset register (GPIOn_BSRR)
        struct BSRR : public Register<0x40010810> {
            using BS0 = Field<0, 1>;    // Set bit 0
            using BS1 = Field<1, 1>;    // Set bit 1
            using BS2 = Field<2, 1>;    // Set bit 1
            using BS3 = Field<3, 1>;    // Set bit 3
            using BS4 = Field<4, 1>;    // Set bit 4
            using BS5 = Field<5, 1>;    // Set bit 5
            using BS6 = Field<6, 1>;    // Set bit 6
            using BS7 = Field<7, 1>;    // Set bit 7
            using BS8 = Field<8, 1>;    // Set bit 8
            using BS9 = Field<9, 1>;    // Set bit 9
            using BS10 = Field<10, 1>;    // Set bit 10
            using BS11 = Field<11, 1>;    // Set bit 11
            using BS12 = Field<12, 1>;    // Set bit 12
            using BS13 = Field<13, 1>;    // Set bit 13
            using BS14 = Field<14, 1>;    // Set bit 14
            using BS15 = Field<15, 1>;    // Set bit 15
            using BR0 = Field<16, 1>;    // Reset bit 0
            using BR1 = Field<17, 1>;    // Reset bit 1
            using BR2 = Field<18, 1>;    // Reset bit 2
            using BR3 = Field<19, 1>;    // Reset bit 3
            using BR4 = Field<20, 1>;    // Reset bit 4
            using BR5 = Field<21, 1>;    // Reset bit 5
            using BR6 = Field<22, 1>;    // Reset bit 6
            using BR7 = Field<23, 1>;    // Reset bit 7
            using BR8 = Field<24, 1>;    // Reset bit 8
            using BR9 = Field<25, 1>;    // Reset bit 9
            using BR10 = Field<26, 1>;    // Reset bit 10
            using BR11 = Field<27, 1>;    // Reset bit 11
            using BR12 = Field<28, 1>;    // Reset bit 12
            using BR13 = Field<29, 1>;    // Reset bit 13
            using BR14 = Field<30, 1>;    // Reset bit 14
            using BR15 = Field<31, 1>;    // Reset bit 15
        };

        // Port bit reset register (GPIOn_BRR)
        struct BRR : public Register<0x40010814> {
            using BR0 = Field<0, 1>;    // Reset bit 0
            using BR1 = Field<1, 1>;    // Reset bit 1
            using BR2 = Field<2, 1>;    // Reset bit 1
            using BR3 = Field<3, 1>;    // Reset bit 3
            using BR4 = Field<4, 1>;    // Reset bit 4
            using BR5 = Field<5, 1>;    // Reset bit 5
            using BR6 = Field<6, 1>;    // Reset bit 6
            using BR7 = Field<7, 1>;    // Reset bit 7
            using BR8 = Field<8, 1>;    // Reset bit 8
            using BR9 = Field<9, 1>;    // Reset bit 9
            using BR10 = Field<10, 1>;    // Reset bit 10
            using BR11 = Field<11, 1>;    // Reset bit 11
            using BR12 = Field<12, 1>;    // Reset bit 12
            using BR13 = Field<13, 1>;    // Reset bit 13
            using BR14 = Field<14, 1>;    // Reset bit 14
            using BR15 = Field<15, 1>;    // Reset bit 15
        };

        // Port configuration lock register
        struct LCKR : public Register<0x40010818> {
            using LCK0 = Field<0, 1>;    // Port A Lock bit 0
            using LCK1 = Field<1, 1>;    // Port A Lock bit 1
            using LCK2 = Field<2, 1>;    // Port A Lock bit 2
            using LCK3 = Field<3, 1>;    // Port A Lock bit 3
            using LCK4 = Field<4, 1>;    // Port A Lock bit 4
            using LCK5 = Field<5, 1>;    // Port A Lock bit 5
            using LCK6 = Field<6, 1>;    // Port A Lock bit 6
            using LCK7 = Field<7, 1>;    // Port A Lock bit 7
            using LCK8 = Field<8, 1>;    // Port A Lock bit 8
            using LCK9 = Field<9, 1>;    // Port A Lock bit 9
            using LCK10 = Field<10, 1>;    // Port A Lock bit 10
            using LCK11 = Field<11, 1>;    // Port A Lock bit 11
            using LCK12 = Field<12, 1>;    // Port A Lock bit 12
            using LCK13 = Field<13, 1>;    // Port A Lock bit 13
            using LCK14 = Field<14, 1>;    // Port A Lock bit 14
            using LCK15 = Field<15, 1>;    // Port A Lock bit 15
            using LCKK = Field<16, 1>;    // Lock key
        };

    };

    // General purpose I/O
    struct GPIOB {
        // Port configuration register low (GPIOn_CRL)
        struct CRL : public Register<0x40010c00> {
            using MODE0 = Field<0, 2>;    // Port n.0 mode bits
            using CNF0 = Field<2, 2>;    // Port n.0 configuration bits
            using MODE1 = Field<4, 2>;    // Port n.1 mode bits
            using CNF1 = Field<6, 2>;    // Port n.1 configuration bits
            using MODE2 = Field<8, 2>;    // Port n.2 mode bits
            using CNF2 = Field<10, 2>;    // Port n.2 configuration bits
            using MODE3 = Field<12, 2>;    // Port n.3 mode bits
            using CNF3 = Field<14, 2>;    // Port n.3 configuration bits
            using MODE4 = Field<16, 2>;    // Port n.4 mode bits
            using CNF4 = Field<18, 2>;    // Port n.4 configuration bits
            using MODE5 = Field<20, 2>;    // Port n.5 mode bits
            using CNF5 = Field<22, 2>;    // Port n.5 configuration bits
            using MODE6 = Field<24, 2>;    // Port n.6 mode bits
            using CNF6 = Field<26, 2>;    // Port n.6 configuration bits
            using MODE7 = Field<28, 2>;    // Port n.7 mode bits
            using CNF7 = Field<30, 2>;    // Port n.7 configuration bits
        };

        // Port configuration register high (GPIOn_CRL)
        struct CRH : public Register<0x40010c04> {
            using MODE8 = Field<0, 2>;    // Port n.8 mode bits
            using CNF8 = Field<2, 2>;    // Port n.8 configuration bits
            using MODE9 = Field<4, 2>;    // Port n.9 mode bits
            using CNF9 = Field<6, 2>;    // Port n.9 configuration bits
            using MODE10 = Field<8, 2>;    // Port n.10 mode bits
            using CNF10 = Field<10, 2>;    // Port n.10 configuration bits
            using MODE11 = Field<12, 2>;    // Port n.11 mode bits
            using CNF11 = Field<14, 2>;    // Port n.11 configuration bits
            using MODE12 = Field<16, 2>;    // Port n.12 mode bits
            using CNF12 = Field<18, 2>;    // Port n.12 configuration bits
            using MODE13 = Field<20, 2>;    // Port n.13 mode bits
            using CNF13 = Field<22, 2>;    // Port n.13 configuration bits
            using MODE14 = Field<24, 2>;    // Port n.14 mode bits
            using CNF14 = Field<26, 2>;    // Port n.14 configuration bits
            using MODE15 = Field<28, 2>;    // Port n.15 mode bits
            using CNF15 = Field<30, 2>;    // Port n.15 configuration bits
        };

        // Port input data register (GPIOn_IDR)
        struct IDR : public Register<0x40010c08> {
            using IDR0 = Field<0, 1>;    // Port input data
            using IDR1 = Field<1, 1>;    // Port input data
            using IDR2 = Field<2, 1>;    // Port input data
            using IDR3 = Field<3, 1>;    // Port input data
            using IDR4 = Field<4, 1>;    // Port input data
            using IDR5 = Field<5, 1>;    // Port input data
            using IDR6 = Field<6, 1>;    // Port input data
            using IDR7 = Field<7, 1>;    // Port input data
            using IDR8 = Field<8, 1>;    // Port input data
            using IDR9 = Field<9, 1>;    // Port input data
            using IDR10 = Field<10, 1>;    // Port input data
            using IDR11 = Field<11, 1>;    // Port input data
            using IDR12 = Field<12, 1>;    // Port input data
            using IDR13 = Field<13, 1>;    // Port input data
            using IDR14 = Field<14, 1>;    // Port input data
            using IDR15 = Field<15, 1>;    // Port input data
        };

        // Port output data register (GPIOn_ODR)
        struct ODR : public Register<0x40010c0c> {
            using ODR0 = Field<0, 1>;    // Port output data
            using ODR1 = Field<1, 1>;    // Port output data
            using ODR2 = Field<2, 1>;    // Port output data
            using ODR3 = Field<3, 1>;    // Port output data
            using ODR4 = Field<4, 1>;    // Port output data
            using ODR5 = Field<5, 1>;    // Port output data
            using ODR6 = Field<6, 1>;    // Port output data
            using ODR7 = Field<7, 1>;    // Port output data
            using ODR8 = Field<8, 1>;    // Port output data
            using ODR9 = Field<9, 1>;    // Port output data
            using ODR10 = Field<10, 1>;    // Port output data
            using ODR11 = Field<11, 1>;    // Port output data
            using ODR12 = Field<12, 1>;    // Port output data
            using ODR13 = Field<13, 1>;    // Port output data
            using ODR14 = Field<14, 1>;    // Port output data
            using ODR15 = Field<15, 1>;    // Port output data
        };

        // Port bit set/reset register (GPIOn_BSRR)
        struct BSRR : public Register<0x40010c10> {
            using BS0 = Field<0, 1>;    // Set bit 0
            using BS1 = Field<1, 1>;    // Set bit 1
            using BS2 = Field<2, 1>;    // Set bit 1
            using BS3 = Field<3, 1>;    // Set bit 3
            using BS4 = Field<4, 1>;    // Set bit 4
            using BS5 = Field<5, 1>;    // Set bit 5
            using BS6 = Field<6, 1>;    // Set bit 6
            using BS7 = Field<7, 1>;    // Set bit 7
            using BS8 = Field<8, 1>;    // Set bit 8
            using BS9 = Field<9, 1>;    // Set bit 9
            using BS10 = Field<10, 1>;    // Set bit 10
            using BS11 = Field<11, 1>;    // Set bit 11
            using BS12 = Field<12, 1>;    // Set bit 12
            using BS13 = Field<13, 1>;    // Set bit 13
            using BS14 = Field<14, 1>;    // Set bit 14
            using BS15 = Field<15, 1>;    // Set bit 15
            using BR0 = Field<16, 1>;    // Reset bit 0
            using BR1 = Field<17, 1>;    // Reset bit 1
            using BR2 = Field<18, 1>;    // Reset bit 2
            using BR3 = Field<19, 1>;    // Reset bit 3
            using BR4 = Field<20, 1>;    // Reset bit 4
            using BR5 = Field<21, 1>;    // Reset bit 5
            using BR6 = Field<22, 1>;    // Reset bit 6
            using BR7 = Field<23, 1>;    // Reset bit 7
            using BR8 = Field<24, 1>;    // Reset bit 8
            using BR9 = Field<25, 1>;    // Reset bit 9
            using BR10 = Field<26, 1>;    // Reset bit 10
            using BR11 = Field<27, 1>;    // Reset bit 11
            using BR12 = Field<28, 1>;    // Reset bit 12
            using BR13 = Field<29, 1>;    // Reset bit 13
            using BR14 = Field<30, 1>;    // Reset bit 14
            using BR15 = Field<31, 1>;    // Reset bit 15
        };

        // Port bit reset register (GPIOn_BRR)
        struct BRR : public Register<0x40010c14> {
            using BR0 = Field<0, 1>;    // Reset bit 0
            using BR1 = Field<1, 1>;    // Reset bit 1
            using BR2 = Field<2, 1>;    // Reset bit 1
            using BR3 = Field<3, 1>;    // Reset bit 3
            using BR4 = Field<4, 1>;    // Reset bit 4
            using BR5 = Field<5, 1>;    // Reset bit 5
            using BR6 = Field<6, 1>;    // Reset bit 6
            using BR7 = Field<7, 1>;    // Reset bit 7
            using BR8 = Field<8, 1>;    // Reset bit 8
            using BR9 = Field<9, 1>;    // Reset bit 9
            using BR10 = Field<10, 1>;    // Reset bit 10
            using BR11 = Field<11, 1>;    // Reset bit 11
            using BR12 = Field<12, 1>;    // Reset bit 12
            using BR13 = Field<13, 1>;    // Reset bit 13
            using BR14 = Field<14, 1>;    // Reset bit 14
            using BR15 = Field<15, 1>;    // Reset bit 15
        };

        // Port configuration lock register
        struct LCKR : public Register<0x40010c18> {
            using LCK0 = Field<0, 1>;    // Port A Lock bit 0
            using LCK1 = Field<1, 1>;    // Port A Lock bit 1
            using LCK2 = Field<2, 1>;    // Port A Lock bit 2
            using LCK3 = Field<3, 1>;    // Port A Lock bit 3
            using LCK4 = Field<4, 1>;    // Port A Lock bit 4
            using LCK5 = Field<5, 1>;    // Port A Lock bit 5
            using LCK6 = Field<6, 1>;    // Port A Lock bit 6
            using LCK7 = Field<7, 1>;    // Port A Lock bit 7
            using LCK8 = Field<8, 1>;    // Port A Lock bit 8
            using LCK9 = Field<9, 1>;    // Port A Lock bit 9
            using LCK10 = Field<10, 1>;    // Port A Lock bit 10
            using LCK11 = Field<11, 1>;    // Port A Lock bit 11
            using LCK12 = Field<12, 1>;    // Port A Lock bit 12
            using LCK13 = Field<13, 1>;    // Port A Lock bit 13
            using LCK14 = Field<14, 1>;    // Port A Lock bit 14
            using LCK15 = Field<15, 1>;    // Port A Lock bit 15
            using LCKK = Field<16, 1>;    // Lock key
        };

    };

    // General purpose I/O
    struct GPIOC {
        // Port configuration register low (GPIOn_CRL)
        struct CRL : public Register<0x40011000> {
            using MODE0 = Field<0, 2>;    // Port n.0 mode bits
            using CNF0 = Field<2, 2>;    // Port n.0 configuration bits
            using MODE1 = Field<4, 2>;    // Port n.1 mode bits
            using CNF1 = Field<6, 2>;    // Port n.1 configuration bits
            using MODE2 = Field<8, 2>;    // Port n.2 mode bits
            using CNF2 = Field<10, 2>;    // Port n.2 configuration bits
            using MODE3 = Field<12, 2>;    // Port n.3 mode bits
            using CNF3 = Field<14, 2>;    // Port n.3 configuration bits
            using MODE4 = Field<16, 2>;    // Port n.4 mode bits
            using CNF4 = Field<18, 2>;    // Port n.4 configuration bits
            using MODE5 = Field<20, 2>;    // Port n.5 mode bits
            using CNF5 = Field<22, 2>;    // Port n.5 configuration bits
            using MODE6 = Field<24, 2>;    // Port n.6 mode bits
            using CNF6 = Field<26, 2>;    // Port n.6 configuration bits
            using MODE7 = Field<28, 2>;    // Port n.7 mode bits
            using CNF7 = Field<30, 2>;    // Port n.7 configuration bits
        };

        // Port configuration register high (GPIOn_CRL)
        struct CRH : public Register<0x40011004> {
            using MODE8 = Field<0, 2>;    // Port n.8 mode bits
            using CNF8 = Field<2, 2>;    // Port n.8 configuration bits
            using MODE9 = Field<4, 2>;    // Port n.9 mode bits
            using CNF9 = Field<6, 2>;    // Port n.9 configuration bits
            using MODE10 = Field<8, 2>;    // Port n.10 mode bits
            using CNF10 = Field<10, 2>;    // Port n.10 configuration bits
            using MODE11 = Field<12, 2>;    // Port n.11 mode bits
            using CNF11 = Field<14, 2>;    // Port n.11 configuration bits
            using MODE12 = Field<16, 2>;    // Port n.12 mode bits
            using CNF12 = Field<18, 2>;    // Port n.12 configuration bits
            using MODE13 = Field<20, 2>;    // Port n.13 mode bits
            using CNF13 = Field<22, 2>;    // Port n.13 configuration bits
            using MODE14 = Field<24, 2>;    // Port n.14 mode bits
            using CNF14 = Field<26, 2>;    // Port n.14 configuration bits
            using MODE15 = Field<28, 2>;    // Port n.15 mode bits
            using CNF15 = Field<30, 2>;    // Port n.15 configuration bits
        };

        // Port input data register (GPIOn_IDR)
        struct IDR : public Register<0x40011008> {
            using IDR0 = Field<0, 1>;    // Port input data
            using IDR1 = Field<1, 1>;    // Port input data
            using IDR2 = Field<2, 1>;    // Port input data
            using IDR3 = Field<3, 1>;    // Port input data
            using IDR4 = Field<4, 1>;    // Port input data
            using IDR5 = Field<5, 1>;    // Port input data
            using IDR6 = Field<6, 1>;    // Port input data
            using IDR7 = Field<7, 1>;    // Port input data
            using IDR8 = Field<8, 1>;    // Port input data
            using IDR9 = Field<9, 1>;    // Port input data
            using IDR10 = Field<10, 1>;    // Port input data
            using IDR11 = Field<11, 1>;    // Port input data
            using IDR12 = Field<12, 1>;    // Port input data
            using IDR13 = Field<13, 1>;    // Port input data
            using IDR14 = Field<14, 1>;    // Port input data
            using IDR15 = Field<15, 1>;    // Port input data
        };

        // Port output data register (GPIOn_ODR)
        struct ODR : public Register<0x4001100c> {
            using ODR0 = Field<0, 1>;    // Port output data
            using ODR1 = Field<1, 1>;    // Port output data
            using ODR2 = Field<2, 1>;    // Port output data
            using ODR3 = Field<3, 1>;    // Port output data
            using ODR4 = Field<4, 1>;    // Port output data
            using ODR5 = Field<5, 1>;    // Port output data
            using ODR6 = Field<6, 1>;    // Port output data
            using ODR7 = Field<7, 1>;    // Port output data
            using ODR8 = Field<8, 1>;    // Port output data
            using ODR9 = Field<9, 1>;    // Port output data
            using ODR10 = Field<10, 1>;    // Port output data
            using ODR11 = Field<11, 1>;    // Port output data
            using ODR12 = Field<12, 1>;    // Port output data
            using ODR13 = Field<13, 1>;    // Port output data
            using ODR14 = Field<14, 1>;    // Port output data
            using ODR15 = Field<15, 1>;    // Port output data
        };

        // Port bit set/reset register (GPIOn_BSRR)
        struct BSRR : public Register<0x40011010> {
            using BS0 = Field<0, 1>;    // Set bit 0
            using BS1 = Field<1, 1>;    // Set bit 1
            using BS2 = Field<2, 1>;    // Set bit 1
            using BS3 = Field<3, 1>;    // Set bit 3
            using BS4 = Field<4, 1>;    // Set bit 4
            using BS5 = Field<5, 1>;    // Set bit 5
            using BS6 = Field<6, 1>;    // Set bit 6
            using BS7 = Field<7, 1>;    // Set bit 7
            using BS8 = Field<8, 1>;    // Set bit 8
            using BS9 = Field<9, 1>;    // Set bit 9
            using BS10 = Field<10, 1>;    // Set bit 10
            using BS11 = Field<11, 1>;    // Set bit 11
            using BS12 = Field<12, 1>;    // Set bit 12
            using BS13 = Field<13, 1>;    // Set bit 13
            using BS14 = Field<14, 1>;    // Set bit 14
            using BS15 = Field<15, 1>;    // Set bit 15
            using BR0 = Field<16, 1>;    // Reset bit 0
            using BR1 = Field<17, 1>;    // Reset bit 1
            using BR2 = Field<18, 1>;    // Reset bit 2
            using BR3 = Field<19, 1>;    // Reset bit 3
            using BR4 = Field<20, 1>;    // Reset bit 4
            using BR5 = Field<21, 1>;    // Reset bit 5
            using BR6 = Field<22, 1>;    // Reset bit 6
            using BR7 = Field<23, 1>;    // Reset bit 7
            using BR8 = Field<24, 1>;    // Reset bit 8
            using BR9 = Field<25, 1>;    // Reset bit 9
            using BR10 = Field<26, 1>;    // Reset bit 10
            using BR11 = Field<27, 1>;    // Reset bit 11
            using BR12 = Field<28, 1>;    // Reset bit 12
            using BR13 = Field<29, 1>;    // Reset bit 13
            using BR14 = Field<30, 1>;    // Reset bit 14
            using BR15 = Field<31, 1>;    // Reset bit 15
        };

        // Port bit reset register (GPIOn_BRR)
        struct BRR : public Register<0x40011014> {
            using BR0 = Field<0, 1>;    // Reset bit 0
            using BR1 = Field<1, 1>;    // Reset bit 1
            using BR2 = Field<2, 1>;    // Reset bit 1
            using BR3 = Field<3, 1>;    // Reset bit 3
            using BR4 = Field<4, 1>;    // Reset bit 4
            using BR5 = Field<5, 1>;    // Reset bit 5
            using BR6 = Field<6, 1>;    // Reset bit 6
            using BR7 = Field<7, 1>;    // Reset bit 7
            using BR8 = Field<8, 1>;    // Reset bit 8
            using BR9 = Field<9, 1>;    // Reset bit 9
            using BR10 = Field<10, 1>;    // Reset bit 10
            using BR11 = Field<11, 1>;    // Reset bit 11
            using BR12 = Field<12, 1>;    // Reset bit 12
            using BR13 = Field<13, 1>;    // Reset bit 13
            using BR14 = Field<14, 1>;    // Reset bit 14
            using BR15 = Field<15, 1>;    // Reset bit 15
        };

        // Port configuration lock register
        struct LCKR : public Register<0x40011018> {
            using LCK0 = Field<0, 1>;    // Port A Lock bit 0
            using LCK1 = Field<1, 1>;    // Port A Lock bit 1
            using LCK2 = Field<2, 1>;    // Port A Lock bit 2
            using LCK3 = Field<3, 1>;    // Port A Lock bit 3
            using LCK4 = Field<4, 1>;    // Port A Lock bit 4
            using LCK5 = Field<5, 1>;    // Port A Lock bit 5
            using LCK6 = Field<6, 1>;    // Port A Lock bit 6
            using LCK7 = Field<7, 1>;    // Port A Lock bit 7
            using LCK8 = Field<8, 1>;    // Port A Lock bit 8
            using LCK9 = Field<9, 1>;    // Port A Lock bit 9
            using LCK10 = Field<10, 1>;    // Port A Lock bit 10
            using LCK11 = Field<11, 1>;    // Port A Lock bit 11
            using LCK12 = Field<12, 1>;    // Port A Lock bit 12
            using LCK13 = Field<13, 1>;    // Port A Lock bit 13
            using LCK14 = Field<14, 1>;    // Port A Lock bit 14
            using LCK15 = Field<15, 1>;    // Port A Lock bit 15
            using LCKK = Field<16, 1>;    // Lock key
        };

    };

    // General purpose I/O
    struct GPIOD {
        // Port configuration register low (GPIOn_CRL)
        struct CRL : public Register<0x40011400> {
            using MODE0 = Field<0, 2>;    // Port n.0 mode bits
            using CNF0 = Field<2, 2>;    // Port n.0 configuration bits
            using MODE1 = Field<4, 2>;    // Port n.1 mode bits
            using CNF1 = Field<6, 2>;    // Port n.1 configuration bits
            using MODE2 = Field<8, 2>;    // Port n.2 mode bits
            using CNF2 = Field<10, 2>;    // Port n.2 configuration bits
            using MODE3 = Field<12, 2>;    // Port n.3 mode bits
            using CNF3 = Field<14, 2>;    // Port n.3 configuration bits
            using MODE4 = Field<16, 2>;    // Port n.4 mode bits
            using CNF4 = Field<18, 2>;    // Port n.4 configuration bits
            using MODE5 = Field<20, 2>;    // Port n.5 mode bits
            using CNF5 = Field<22, 2>;    // Port n.5 configuration bits
            using MODE6 = Field<24, 2>;    // Port n.6 mode bits
            using CNF6 = Field<26, 2>;    // Port n.6 configuration bits
            using MODE7 = Field<28, 2>;    // Port n.7 mode bits
            using CNF7 = Field<30, 2>;    // Port n.7 configuration bits
        };

        // Port configuration register high (GPIOn_CRL)
        struct CRH : public Register<0x40011404> {
            using MODE8 = Field<0, 2>;    // Port n.8 mode bits
            using CNF8 = Field<2, 2>;    // Port n.8 configuration bits
            using MODE9 = Field<4, 2>;    // Port n.9 mode bits
            using CNF9 = Field<6, 2>;    // Port n.9 configuration bits
            using MODE10 = Field<8, 2>;    // Port n.10 mode bits
            using CNF10 = Field<10, 2>;    // Port n.10 configuration bits
            using MODE11 = Field<12, 2>;    // Port n.11 mode bits
            using CNF11 = Field<14, 2>;    // Port n.11 configuration bits
            using MODE12 = Field<16, 2>;    // Port n.12 mode bits
            using CNF12 = Field<18, 2>;    // Port n.12 configuration bits
            using MODE13 = Field<20, 2>;    // Port n.13 mode bits
            using CNF13 = Field<22, 2>;    // Port n.13 configuration bits
            using MODE14 = Field<24, 2>;    // Port n.14 mode bits
            using CNF14 = Field<26, 2>;    // Port n.14 configuration bits
            using MODE15 = Field<28, 2>;    // Port n.15 mode bits
            using CNF15 = Field<30, 2>;    // Port n.15 configuration bits
        };

        // Port input data register (GPIOn_IDR)
        struct IDR : public Register<0x40011408> {
            using IDR0 = Field<0, 1>;    // Port input data
            using IDR1 = Field<1, 1>;    // Port input data
            using IDR2 = Field<2, 1>;    // Port input data
            using IDR3 = Field<3, 1>;    // Port input data
            using IDR4 = Field<4, 1>;    // Port input data
            using IDR5 = Field<5, 1>;    // Port input data
            using IDR6 = Field<6, 1>;    // Port input data
            using IDR7 = Field<7, 1>;    // Port input data
            using IDR8 = Field<8, 1>;    // Port input data
            using IDR9 = Field<9, 1>;    // Port input data
            using IDR10 = Field<10, 1>;    // Port input data
            using IDR11 = Field<11, 1>;    // Port input data
            using IDR12 = Field<12, 1>;    // Port input data
            using IDR13 = Field<13, 1>;    // Port input data
            using IDR14 = Field<14, 1>;    // Port input data
            using IDR15 = Field<15, 1>;    // Port input data
        };

        // Port output data register (GPIOn_ODR)
        struct ODR : public Register<0x4001140c> {
            using ODR0 = Field<0, 1>;    // Port output data
            using ODR1 = Field<1, 1>;    // Port output data
            using ODR2 = Field<2, 1>;    // Port output data
            using ODR3 = Field<3, 1>;    // Port output data
            using ODR4 = Field<4, 1>;    // Port output data
            using ODR5 = Field<5, 1>;    // Port output data
            using ODR6 = Field<6, 1>;    // Port output data
            using ODR7 = Field<7, 1>;    // Port output data
            using ODR8 = Field<8, 1>;    // Port output data
            using ODR9 = Field<9, 1>;    // Port output data
            using ODR10 = Field<10, 1>;    // Port output data
            using ODR11 = Field<11, 1>;    // Port output data
            using ODR12 = Field<12, 1>;    // Port output data
            using ODR13 = Field<13, 1>;    // Port output data
            using ODR14 = Field<14, 1>;    // Port output data
            using ODR15 = Field<15, 1>;    // Port output data
        };

        // Port bit set/reset register (GPIOn_BSRR)
        struct BSRR : public Register<0x40011410> {
            using BS0 = Field<0, 1>;    // Set bit 0
            using BS1 = Field<1, 1>;    // Set bit 1
            using BS2 = Field<2, 1>;    // Set bit 1
            using BS3 = Field<3, 1>;    // Set bit 3
            using BS4 = Field<4, 1>;    // Set bit 4
            using BS5 = Field<5, 1>;    // Set bit 5
            using BS6 = Field<6, 1>;    // Set bit 6
            using BS7 = Field<7, 1>;    // Set bit 7
            using BS8 = Field<8, 1>;    // Set bit 8
            using BS9 = Field<9, 1>;    // Set bit 9
            using BS10 = Field<10, 1>;    // Set bit 10
            using BS11 = Field<11, 1>;    // Set bit 11
            using BS12 = Field<12, 1>;    // Set bit 12
            using BS13 = Field<13, 1>;    // Set bit 13
            using BS14 = Field<14, 1>;    // Set bit 14
            using BS15 = Field<15, 1>;    // Set bit 15
            using BR0 = Field<16, 1>;    // Reset bit 0
            using BR1 = Field<17, 1>;    // Reset bit 1
            using BR2 = Field<18, 1>;    // Reset bit 2
            using BR3 = Field<19, 1>;    // Reset bit 3
            using BR4 = Field<20, 1>;    // Reset bit 4
            using BR5 = Field<21, 1>;    // Reset bit 5
            using BR6 = Field<22, 1>;    // Reset bit 6
            using BR7 = Field<23, 1>;    // Reset bit 7
            using BR8 = Field<24, 1>;    // Reset bit 8
            using BR9 = Field<25, 1>;    // Reset bit 9
            using BR10 = Field<26, 1>;    // Reset bit 10
            using BR11 = Field<27, 1>;    // Reset bit 11
            using BR12 = Field<28, 1>;    // Reset bit 12
            using BR13 = Field<29, 1>;    // Reset bit 13
            using BR14 = Field<30, 1>;    // Reset bit 14
            using BR15 = Field<31, 1>;    // Reset bit 15
        };

        // Port bit reset register (GPIOn_BRR)
        struct BRR : public Register<0x40011414> {
            using BR0 = Field<0, 1>;    // Reset bit 0
            using BR1 = Field<1, 1>;    // Reset bit 1
            using BR2 = Field<2, 1>;    // Reset bit 1
            using BR3 = Field<3, 1>;    // Reset bit 3
            using BR4 = Field<4, 1>;    // Reset bit 4
            using BR5 = Field<5, 1>;    // Reset bit 5
            using BR6 = Field<6, 1>;    // Reset bit 6
            using BR7 = Field<7, 1>;    // Reset bit 7
            using BR8 = Field<8, 1>;    // Reset bit 8
            using BR9 = Field<9, 1>;    // Reset bit 9
            using BR10 = Field<10, 1>;    // Reset bit 10
            using BR11 = Field<11, 1>;    // Reset bit 11
            using BR12 = Field<12, 1>;    // Reset bit 12
            using BR13 = Field<13, 1>;    // Reset bit 13
            using BR14 = Field<14, 1>;    // Reset bit 14
            using BR15 = Field<15, 1>;    // Reset bit 15
        };

        // Port configuration lock register
        struct LCKR : public Register<0x40011418> {
            using LCK0 = Field<0, 1>;    // Port A Lock bit 0
            using LCK1 = Field<1, 1>;    // Port A Lock bit 1
            using LCK2 = Field<2, 1>;    // Port A Lock bit 2
            using LCK3 = Field<3, 1>;    // Port A Lock bit 3
            using LCK4 = Field<4, 1>;    // Port A Lock bit 4
            using LCK5 = Field<5, 1>;    // Port A Lock bit 5
            using LCK6 = Field<6, 1>;    // Port A Lock bit 6
            using LCK7 = Field<7, 1>;    // Port A Lock bit 7
            using LCK8 = Field<8, 1>;    // Port A Lock bit 8
            using LCK9 = Field<9, 1>;    // Port A Lock bit 9
            using LCK10 = Field<10, 1>;    // Port A Lock bit 10
            using LCK11 = Field<11, 1>;    // Port A Lock bit 11
            using LCK12 = Field<12, 1>;    // Port A Lock bit 12
            using LCK13 = Field<13, 1>;    // Port A Lock bit 13
            using LCK14 = Field<14, 1>;    // Port A Lock bit 14
            using LCK15 = Field<15, 1>;    // Port A Lock bit 15
            using LCKK = Field<16, 1>;    // Lock key
        };

    };

    // General purpose I/O
    struct GPIOE {
        // Port configuration register low (GPIOn_CRL)
        struct CRL : public Register<0x40011800> {
            using MODE0 = Field<0, 2>;    // Port n.0 mode bits
            using CNF0 = Field<2, 2>;    // Port n.0 configuration bits
            using MODE1 = Field<4, 2>;    // Port n.1 mode bits
            using CNF1 = Field<6, 2>;    // Port n.1 configuration bits
            using MODE2 = Field<8, 2>;    // Port n.2 mode bits
            using CNF2 = Field<10, 2>;    // Port n.2 configuration bits
            using MODE3 = Field<12, 2>;    // Port n.3 mode bits
            using CNF3 = Field<14, 2>;    // Port n.3 configuration bits
            using MODE4 = Field<16, 2>;    // Port n.4 mode bits
            using CNF4 = Field<18, 2>;    // Port n.4 configuration bits
            using MODE5 = Field<20, 2>;    // Port n.5 mode bits
            using CNF5 = Field<22, 2>;    // Port n.5 configuration bits
            using MODE6 = Field<24, 2>;    // Port n.6 mode bits
            using CNF6 = Field<26, 2>;    // Port n.6 configuration bits
            using MODE7 = Field<28, 2>;    // Port n.7 mode bits
            using CNF7 = Field<30, 2>;    // Port n.7 configuration bits
        };

        // Port configuration register high (GPIOn_CRL)
        struct CRH : public Register<0x40011804> {
            using MODE8 = Field<0, 2>;    // Port n.8 mode bits
            using CNF8 = Field<2, 2>;    // Port n.8 configuration bits
            using MODE9 = Field<4, 2>;    // Port n.9 mode bits
            using CNF9 = Field<6, 2>;    // Port n.9 configuration bits
            using MODE10 = Field<8, 2>;    // Port n.10 mode bits
            using CNF10 = Field<10, 2>;    // Port n.10 configuration bits
            using MODE11 = Field<12, 2>;    // Port n.11 mode bits
            using CNF11 = Field<14, 2>;    // Port n.11 configuration bits
            using MODE12 = Field<16, 2>;    // Port n.12 mode bits
            using CNF12 = Field<18, 2>;    // Port n.12 configuration bits
            using MODE13 = Field<20, 2>;    // Port n.13 mode bits
            using CNF13 = Field<22, 2>;    // Port n.13 configuration bits
            using MODE14 = Field<24, 2>;    // Port n.14 mode bits
            using CNF14 = Field<26, 2>;    // Port n.14 configuration bits
            using MODE15 = Field<28, 2>;    // Port n.15 mode bits
            using CNF15 = Field<30, 2>;    // Port n.15 configuration bits
        };

        // Port input data register (GPIOn_IDR)
        struct IDR : public Register<0x40011808> {
            using IDR0 = Field<0, 1>;    // Port input data
            using IDR1 = Field<1, 1>;    // Port input data
            using IDR2 = Field<2, 1>;    // Port input data
            using IDR3 = Field<3, 1>;    // Port input data
            using IDR4 = Field<4, 1>;    // Port input data
            using IDR5 = Field<5, 1>;    // Port input data
            using IDR6 = Field<6, 1>;    // Port input data
            using IDR7 = Field<7, 1>;    // Port input data
            using IDR8 = Field<8, 1>;    // Port input data
            using IDR9 = Field<9, 1>;    // Port input data
            using IDR10 = Field<10, 1>;    // Port input data
            using IDR11 = Field<11, 1>;    // Port input data
            using IDR12 = Field<12, 1>;    // Port input data
            using IDR13 = Field<13, 1>;    // Port input data
            using IDR14 = Field<14, 1>;    // Port input data
            using IDR15 = Field<15, 1>;    // Port input data
        };

        // Port output data register (GPIOn_ODR)
        struct ODR : public Register<0x4001180c> {
            using ODR0 = Field<0, 1>;    // Port output data
            using ODR1 = Field<1, 1>;    // Port output data
            using ODR2 = Field<2, 1>;    // Port output data
            using ODR3 = Field<3, 1>;    // Port output data
            using ODR4 = Field<4, 1>;    // Port output data
            using ODR5 = Field<5, 1>;    // Port output data
            using ODR6 = Field<6, 1>;    // Port output data
            using ODR7 = Field<7, 1>;    // Port output data
            using ODR8 = Field<8, 1>;    // Port output data
            using ODR9 = Field<9, 1>;    // Port output data
            using ODR10 = Field<10, 1>;    // Port output data
            using ODR11 = Field<11, 1>;    // Port output data
            using ODR12 = Field<12, 1>;    // Port output data
            using ODR13 = Field<13, 1>;    // Port output data
            using ODR14 = Field<14, 1>;    // Port output data
            using ODR15 = Field<15, 1>;    // Port output data
        };

        // Port bit set/reset register (GPIOn_BSRR)
        struct BSRR : public Register<0x40011810> {
            using BS0 = Field<0, 1>;    // Set bit 0
            using BS1 = Field<1, 1>;    // Set bit 1
            using BS2 = Field<2, 1>;    // Set bit 1
            using BS3 = Field<3, 1>;    // Set bit 3
            using BS4 = Field<4, 1>;    // Set bit 4
            using BS5 = Field<5, 1>;    // Set bit 5
            using BS6 = Field<6, 1>;    // Set bit 6
            using BS7 = Field<7, 1>;    // Set bit 7
            using BS8 = Field<8, 1>;    // Set bit 8
            using BS9 = Field<9, 1>;    // Set bit 9
            using BS10 = Field<10, 1>;    // Set bit 10
            using BS11 = Field<11, 1>;    // Set bit 11
            using BS12 = Field<12, 1>;    // Set bit 12
            using BS13 = Field<13, 1>;    // Set bit 13
            using BS14 = Field<14, 1>;    // Set bit 14
            using BS15 = Field<15, 1>;    // Set bit 15
            using BR0 = Field<16, 1>;    // Reset bit 0
            using BR1 = Field<17, 1>;    // Reset bit 1
            using BR2 = Field<18, 1>;    // Reset bit 2
            using BR3 = Field<19, 1>;    // Reset bit 3
            using BR4 = Field<20, 1>;    // Reset bit 4
            using BR5 = Field<21, 1>;    // Reset bit 5
            using BR6 = Field<22, 1>;    // Reset bit 6
            using BR7 = Field<23, 1>;    // Reset bit 7
            using BR8 = Field<24, 1>;    // Reset bit 8
            using BR9 = Field<25, 1>;    // Reset bit 9
            using BR10 = Field<26, 1>;    // Reset bit 10
            using BR11 = Field<27, 1>;    // Reset bit 11
            using BR12 = Field<28, 1>;    // Reset bit 12
            using BR13 = Field<29, 1>;    // Reset bit 13
            using BR14 = Field<30, 1>;    // Reset bit 14
            using BR15 = Field<31, 1>;    // Reset bit 15
        };

        // Port bit reset register (GPIOn_BRR)
        struct BRR : public Register<0x40011814> {
            using BR0 = Field<0, 1>;    // Reset bit 0
            using BR1 = Field<1, 1>;    // Reset bit 1
            using BR2 = Field<2, 1>;    // Reset bit 1
            using BR3 = Field<3, 1>;    // Reset bit 3
            using BR4 = Field<4, 1>;    // Reset bit 4
            using BR5 = Field<5, 1>;    // Reset bit 5
            using BR6 = Field<6, 1>;    // Reset bit 6
            using BR7 = Field<7, 1>;    // Reset bit 7
            using BR8 = Field<8, 1>;    // Reset bit 8
            using BR9 = Field<9, 1>;    // Reset bit 9
            using BR10 = Field<10, 1>;    // Reset bit 10
            using BR11 = Field<11, 1>;    // Reset bit 11
            using BR12 = Field<12, 1>;    // Reset bit 12
            using BR13 = Field<13, 1>;    // Reset bit 13
            using BR14 = Field<14, 1>;    // Reset bit 14
            using BR15 = Field<15, 1>;    // Reset bit 15
        };

        // Port configuration lock register
        struct LCKR : public Register<0x40011818> {
            using LCK0 = Field<0, 1>;    // Port A Lock bit 0
            using LCK1 = Field<1, 1>;    // Port A Lock bit 1
            using LCK2 = Field<2, 1>;    // Port A Lock bit 2
            using LCK3 = Field<3, 1>;    // Port A Lock bit 3
            using LCK4 = Field<4, 1>;    // Port A Lock bit 4
            using LCK5 = Field<5, 1>;    // Port A Lock bit 5
            using LCK6 = Field<6, 1>;    // Port A Lock bit 6
            using LCK7 = Field<7, 1>;    // Port A Lock bit 7
            using LCK8 = Field<8, 1>;    // Port A Lock bit 8
            using LCK9 = Field<9, 1>;    // Port A Lock bit 9
            using LCK10 = Field<10, 1>;    // Port A Lock bit 10
            using LCK11 = Field<11, 1>;    // Port A Lock bit 11
            using LCK12 = Field<12, 1>;    // Port A Lock bit 12
            using LCK13 = Field<13, 1>;    // Port A Lock bit 13
            using LCK14 = Field<14, 1>;    // Port A Lock bit 14
            using LCK15 = Field<15, 1>;    // Port A Lock bit 15
            using LCKK = Field<16, 1>;    // Lock key
        };

    };

    // General purpose I/O
    struct GPIOF {
        // Port configuration register low (GPIOn_CRL)
        struct CRL : public Register<0x40011c00> {
            using MODE0 = Field<0, 2>;    // Port n.0 mode bits
            using CNF0 = Field<2, 2>;    // Port n.0 configuration bits
            using MODE1 = Field<4, 2>;    // Port n.1 mode bits
            using CNF1 = Field<6, 2>;    // Port n.1 configuration bits
            using MODE2 = Field<8, 2>;    // Port n.2 mode bits
            using CNF2 = Field<10, 2>;    // Port n.2 configuration bits
            using MODE3 = Field<12, 2>;    // Port n.3 mode bits
            using CNF3 = Field<14, 2>;    // Port n.3 configuration bits
            using MODE4 = Field<16, 2>;    // Port n.4 mode bits
            using CNF4 = Field<18, 2>;    // Port n.4 configuration bits
            using MODE5 = Field<20, 2>;    // Port n.5 mode bits
            using CNF5 = Field<22, 2>;    // Port n.5 configuration bits
            using MODE6 = Field<24, 2>;    // Port n.6 mode bits
            using CNF6 = Field<26, 2>;    // Port n.6 configuration bits
            using MODE7 = Field<28, 2>;    // Port n.7 mode bits
            using CNF7 = Field<30, 2>;    // Port n.7 configuration bits
        };

        // Port configuration register high (GPIOn_CRL)
        struct CRH : public Register<0x40011c04> {
            using MODE8 = Field<0, 2>;    // Port n.8 mode bits
            using CNF8 = Field<2, 2>;    // Port n.8 configuration bits
            using MODE9 = Field<4, 2>;    // Port n.9 mode bits
            using CNF9 = Field<6, 2>;    // Port n.9 configuration bits
            using MODE10 = Field<8, 2>;    // Port n.10 mode bits
            using CNF10 = Field<10, 2>;    // Port n.10 configuration bits
            using MODE11 = Field<12, 2>;    // Port n.11 mode bits
            using CNF11 = Field<14, 2>;    // Port n.11 configuration bits
            using MODE12 = Field<16, 2>;    // Port n.12 mode bits
            using CNF12 = Field<18, 2>;    // Port n.12 configuration bits
            using MODE13 = Field<20, 2>;    // Port n.13 mode bits
            using CNF13 = Field<22, 2>;    // Port n.13 configuration bits
            using MODE14 = Field<24, 2>;    // Port n.14 mode bits
            using CNF14 = Field<26, 2>;    // Port n.14 configuration bits
            using MODE15 = Field<28, 2>;    // Port n.15 mode bits
            using CNF15 = Field<30, 2>;    // Port n.15 configuration bits
        };

        // Port input data register (GPIOn_IDR)
        struct IDR : public Register<0x40011c08> {
            using IDR0 = Field<0, 1>;    // Port input data
            using IDR1 = Field<1, 1>;    // Port input data
            using IDR2 = Field<2, 1>;    // Port input data
            using IDR3 = Field<3, 1>;    // Port input data
            using IDR4 = Field<4, 1>;    // Port input data
            using IDR5 = Field<5, 1>;    // Port input data
            using IDR6 = Field<6, 1>;    // Port input data
            using IDR7 = Field<7, 1>;    // Port input data
            using IDR8 = Field<8, 1>;    // Port input data
            using IDR9 = Field<9, 1>;    // Port input data
            using IDR10 = Field<10, 1>;    // Port input data
            using IDR11 = Field<11, 1>;    // Port input data
            using IDR12 = Field<12, 1>;    // Port input data
            using IDR13 = Field<13, 1>;    // Port input data
            using IDR14 = Field<14, 1>;    // Port input data
            using IDR15 = Field<15, 1>;    // Port input data
        };

        // Port output data register (GPIOn_ODR)
        struct ODR : public Register<0x40011c0c> {
            using ODR0 = Field<0, 1>;    // Port output data
            using ODR1 = Field<1, 1>;    // Port output data
            using ODR2 = Field<2, 1>;    // Port output data
            using ODR3 = Field<3, 1>;    // Port output data
            using ODR4 = Field<4, 1>;    // Port output data
            using ODR5 = Field<5, 1>;    // Port output data
            using ODR6 = Field<6, 1>;    // Port output data
            using ODR7 = Field<7, 1>;    // Port output data
            using ODR8 = Field<8, 1>;    // Port output data
            using ODR9 = Field<9, 1>;    // Port output data
            using ODR10 = Field<10, 1>;    // Port output data
            using ODR11 = Field<11, 1>;    // Port output data
            using ODR12 = Field<12, 1>;    // Port output data
            using ODR13 = Field<13, 1>;    // Port output data
            using ODR14 = Field<14, 1>;    // Port output data
            using ODR15 = Field<15, 1>;    // Port output data
        };

        // Port bit set/reset register (GPIOn_BSRR)
        struct BSRR : public Register<0x40011c10> {
            using BS0 = Field<0, 1>;    // Set bit 0
            using BS1 = Field<1, 1>;    // Set bit 1
            using BS2 = Field<2, 1>;    // Set bit 1
            using BS3 = Field<3, 1>;    // Set bit 3
            using BS4 = Field<4, 1>;    // Set bit 4
            using BS5 = Field<5, 1>;    // Set bit 5
            using BS6 = Field<6, 1>;    // Set bit 6
            using BS7 = Field<7, 1>;    // Set bit 7
            using BS8 = Field<8, 1>;    // Set bit 8
            using BS9 = Field<9, 1>;    // Set bit 9
            using BS10 = Field<10, 1>;    // Set bit 10
            using BS11 = Field<11, 1>;    // Set bit 11
            using BS12 = Field<12, 1>;    // Set bit 12
            using BS13 = Field<13, 1>;    // Set bit 13
            using BS14 = Field<14, 1>;    // Set bit 14
            using BS15 = Field<15, 1>;    // Set bit 15
            using BR0 = Field<16, 1>;    // Reset bit 0
            using BR1 = Field<17, 1>;    // Reset bit 1
            using BR2 = Field<18, 1>;    // Reset bit 2
            using BR3 = Field<19, 1>;    // Reset bit 3
            using BR4 = Field<20, 1>;    // Reset bit 4
            using BR5 = Field<21, 1>;    // Reset bit 5
            using BR6 = Field<22, 1>;    // Reset bit 6
            using BR7 = Field<23, 1>;    // Reset bit 7
            using BR8 = Field<24, 1>;    // Reset bit 8
            using BR9 = Field<25, 1>;    // Reset bit 9
            using BR10 = Field<26, 1>;    // Reset bit 10
            using BR11 = Field<27, 1>;    // Reset bit 11
            using BR12 = Field<28, 1>;    // Reset bit 12
            using BR13 = Field<29, 1>;    // Reset bit 13
            using BR14 = Field<30, 1>;    // Reset bit 14
            using BR15 = Field<31, 1>;    // Reset bit 15
        };

        // Port bit reset register (GPIOn_BRR)
        struct BRR : public Register<0x40011c14> {
            using BR0 = Field<0, 1>;    // Reset bit 0
            using BR1 = Field<1, 1>;    // Reset bit 1
            using BR2 = Field<2, 1>;    // Reset bit 1
            using BR3 = Field<3, 1>;    // Reset bit 3
            using BR4 = Field<4, 1>;    // Reset bit 4
            using BR5 = Field<5, 1>;    // Reset bit 5
            using BR6 = Field<6, 1>;    // Reset bit 6
            using BR7 = Field<7, 1>;    // Reset bit 7
            using BR8 = Field<8, 1>;    // Reset bit 8
            using BR9 = Field<9, 1>;    // Reset bit 9
            using BR10 = Field<10, 1>;    // Reset bit 10
            using BR11 = Field<11, 1>;    // Reset bit 11
            using BR12 = Field<12, 1>;    // Reset bit 12
            using BR13 = Field<13, 1>;    // Reset bit 13
            using BR14 = Field<14, 1>;    // Reset bit 14
            using BR15 = Field<15, 1>;    // Reset bit 15
        };

        // Port configuration lock register
        struct LCKR : public Register<0x40011c18> {
            using LCK0 = Field<0, 1>;    // Port A Lock bit 0
            using LCK1 = Field<1, 1>;    // Port A Lock bit 1
            using LCK2 = Field<2, 1>;    // Port A Lock bit 2
            using LCK3 = Field<3, 1>;    // Port A Lock bit 3
            using LCK4 = Field<4, 1>;    // Port A Lock bit 4
            using LCK5 = Field<5, 1>;    // Port A Lock bit 5
            using LCK6 = Field<6, 1>;    // Port A Lock bit 6
            using LCK7 = Field<7, 1>;    // Port A Lock bit 7
            using LCK8 = Field<8, 1>;    // Port A Lock bit 8
            using LCK9 = Field<9, 1>;    // Port A Lock bit 9
            using LCK10 = Field<10, 1>;    // Port A Lock bit 10
            using LCK11 = Field<11, 1>;    // Port A Lock bit 11
            using LCK12 = Field<12, 1>;    // Port A Lock bit 12
            using LCK13 = Field<13, 1>;    // Port A Lock bit 13
            using LCK14 = Field<14, 1>;    // Port A Lock bit 14
            using LCK15 = Field<15, 1>;    // Port A Lock bit 15
            using LCKK = Field<16, 1>;    // Lock key
        };

    };

    // General purpose I/O
    struct GPIOG {
        // Port configuration register low (GPIOn_CRL)
        struct CRL : public Register<0x40012000> {
            using MODE0 = Field<0, 2>;    // Port n.0 mode bits
            using CNF0 = Field<2, 2>;    // Port n.0 configuration bits
            using MODE1 = Field<4, 2>;    // Port n.1 mode bits
            using CNF1 = Field<6, 2>;    // Port n.1 configuration bits
            using MODE2 = Field<8, 2>;    // Port n.2 mode bits
            using CNF2 = Field<10, 2>;    // Port n.2 configuration bits
            using MODE3 = Field<12, 2>;    // Port n.3 mode bits
            using CNF3 = Field<14, 2>;    // Port n.3 configuration bits
            using MODE4 = Field<16, 2>;    // Port n.4 mode bits
            using CNF4 = Field<18, 2>;    // Port n.4 configuration bits
            using MODE5 = Field<20, 2>;    // Port n.5 mode bits
            using CNF5 = Field<22, 2>;    // Port n.5 configuration bits
            using MODE6 = Field<24, 2>;    // Port n.6 mode bits
            using CNF6 = Field<26, 2>;    // Port n.6 configuration bits
            using MODE7 = Field<28, 2>;    // Port n.7 mode bits
            using CNF7 = Field<30, 2>;    // Port n.7 configuration bits
        };

        // Port configuration register high (GPIOn_CRL)
        struct CRH : public Register<0x40012004> {
            using MODE8 = Field<0, 2>;    // Port n.8 mode bits
            using CNF8 = Field<2, 2>;    // Port n.8 configuration bits
            using MODE9 = Field<4, 2>;    // Port n.9 mode bits
            using CNF9 = Field<6, 2>;    // Port n.9 configuration bits
            using MODE10 = Field<8, 2>;    // Port n.10 mode bits
            using CNF10 = Field<10, 2>;    // Port n.10 configuration bits
            using MODE11 = Field<12, 2>;    // Port n.11 mode bits
            using CNF11 = Field<14, 2>;    // Port n.11 configuration bits
            using MODE12 = Field<16, 2>;    // Port n.12 mode bits
            using CNF12 = Field<18, 2>;    // Port n.12 configuration bits
            using MODE13 = Field<20, 2>;    // Port n.13 mode bits
            using CNF13 = Field<22, 2>;    // Port n.13 configuration bits
            using MODE14 = Field<24, 2>;    // Port n.14 mode bits
            using CNF14 = Field<26, 2>;    // Port n.14 configuration bits
            using MODE15 = Field<28, 2>;    // Port n.15 mode bits
            using CNF15 = Field<30, 2>;    // Port n.15 configuration bits
        };

        // Port input data register (GPIOn_IDR)
        struct IDR : public Register<0x40012008> {
            using IDR0 = Field<0, 1>;    // Port input data
            using IDR1 = Field<1, 1>;    // Port input data
            using IDR2 = Field<2, 1>;    // Port input data
            using IDR3 = Field<3, 1>;    // Port input data
            using IDR4 = Field<4, 1>;    // Port input data
            using IDR5 = Field<5, 1>;    // Port input data
            using IDR6 = Field<6, 1>;    // Port input data
            using IDR7 = Field<7, 1>;    // Port input data
            using IDR8 = Field<8, 1>;    // Port input data
            using IDR9 = Field<9, 1>;    // Port input data
            using IDR10 = Field<10, 1>;    // Port input data
            using IDR11 = Field<11, 1>;    // Port input data
            using IDR12 = Field<12, 1>;    // Port input data
            using IDR13 = Field<13, 1>;    // Port input data
            using IDR14 = Field<14, 1>;    // Port input data
            using IDR15 = Field<15, 1>;    // Port input data
        };

        // Port output data register (GPIOn_ODR)
        struct ODR : public Register<0x4001200c> {
            using ODR0 = Field<0, 1>;    // Port output data
            using ODR1 = Field<1, 1>;    // Port output data
            using ODR2 = Field<2, 1>;    // Port output data
            using ODR3 = Field<3, 1>;    // Port output data
            using ODR4 = Field<4, 1>;    // Port output data
            using ODR5 = Field<5, 1>;    // Port output data
            using ODR6 = Field<6, 1>;    // Port output data
            using ODR7 = Field<7, 1>;    // Port output data
            using ODR8 = Field<8, 1>;    // Port output data
            using ODR9 = Field<9, 1>;    // Port output data
            using ODR10 = Field<10, 1>;    // Port output data
            using ODR11 = Field<11, 1>;    // Port output data
            using ODR12 = Field<12, 1>;    // Port output data
            using ODR13 = Field<13, 1>;    // Port output data
            using ODR14 = Field<14, 1>;    // Port output data
            using ODR15 = Field<15, 1>;    // Port output data
        };

        // Port bit set/reset register (GPIOn_BSRR)
        struct BSRR : public Register<0x40012010> {
            using BS0 = Field<0, 1>;    // Set bit 0
            using BS1 = Field<1, 1>;    // Set bit 1
            using BS2 = Field<2, 1>;    // Set bit 1
            using BS3 = Field<3, 1>;    // Set bit 3
            using BS4 = Field<4, 1>;    // Set bit 4
            using BS5 = Field<5, 1>;    // Set bit 5
            using BS6 = Field<6, 1>;    // Set bit 6
            using BS7 = Field<7, 1>;    // Set bit 7
            using BS8 = Field<8, 1>;    // Set bit 8
            using BS9 = Field<9, 1>;    // Set bit 9
            using BS10 = Field<10, 1>;    // Set bit 10
            using BS11 = Field<11, 1>;    // Set bit 11
            using BS12 = Field<12, 1>;    // Set bit 12
            using BS13 = Field<13, 1>;    // Set bit 13
            using BS14 = Field<14, 1>;    // Set bit 14
            using BS15 = Field<15, 1>;    // Set bit 15
            using BR0 = Field<16, 1>;    // Reset bit 0
            using BR1 = Field<17, 1>;    // Reset bit 1
            using BR2 = Field<18, 1>;    // Reset bit 2
            using BR3 = Field<19, 1>;    // Reset bit 3
            using BR4 = Field<20, 1>;    // Reset bit 4
            using BR5 = Field<21, 1>;    // Reset bit 5
            using BR6 = Field<22, 1>;    // Reset bit 6
            using BR7 = Field<23, 1>;    // Reset bit 7
            using BR8 = Field<24, 1>;    // Reset bit 8
            using BR9 = Field<25, 1>;    // Reset bit 9
            using BR10 = Field<26, 1>;    // Reset bit 10
            using BR11 = Field<27, 1>;    // Reset bit 11
            using BR12 = Field<28, 1>;    // Reset bit 12
            using BR13 = Field<29, 1>;    // Reset bit 13
            using BR14 = Field<30, 1>;    // Reset bit 14
            using BR15 = Field<31, 1>;    // Reset bit 15
        };

        // Port bit reset register (GPIOn_BRR)
        struct BRR : public Register<0x40012014> {
            using BR0 = Field<0, 1>;    // Reset bit 0
            using BR1 = Field<1, 1>;    // Reset bit 1
            using BR2 = Field<2, 1>;    // Reset bit 1
            using BR3 = Field<3, 1>;    // Reset bit 3
            using BR4 = Field<4, 1>;    // Reset bit 4
            using BR5 = Field<5, 1>;    // Reset bit 5
            using BR6 = Field<6, 1>;    // Reset bit 6
            using BR7 = Field<7, 1>;    // Reset bit 7
            using BR8 = Field<8, 1>;    // Reset bit 8
            using BR9 = Field<9, 1>;    // Reset bit 9
            using BR10 = Field<10, 1>;    // Reset bit 10
            using BR11 = Field<11, 1>;    // Reset bit 11
            using BR12 = Field<12, 1>;    // Reset bit 12
            using BR13 = Field<13, 1>;    // Reset bit 13
            using BR14 = Field<14, 1>;    // Reset bit 14
            using BR15 = Field<15, 1>;    // Reset bit 15
        };

        // Port configuration lock register
        struct LCKR : public Register<0x40012018> {
            using LCK0 = Field<0, 1>;    // Port A Lock bit 0
            using LCK1 = Field<1, 1>;    // Port A Lock bit 1
            using LCK2 = Field<2, 1>;    // Port A Lock bit 2
            using LCK3 = Field<3, 1>;    // Port A Lock bit 3
            using LCK4 = Field<4, 1>;    // Port A Lock bit 4
            using LCK5 = Field<5, 1>;    // Port A Lock bit 5
            using LCK6 = Field<6, 1>;    // Port A Lock bit 6
            using LCK7 = Field<7, 1>;    // Port A Lock bit 7
            using LCK8 = Field<8, 1>;    // Port A Lock bit 8
            using LCK9 = Field<9, 1>;    // Port A Lock bit 9
            using LCK10 = Field<10, 1>;    // Port A Lock bit 10
            using LCK11 = Field<11, 1>;    // Port A Lock bit 11
            using LCK12 = Field<12, 1>;    // Port A Lock bit 12
            using LCK13 = Field<13, 1>;    // Port A Lock bit 13
            using LCK14 = Field<14, 1>;    // Port A Lock bit 14
            using LCK15 = Field<15, 1>;    // Port A Lock bit 15
            using LCKK = Field<16, 1>;    // Lock key
        };

    };

    // Alternate function I/O
    struct AFIO {
        // Event Control Register (AFIO_EVCR)
        struct EVCR : public Register<0x40010000> {
            using PIN = Field<0, 4>;    // Pin selection
            using PORT = Field<4, 3>;    // Port selection
            using EVOE = Field<7, 1>;    // Event Output Enable
        };

        // AF remap and debug I/O configuration register (AFIO_MAPR)
        struct MAPR : public Register<0x40010004> {
            using SPI1_REMAP = Field<0, 1>;    // SPI1 remapping
            using I2C1_REMAP = Field<1, 1>;    // I2C1 remapping
            using USART1_REMAP = Field<2, 1>;    // USART1 remapping
            using USART2_REMAP = Field<3, 1>;    // USART2 remapping
            using USART3_REMAP = Field<4, 2>;    // USART3 remapping
            using TIM1_REMAP = Field<6, 2>;    // TIM1 remapping
            using TIM2_REMAP = Field<8, 2>;    // TIM2 remapping
            using TIM3_REMAP = Field<10, 2>;    // TIM3 remapping
            using TIM4_REMAP = Field<12, 1>;    // TIM4 remapping
            using PD01_REMAP = Field<15, 1>;    // Port D0/Port D1 mapping on OSCIN/OSCOUT
            using TIM5CH4_IREMAP = Field<16, 1>;    // Set and cleared by software
            using SWJ_CFG = Field<24, 3>;    // Serial wire JTAG configuration
        };

        // External interrupt configuration register 1 (AFIO_EXTICR1)
        struct EXTICR1 : public Register<0x40010008> {
            using EXTI0 = Field<0, 4>;    // EXTI0 configuration
            using EXTI1 = Field<4, 4>;    // EXTI1 configuration
            using EXTI2 = Field<8, 4>;    // EXTI2 configuration
            using EXTI3 = Field<12, 4>;    // EXTI3 configuration
        };

        // External interrupt configuration register 2 (AFIO_EXTICR2)
        struct EXTICR2 : public Register<0x4001000c> {
            using EXTI4 = Field<0, 4>;    // EXTI4 configuration
            using EXTI5 = Field<4, 4>;    // EXTI5 configuration
            using EXTI6 = Field<8, 4>;    // EXTI6 configuration
            using EXTI7 = Field<12, 4>;    // EXTI7 configuration
        };

        // External interrupt configuration register 3 (AFIO_EXTICR3)
        struct EXTICR3 : public Register<0x40010010> {
            using EXTI8 = Field<0, 4>;    // EXTI8 configuration
            using EXTI9 = Field<4, 4>;    // EXTI9 configuration
            using EXTI10 = Field<8, 4>;    // EXTI10 configuration
            using EXTI11 = Field<12, 4>;    // EXTI11 configuration
        };

        // External interrupt configuration register 4 (AFIO_EXTICR4)
        struct EXTICR4 : public Register<0x40010014> {
            using EXTI12 = Field<0, 4>;    // EXTI12 configuration
            using EXTI13 = Field<4, 4>;    // EXTI13 configuration
            using EXTI14 = Field<8, 4>;    // EXTI14 configuration
            using EXTI15 = Field<12, 4>;    // EXTI15 configuration
        };

        // AF remap and debug I/O configuration register
        struct MAPR2 : public Register<0x4001001c> {
            using TIM15_REMAP = Field<0, 1>;    // TIM15 remapping
            using TIM16_REMAP = Field<1, 1>;    // TIM16 remapping
            using TIM17_REMAP = Field<2, 1>;    // TIM17 remapping
            using TIM13_REMAP = Field<8, 1>;    // TIM13 remapping
            using TIM14_REMAP = Field<9, 1>;    // TIM14 remapping
            using FSMC_NADV = Field<10, 1>;    // NADV connect/disconnect
            using CEC_REMAP = Field<3, 1>;    // CEC remapping
            using TIM1_DMA_REMAP = Field<4, 1>;    // TIM1 DMA remapping
            using TIM67_DAC_DMA_REMAP = Field<11, 1>;    // TIM67_DAC DMA remapping
            using TIM12_REMAP = Field<12, 1>;    // TIM12 remapping
            using MISC_REMAP = Field<13, 1>;    // Miscellaneous features remapping
        };

    };

    // EXTI
    struct EXTI {
        // Interrupt mask register (EXTI_IMR)
        struct IMR : public Register<0x40010400> {
            using MR0 = Field<0, 1>;    // Interrupt Mask on line 0
            using MR1 = Field<1, 1>;    // Interrupt Mask on line 1
            using MR2 = Field<2, 1>;    // Interrupt Mask on line 2
            using MR3 = Field<3, 1>;    // Interrupt Mask on line 3
            using MR4 = Field<4, 1>;    // Interrupt Mask on line 4
            using MR5 = Field<5, 1>;    // Interrupt Mask on line 5
            using MR6 = Field<6, 1>;    // Interrupt Mask on line 6
            using MR7 = Field<7, 1>;    // Interrupt Mask on line 7
            using MR8 = Field<8, 1>;    // Interrupt Mask on line 8
            using MR9 = Field<9, 1>;    // Interrupt Mask on line 9
            using MR10 = Field<10, 1>;    // Interrupt Mask on line 10
            using MR11 = Field<11, 1>;    // Interrupt Mask on line 11
            using MR12 = Field<12, 1>;    // Interrupt Mask on line 12
            using MR13 = Field<13, 1>;    // Interrupt Mask on line 13
            using MR14 = Field<14, 1>;    // Interrupt Mask on line 14
            using MR15 = Field<15, 1>;    // Interrupt Mask on line 15
            using MR16 = Field<16, 1>;    // Interrupt Mask on line 16
            using MR17 = Field<17, 1>;    // Interrupt Mask on line 17
        };

        // Event mask register (EXTI_EMR)
        struct EMR : public Register<0x40010404> {
            using MR0 = Field<0, 1>;    // Event Mask on line 0
            using MR1 = Field<1, 1>;    // Event Mask on line 1
            using MR2 = Field<2, 1>;    // Event Mask on line 2
            using MR3 = Field<3, 1>;    // Event Mask on line 3
            using MR4 = Field<4, 1>;    // Event Mask on line 4
            using MR5 = Field<5, 1>;    // Event Mask on line 5
            using MR6 = Field<6, 1>;    // Event Mask on line 6
            using MR7 = Field<7, 1>;    // Event Mask on line 7
            using MR8 = Field<8, 1>;    // Event Mask on line 8
            using MR9 = Field<9, 1>;    // Event Mask on line 9
            using MR10 = Field<10, 1>;    // Event Mask on line 10
            using MR11 = Field<11, 1>;    // Event Mask on line 11
            using MR12 = Field<12, 1>;    // Event Mask on line 12
            using MR13 = Field<13, 1>;    // Event Mask on line 13
            using MR14 = Field<14, 1>;    // Event Mask on line 14
            using MR15 = Field<15, 1>;    // Event Mask on line 15
            using MR16 = Field<16, 1>;    // Event Mask on line 16
            using MR17 = Field<17, 1>;    // Event Mask on line 17
        };

        // Rising Trigger selection register (EXTI_RTSR)
        struct RTSR : public Register<0x40010408> {
            using TR0 = Field<0, 1>;    // Rising trigger event configuration of line 0
            using TR1 = Field<1, 1>;    // Rising trigger event configuration of line 1
            using TR2 = Field<2, 1>;    // Rising trigger event configuration of line 2
            using TR3 = Field<3, 1>;    // Rising trigger event configuration of line 3
            using TR4 = Field<4, 1>;    // Rising trigger event configuration of line 4
            using TR5 = Field<5, 1>;    // Rising trigger event configuration of line 5
            using TR6 = Field<6, 1>;    // Rising trigger event configuration of line 6
            using TR7 = Field<7, 1>;    // Rising trigger event configuration of line 7
            using TR8 = Field<8, 1>;    // Rising trigger event configuration of line 8
            using TR9 = Field<9, 1>;    // Rising trigger event configuration of line 9
            using TR10 = Field<10, 1>;    // Rising trigger event configuration of line 10
            using TR11 = Field<11, 1>;    // Rising trigger event configuration of line 11
            using TR12 = Field<12, 1>;    // Rising trigger event configuration of line 12
            using TR13 = Field<13, 1>;    // Rising trigger event configuration of line 13
            using TR14 = Field<14, 1>;    // Rising trigger event configuration of line 14
            using TR15 = Field<15, 1>;    // Rising trigger event configuration of line 15
            using TR16 = Field<16, 1>;    // Rising trigger event configuration of line 16
            using TR17 = Field<17, 1>;    // Rising trigger event configuration of line 17
        };

        // Falling Trigger selection register (EXTI_FTSR)
        struct FTSR : public Register<0x4001040c> {
            using TR0 = Field<0, 1>;    // Falling trigger event configuration of line 0
            using TR1 = Field<1, 1>;    // Falling trigger event configuration of line 1
            using TR2 = Field<2, 1>;    // Falling trigger event configuration of line 2
            using TR3 = Field<3, 1>;    // Falling trigger event configuration of line 3
            using TR4 = Field<4, 1>;    // Falling trigger event configuration of line 4
            using TR5 = Field<5, 1>;    // Falling trigger event configuration of line 5
            using TR6 = Field<6, 1>;    // Falling trigger event configuration of line 6
            using TR7 = Field<7, 1>;    // Falling trigger event configuration of line 7
            using TR8 = Field<8, 1>;    // Falling trigger event configuration of line 8
            using TR9 = Field<9, 1>;    // Falling trigger event configuration of line 9
            using TR10 = Field<10, 1>;    // Falling trigger event configuration of line 10
            using TR11 = Field<11, 1>;    // Falling trigger event configuration of line 11
            using TR12 = Field<12, 1>;    // Falling trigger event configuration of line 12
            using TR13 = Field<13, 1>;    // Falling trigger event configuration of line 13
            using TR14 = Field<14, 1>;    // Falling trigger event configuration of line 14
            using TR15 = Field<15, 1>;    // Falling trigger event configuration of line 15
            using TR16 = Field<16, 1>;    // Falling trigger event configuration of line 16
            using TR17 = Field<17, 1>;    // Falling trigger event configuration of line 17
        };

        // Software interrupt event register (EXTI_SWIER)
        struct SWIER : public Register<0x40010410> {
            using SWIER0 = Field<0, 1>;    // Software Interrupt on line 0
            using SWIER1 = Field<1, 1>;    // Software Interrupt on line 1
            using SWIER2 = Field<2, 1>;    // Software Interrupt on line 2
            using SWIER3 = Field<3, 1>;    // Software Interrupt on line 3
            using SWIER4 = Field<4, 1>;    // Software Interrupt on line 4
            using SWIER5 = Field<5, 1>;    // Software Interrupt on line 5
            using SWIER6 = Field<6, 1>;    // Software Interrupt on line 6
            using SWIER7 = Field<7, 1>;    // Software Interrupt on line 7
            using SWIER8 = Field<8, 1>;    // Software Interrupt on line 8
            using SWIER9 = Field<9, 1>;    // Software Interrupt on line 9
            using SWIER10 = Field<10, 1>;    // Software Interrupt on line 10
            using SWIER11 = Field<11, 1>;    // Software Interrupt on line 11
            using SWIER12 = Field<12, 1>;    // Software Interrupt on line 12
            using SWIER13 = Field<13, 1>;    // Software Interrupt on line 13
            using SWIER14 = Field<14, 1>;    // Software Interrupt on line 14
            using SWIER15 = Field<15, 1>;    // Software Interrupt on line 15
            using SWIER16 = Field<16, 1>;    // Software Interrupt on line 16
            using SWIER17 = Field<17, 1>;    // Software Interrupt on line 17
        };

        // Pending register (EXTI_PR)
        struct PR : public Register<0x40010414> {
            using PR0 = Field<0, 1>;    // Pending bit 0
            using PR1 = Field<1, 1>;    // Pending bit 1
            using PR2 = Field<2, 1>;    // Pending bit 2
            using PR3 = Field<3, 1>;    // Pending bit 3
            using PR4 = Field<4, 1>;    // Pending bit 4
            using PR5 = Field<5, 1>;    // Pending bit 5
            using PR6 = Field<6, 1>;    // Pending bit 6
            using PR7 = Field<7, 1>;    // Pending bit 7
            using PR8 = Field<8, 1>;    // Pending bit 8
            using PR9 = Field<9, 1>;    // Pending bit 9
            using PR10 = Field<10, 1>;    // Pending bit 10
            using PR11 = Field<11, 1>;    // Pending bit 11
            using PR12 = Field<12, 1>;    // Pending bit 12
            using PR13 = Field<13, 1>;    // Pending bit 13
            using PR14 = Field<14, 1>;    // Pending bit 14
            using PR15 = Field<15, 1>;    // Pending bit 15
            using PR16 = Field<16, 1>;    // Pending bit 16
            using PR17 = Field<17, 1>;    // Pending bit 17
        };

    };

    // DMA controller
    struct DMA1 {
        // DMA interrupt status register (DMA_ISR)
        struct ISR : public Register<0x40020000> {
            using GIF1 = Field<0, 1>;    // Channel 1 Global interrupt flag
            using TCIF1 = Field<1, 1>;    // Channel 1 Transfer Complete flag
            using HTIF1 = Field<2, 1>;    // Channel 1 Half Transfer Complete flag
            using TEIF1 = Field<3, 1>;    // Channel 1 Transfer Error flag
            using GIF2 = Field<4, 1>;    // Channel 2 Global interrupt flag
            using TCIF2 = Field<5, 1>;    // Channel 2 Transfer Complete flag
            using HTIF2 = Field<6, 1>;    // Channel 2 Half Transfer Complete flag
            using TEIF2 = Field<7, 1>;    // Channel 2 Transfer Error flag
            using GIF3 = Field<8, 1>;    // Channel 3 Global interrupt flag
            using TCIF3 = Field<9, 1>;    // Channel 3 Transfer Complete flag
            using HTIF3 = Field<10, 1>;    // Channel 3 Half Transfer Complete flag
            using TEIF3 = Field<11, 1>;    // Channel 3 Transfer Error flag
            using GIF4 = Field<12, 1>;    // Channel 4 Global interrupt flag
            using TCIF4 = Field<13, 1>;    // Channel 4 Transfer Complete flag
            using HTIF4 = Field<14, 1>;    // Channel 4 Half Transfer Complete flag
            using TEIF4 = Field<15, 1>;    // Channel 4 Transfer Error flag
            using GIF5 = Field<16, 1>;    // Channel 5 Global interrupt flag
            using TCIF5 = Field<17, 1>;    // Channel 5 Transfer Complete flag
            using HTIF5 = Field<18, 1>;    // Channel 5 Half Transfer Complete flag
            using TEIF5 = Field<19, 1>;    // Channel 5 Transfer Error flag
            using GIF6 = Field<20, 1>;    // Channel 6 Global interrupt flag
            using TCIF6 = Field<21, 1>;    // Channel 6 Transfer Complete flag
            using HTIF6 = Field<22, 1>;    // Channel 6 Half Transfer Complete flag
            using TEIF6 = Field<23, 1>;    // Channel 6 Transfer Error flag
            using GIF7 = Field<24, 1>;    // Channel 7 Global interrupt flag
            using TCIF7 = Field<25, 1>;    // Channel 7 Transfer Complete flag
            using HTIF7 = Field<26, 1>;    // Channel 7 Half Transfer Complete flag
            using TEIF7 = Field<27, 1>;    // Channel 7 Transfer Error flag
        };

        // DMA interrupt flag clear register (DMA_IFCR)
        struct IFCR : public Register<0x40020004> {
            using CGIF1 = Field<0, 1>;    // Channel 1 Global interrupt clear
            using CGIF2 = Field<4, 1>;    // Channel 2 Global interrupt clear
            using CGIF3 = Field<8, 1>;    // Channel 3 Global interrupt clear
            using CGIF4 = Field<12, 1>;    // Channel 4 Global interrupt clear
            using CGIF5 = Field<16, 1>;    // Channel 5 Global interrupt clear
            using CGIF6 = Field<20, 1>;    // Channel 6 Global interrupt clear
            using CGIF7 = Field<24, 1>;    // Channel 7 Global interrupt clear
            using CTCIF1 = Field<1, 1>;    // Channel 1 Transfer Complete clear
            using CTCIF2 = Field<5, 1>;    // Channel 2 Transfer Complete clear
            using CTCIF3 = Field<9, 1>;    // Channel 3 Transfer Complete clear
            using CTCIF4 = Field<13, 1>;    // Channel 4 Transfer Complete clear
            using CTCIF5 = Field<17, 1>;    // Channel 5 Transfer Complete clear
            using CTCIF6 = Field<21, 1>;    // Channel 6 Transfer Complete clear
            using CTCIF7 = Field<25, 1>;    // Channel 7 Transfer Complete clear
            using CHTIF1 = Field<2, 1>;    // Channel 1 Half Transfer clear
            using CHTIF2 = Field<6, 1>;    // Channel 2 Half Transfer clear
            using CHTIF3 = Field<10, 1>;    // Channel 3 Half Transfer clear
            using CHTIF4 = Field<14, 1>;    // Channel 4 Half Transfer clear
            using CHTIF5 = Field<18, 1>;    // Channel 5 Half Transfer clear
            using CHTIF6 = Field<22, 1>;    // Channel 6 Half Transfer clear
            using CHTIF7 = Field<26, 1>;    // Channel 7 Half Transfer clear
            using CTEIF1 = Field<3, 1>;    // Channel 1 Transfer Error clear
            using CTEIF2 = Field<7, 1>;    // Channel 2 Transfer Error clear
            using CTEIF3 = Field<11, 1>;    // Channel 3 Transfer Error clear
            using CTEIF4 = Field<15, 1>;    // Channel 4 Transfer Error clear
            using CTEIF5 = Field<19, 1>;    // Channel 5 Transfer Error clear
            using CTEIF6 = Field<23, 1>;    // Channel 6 Transfer Error clear
            using CTEIF7 = Field<27, 1>;    // Channel 7 Transfer Error clear
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR1 : public Register<0x40020008> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 1 number of data register
        struct CNDTR1 : public Register<0x4002000c> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 1 peripheral address register
        struct CPAR1 : public Register<0x40020010> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 1 memory address register
        struct CMAR1 : public Register<0x40020014> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR2 : public Register<0x4002001c> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 2 number of data register
        struct CNDTR2 : public Register<0x40020020> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 2 peripheral address register
        struct CPAR2 : public Register<0x40020024> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 2 memory address register
        struct CMAR2 : public Register<0x40020028> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR3 : public Register<0x40020030> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 3 number of data register
        struct CNDTR3 : public Register<0x40020034> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 3 peripheral address register
        struct CPAR3 : public Register<0x40020038> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 3 memory address register
        struct CMAR3 : public Register<0x4002003c> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR4 : public Register<0x40020044> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 4 number of data register
        struct CNDTR4 : public Register<0x40020048> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 4 peripheral address register
        struct CPAR4 : public Register<0x4002004c> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 4 memory address register
        struct CMAR4 : public Register<0x40020050> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR5 : public Register<0x40020058> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 5 number of data register
        struct CNDTR5 : public Register<0x4002005c> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 5 peripheral address register
        struct CPAR5 : public Register<0x40020060> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 5 memory address register
        struct CMAR5 : public Register<0x40020064> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR6 : public Register<0x4002006c> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 6 number of data register
        struct CNDTR6 : public Register<0x40020070> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 6 peripheral address register
        struct CPAR6 : public Register<0x40020074> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 6 memory address register
        struct CMAR6 : public Register<0x40020078> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR7 : public Register<0x40020080> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 7 number of data register
        struct CNDTR7 : public Register<0x40020084> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 7 peripheral address register
        struct CPAR7 : public Register<0x40020088> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 7 memory address register
        struct CMAR7 : public Register<0x4002008c> {
            using MA = Field<0, 32>;    // Memory address
        };

    };

    // DMA controller
    struct DMA2 {
        // DMA interrupt status register (DMA_ISR)
        struct ISR : public Register<0x40020400> {
            using GIF1 = Field<0, 1>;    // Channel 1 Global interrupt flag
            using TCIF1 = Field<1, 1>;    // Channel 1 Transfer Complete flag
            using HTIF1 = Field<2, 1>;    // Channel 1 Half Transfer Complete flag
            using TEIF1 = Field<3, 1>;    // Channel 1 Transfer Error flag
            using GIF2 = Field<4, 1>;    // Channel 2 Global interrupt flag
            using TCIF2 = Field<5, 1>;    // Channel 2 Transfer Complete flag
            using HTIF2 = Field<6, 1>;    // Channel 2 Half Transfer Complete flag
            using TEIF2 = Field<7, 1>;    // Channel 2 Transfer Error flag
            using GIF3 = Field<8, 1>;    // Channel 3 Global interrupt flag
            using TCIF3 = Field<9, 1>;    // Channel 3 Transfer Complete flag
            using HTIF3 = Field<10, 1>;    // Channel 3 Half Transfer Complete flag
            using TEIF3 = Field<11, 1>;    // Channel 3 Transfer Error flag
            using GIF4 = Field<12, 1>;    // Channel 4 Global interrupt flag
            using TCIF4 = Field<13, 1>;    // Channel 4 Transfer Complete flag
            using HTIF4 = Field<14, 1>;    // Channel 4 Half Transfer Complete flag
            using TEIF4 = Field<15, 1>;    // Channel 4 Transfer Error flag
            using GIF5 = Field<16, 1>;    // Channel 5 Global interrupt flag
            using TCIF5 = Field<17, 1>;    // Channel 5 Transfer Complete flag
            using HTIF5 = Field<18, 1>;    // Channel 5 Half Transfer Complete flag
            using TEIF5 = Field<19, 1>;    // Channel 5 Transfer Error flag
            using GIF6 = Field<20, 1>;    // Channel 6 Global interrupt flag
            using TCIF6 = Field<21, 1>;    // Channel 6 Transfer Complete flag
            using HTIF6 = Field<22, 1>;    // Channel 6 Half Transfer Complete flag
            using TEIF6 = Field<23, 1>;    // Channel 6 Transfer Error flag
            using GIF7 = Field<24, 1>;    // Channel 7 Global interrupt flag
            using TCIF7 = Field<25, 1>;    // Channel 7 Transfer Complete flag
            using HTIF7 = Field<26, 1>;    // Channel 7 Half Transfer Complete flag
            using TEIF7 = Field<27, 1>;    // Channel 7 Transfer Error flag
        };

        // DMA interrupt flag clear register (DMA_IFCR)
        struct IFCR : public Register<0x40020404> {
            using CGIF1 = Field<0, 1>;    // Channel 1 Global interrupt clear
            using CGIF2 = Field<4, 1>;    // Channel 2 Global interrupt clear
            using CGIF3 = Field<8, 1>;    // Channel 3 Global interrupt clear
            using CGIF4 = Field<12, 1>;    // Channel 4 Global interrupt clear
            using CGIF5 = Field<16, 1>;    // Channel 5 Global interrupt clear
            using CGIF6 = Field<20, 1>;    // Channel 6 Global interrupt clear
            using CGIF7 = Field<24, 1>;    // Channel 7 Global interrupt clear
            using CTCIF1 = Field<1, 1>;    // Channel 1 Transfer Complete clear
            using CTCIF2 = Field<5, 1>;    // Channel 2 Transfer Complete clear
            using CTCIF3 = Field<9, 1>;    // Channel 3 Transfer Complete clear
            using CTCIF4 = Field<13, 1>;    // Channel 4 Transfer Complete clear
            using CTCIF5 = Field<17, 1>;    // Channel 5 Transfer Complete clear
            using CTCIF6 = Field<21, 1>;    // Channel 6 Transfer Complete clear
            using CTCIF7 = Field<25, 1>;    // Channel 7 Transfer Complete clear
            using CHTIF1 = Field<2, 1>;    // Channel 1 Half Transfer clear
            using CHTIF2 = Field<6, 1>;    // Channel 2 Half Transfer clear
            using CHTIF3 = Field<10, 1>;    // Channel 3 Half Transfer clear
            using CHTIF4 = Field<14, 1>;    // Channel 4 Half Transfer clear
            using CHTIF5 = Field<18, 1>;    // Channel 5 Half Transfer clear
            using CHTIF6 = Field<22, 1>;    // Channel 6 Half Transfer clear
            using CHTIF7 = Field<26, 1>;    // Channel 7 Half Transfer clear
            using CTEIF1 = Field<3, 1>;    // Channel 1 Transfer Error clear
            using CTEIF2 = Field<7, 1>;    // Channel 2 Transfer Error clear
            using CTEIF3 = Field<11, 1>;    // Channel 3 Transfer Error clear
            using CTEIF4 = Field<15, 1>;    // Channel 4 Transfer Error clear
            using CTEIF5 = Field<19, 1>;    // Channel 5 Transfer Error clear
            using CTEIF6 = Field<23, 1>;    // Channel 6 Transfer Error clear
            using CTEIF7 = Field<27, 1>;    // Channel 7 Transfer Error clear
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR1 : public Register<0x40020408> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 1 number of data register
        struct CNDTR1 : public Register<0x4002040c> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 1 peripheral address register
        struct CPAR1 : public Register<0x40020410> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 1 memory address register
        struct CMAR1 : public Register<0x40020414> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR2 : public Register<0x4002041c> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 2 number of data register
        struct CNDTR2 : public Register<0x40020420> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 2 peripheral address register
        struct CPAR2 : public Register<0x40020424> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 2 memory address register
        struct CMAR2 : public Register<0x40020428> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR3 : public Register<0x40020430> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 3 number of data register
        struct CNDTR3 : public Register<0x40020434> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 3 peripheral address register
        struct CPAR3 : public Register<0x40020438> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 3 memory address register
        struct CMAR3 : public Register<0x4002043c> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR4 : public Register<0x40020444> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 4 number of data register
        struct CNDTR4 : public Register<0x40020448> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 4 peripheral address register
        struct CPAR4 : public Register<0x4002044c> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 4 memory address register
        struct CMAR4 : public Register<0x40020450> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR5 : public Register<0x40020458> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 5 number of data register
        struct CNDTR5 : public Register<0x4002045c> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 5 peripheral address register
        struct CPAR5 : public Register<0x40020460> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 5 memory address register
        struct CMAR5 : public Register<0x40020464> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR6 : public Register<0x4002046c> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 6 number of data register
        struct CNDTR6 : public Register<0x40020470> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 6 peripheral address register
        struct CPAR6 : public Register<0x40020474> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 6 memory address register
        struct CMAR6 : public Register<0x40020478> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR7 : public Register<0x40020480> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 7 number of data register
        struct CNDTR7 : public Register<0x40020484> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 7 peripheral address register
        struct CPAR7 : public Register<0x40020488> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 7 memory address register
        struct CMAR7 : public Register<0x4002048c> {
            using MA = Field<0, 32>;    // Memory address
        };

    };

    // Real time clock
    struct RTC {
        // RTC Control Register High
        struct CRH : public Register<0x40002800> {
            using SECIE = Field<0, 1>;    // Second interrupt Enable
            using ALRIE = Field<1, 1>;    // Alarm interrupt Enable
            using OWIE = Field<2, 1>;    // Overflow interrupt Enable
        };

        // RTC Control Register Low
        struct CRL : public Register<0x40002804> {
            using SECF = Field<0, 1>;    // Second Flag
            using ALRF = Field<1, 1>;    // Alarm Flag
            using OWF = Field<2, 1>;    // Overflow Flag
            using RSF = Field<3, 1>;    // Registers Synchronized Flag
            using CNF = Field<4, 1>;    // Configuration Flag
            using RTOFF = Field<5, 1>;    // RTC operation OFF
        };

        // RTC Prescaler Load Register High
        struct PRLH : public Register<0x40002808> {
            using Field = Field<0, 4>;    // RTC Prescaler Load Register High
        };

        // RTC Prescaler Load Register Low
        struct PRLL : public Register<0x4000280c> {
            using Field = Field<0, 16>;    // RTC Prescaler Divider Register Low
        };

        // RTC Prescaler Divider Register High
        struct DIVH : public Register<0x40002810> {
            using Field = Field<0, 4>;    // RTC prescaler divider register high
        };

        // RTC Prescaler Divider Register Low
        struct DIVL : public Register<0x40002814> {
            using Field = Field<0, 16>;    // RTC prescaler divider register Low
        };

        // RTC Counter Register High
        struct CNTH : public Register<0x40002818> {
            using Field = Field<0, 16>;    // RTC counter register high
        };

        // RTC Counter Register Low
        struct CNTL : public Register<0x4000281c> {
            using Field = Field<0, 16>;    // RTC counter register Low
        };

        // RTC Alarm Register High
        struct ALRH : public Register<0x40002820> {
            using Field = Field<0, 16>;    // RTC alarm register high
        };

        // RTC Alarm Register Low
        struct ALRL : public Register<0x40002824> {
            using Field = Field<0, 16>;    // RTC alarm register low
        };

    };

    // Backup registers
    struct BKP {
        // Backup data register (BKP_DR)
        struct DR1 : public Register<0x40006c04> {
            using D1 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR2 : public Register<0x40006c08> {
            using D2 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR3 : public Register<0x40006c0c> {
            using D3 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR4 : public Register<0x40006c10> {
            using D4 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR5 : public Register<0x40006c14> {
            using D5 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR6 : public Register<0x40006c18> {
            using D6 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR7 : public Register<0x40006c1c> {
            using D7 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR8 : public Register<0x40006c20> {
            using D8 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR9 : public Register<0x40006c24> {
            using D9 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR10 : public Register<0x40006c28> {
            using D10 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR11 : public Register<0x40006c40> {
            using Field = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR12 : public Register<0x40006c44> {
            using Field = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR13 : public Register<0x40006c48> {
            using Field = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR14 : public Register<0x40006c4c> {
            using D14 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR15 : public Register<0x40006c50> {
            using D15 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR16 : public Register<0x40006c54> {
            using D16 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR17 : public Register<0x40006c58> {
            using D17 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR18 : public Register<0x40006c5c> {
            using D18 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR19 : public Register<0x40006c60> {
            using D19 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR20 : public Register<0x40006c64> {
            using D20 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR21 : public Register<0x40006c68> {
            using D21 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR22 : public Register<0x40006c6c> {
            using D22 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR23 : public Register<0x40006c70> {
            using D23 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR24 : public Register<0x40006c74> {
            using D24 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR25 : public Register<0x40006c78> {
            using D25 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR26 : public Register<0x40006c7c> {
            using D26 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR27 : public Register<0x40006c80> {
            using D27 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR28 : public Register<0x40006c84> {
            using D28 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR29 : public Register<0x40006c88> {
            using D29 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR30 : public Register<0x40006c8c> {
            using D30 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR31 : public Register<0x40006c90> {
            using D31 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR32 : public Register<0x40006c94> {
            using D32 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR33 : public Register<0x40006c98> {
            using D33 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR34 : public Register<0x40006c9c> {
            using D34 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR35 : public Register<0x40006ca0> {
            using D35 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR36 : public Register<0x40006ca4> {
            using D36 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR37 : public Register<0x40006ca8> {
            using D37 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR38 : public Register<0x40006cac> {
            using D38 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR39 : public Register<0x40006cb0> {
            using D39 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR40 : public Register<0x40006cb4> {
            using D40 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR41 : public Register<0x40006cb8> {
            using D41 = Field<0, 16>;    // Backup data
        };

        // Backup data register (BKP_DR)
        struct DR42 : public Register<0x40006cbc> {
            using D42 = Field<0, 16>;    // Backup data
        };

        // RTC clock calibration register (BKP_RTCCR)
        struct RTCCR : public Register<0x40006c2c> {
            using CAL = Field<0, 7>;    // Calibration value
            using CCO = Field<7, 1>;    // Calibration Clock Output
            using ASOE = Field<8, 1>;    // Alarm or second output enable
            using ASOS = Field<9, 1>;    // Alarm or second output selection
        };

        // Backup control register (BKP_CR)
        struct CR : public Register<0x40006c30> {
            using TPE = Field<0, 1>;    // Tamper pin enable
            using TPAL = Field<1, 1>;    // Tamper pin active level
        };

        // BKP_CSR control/status register (BKP_CSR)
        struct CSR : public Register<0x40006c34> {
            using CTE = Field<0, 1>;    // Clear Tamper event
            using CTI = Field<1, 1>;    // Clear Tamper Interrupt
            using TPIE = Field<2, 1>;    // Tamper Pin interrupt enable
            using TEF = Field<8, 1>;    // Tamper Event Flag
            using TIF = Field<9, 1>;    // Tamper Interrupt Flag
        };

    };

    // Independent watchdog
    struct IWDG {
        // Key register (IWDG_KR)
        struct KR : public Register<0x40003000> {
            using KEY = Field<0, 16>;    // Key value
        };

        // Prescaler register (IWDG_PR)
        struct PR : public Register<0x40003004> {
            using Field = Field<0, 3>;    // Prescaler divider
        };

        // Reload register (IWDG_RLR)
        struct RLR : public Register<0x40003008> {
            using RL = Field<0, 12>;    // Watchdog counter reload value
        };

        // Status register (IWDG_SR)
        struct SR : public Register<0x4000300c> {
            using PVU = Field<0, 1>;    // Watchdog prescaler value update
            using RVU = Field<1, 1>;    // Watchdog counter reload value update
        };

    };

    // Window watchdog
    struct WWDG {
        // Control register (WWDG_CR)
        struct CR : public Register<0x40002c00> {
            using T = Field<0, 7>;    // 7-bit counter (MSB to LSB)
            using WDGA = Field<7, 1>;    // Activation bit
        };

        // Configuration register (WWDG_CFR)
        struct CFR : public Register<0x40002c04> {
            using W = Field<0, 7>;    // 7-bit window value
            using WDGTB = Field<7, 2>;    // Timer Base
            using EWI = Field<9, 1>;    // Early Wakeup Interrupt
        };

        // Status register (WWDG_SR)
        struct SR : public Register<0x40002c08> {
            using EWI = Field<0, 1>;    // Early Wakeup Interrupt
        };

    };

    // Advanced timer
    struct TIM1 {
        // control register 1
        struct CR1 : public Register<0x40012c00> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40012c04> {
            using OIS4 = Field<14, 1>;    // Output Idle state 4
            using OIS3N = Field<13, 1>;    // Output Idle state 3
            using OIS3 = Field<12, 1>;    // Output Idle state 3
            using OIS2N = Field<11, 1>;    // Output Idle state 2
            using OIS2 = Field<10, 1>;    // Output Idle state 2
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // slave mode control register
        struct SMCR : public Register<0x40012c08> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x40012c0c> {
            using UIE = Field<0, 1>;    // Update interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using COMDE = Field<13, 1>;    // COM DMA request enable
            using TDE = Field<14, 1>;    // Trigger DMA request enable
        };

        // status register
        struct SR : public Register<0x40012c10> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40012c14> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40012c18> {
            using OC2CE = Field<15, 1>;    // Output Compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output Compare 2 mode
            using OC2PE = Field<11, 1>;    // Output Compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output Compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output Compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40012c18> {
            using IC2F = Field<15, 4>;    // Input capture 2 filter
            using IC2PCS = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using ICPCS = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register (output mode)
        struct CCMR2_Output : public Register<0x40012c1c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x40012c1c> {
            using IC4F = Field<15, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40012c20> {
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3NE = Field<10, 1>;    // Capture/Compare 3 complementary output enable
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2NE = Field<6, 1>;    // Capture/Compare 2 complementary output enable
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40012c24> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40012c28> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x40012c2c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40012c34> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40012c38> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x40012c3c> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40012c40> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40012c48> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x40012c4c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

        // repetition counter register
        struct RCR : public Register<0x40012c30> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40012c44> {
            using MOE = Field<15, 1>;    // Main output enable
            using AOE = Field<14, 1>;    // Automatic output enable
            using BKP = Field<13, 1>;    // Break polarity
            using BKE = Field<12, 1>;    // Break enable
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using LOCK = Field<8, 2>;    // Lock configuration
            using DTG = Field<0, 8>;    // Dead-time generator setup
        };

    };

    // General purpose timer
    struct TIM2 {
        // control register 1
        struct CR1 : public Register<0x40000000> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40000004> {
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40000008> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
            using OCCS = Field<3, 1>;    // OCREF clear selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000000c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40000010> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40000014> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40000018> {
            using OC2CE = Field<15, 1>;    // Output compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output compare 2 mode
            using OC2PE = Field<11, 1>;    // Output compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output compare 1 mode
            using OC1PE = Field<3, 1>;    // Output compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40000018> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PSC = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x4000001c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x4000001c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40000020> {
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40000024> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40000028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000002c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40000034> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40000038> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x4000003c> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40000040> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40000048> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4000004c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General purpose timer
    struct TIM3 {
        // control register 1
        struct CR1 : public Register<0x40000400> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40000404> {
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40000408> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
            using OCCS = Field<3, 1>;    // OCREF clear selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000040c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40000410> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40000414> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40000418> {
            using OC2CE = Field<15, 1>;    // Output compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output compare 2 mode
            using OC2PE = Field<11, 1>;    // Output compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output compare 1 mode
            using OC1PE = Field<3, 1>;    // Output compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40000418> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PSC = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x4000041c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x4000041c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40000420> {
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40000424> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40000428> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000042c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40000434> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40000438> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x4000043c> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40000440> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40000448> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4000044c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General purpose timer
    struct TIM4 {
        // control register 1
        struct CR1 : public Register<0x40000800> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40000804> {
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40000808> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
            using OCCS = Field<3, 1>;    // OCREF clear selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000080c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40000810> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40000814> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40000818> {
            using OC2CE = Field<15, 1>;    // Output compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output compare 2 mode
            using OC2PE = Field<11, 1>;    // Output compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output compare 1 mode
            using OC1PE = Field<3, 1>;    // Output compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40000818> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PSC = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x4000081c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x4000081c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40000820> {
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40000824> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40000828> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000082c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40000834> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40000838> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x4000083c> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40000840> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40000848> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4000084c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General purpose timer
    struct TIM5 {
        // control register 1
        struct CR1 : public Register<0x40000c00> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40000c04> {
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40000c08> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
            using OCCS = Field<3, 1>;    // OCREF clear selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x40000c0c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40000c10> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40000c14> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40000c18> {
            using OC2CE = Field<15, 1>;    // Output compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output compare 2 mode
            using OC2PE = Field<11, 1>;    // Output compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output compare 1 mode
            using OC1PE = Field<3, 1>;    // Output compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40000c18> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PSC = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x40000c1c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x40000c1c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40000c20> {
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40000c24> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40000c28> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x40000c2c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40000c34> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40000c38> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x40000c3c> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40000c40> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40000c48> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x40000c4c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General purpose timer
    struct TIM12 {
        // control register 1
        struct CR1 : public Register<0x40001800> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40001804> {
            using MMS = Field<4, 3>;    // Master mode selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40001808> {
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000180c> {
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40001810> {
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40001814> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40001818> {
            using OC2M = Field<12, 3>;    // Output Compare 2 mode
            using OC2PE = Field<11, 1>;    // Output Compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output Compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40001818> {
            using IC2F = Field<12, 3>;    // Input capture 2 filter
            using IC2PSC = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40001820> {
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40001824> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40001828> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000182c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40001834> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40001838> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

    };

    // General purpose timer
    struct TIM13 {
        // control register 1
        struct CR1 : public Register<0x40001c00> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x40001c0c> {
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40001c10> {
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40001c14> {
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40001c18> {
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
            using OC1FE = Field<2, 1>;    // Output compare 1 fast enable
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
        };

        // capture/compare mode register (input mode)
        struct CCMR1_Input : public Register<0x40001c18> {
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40001c20> {
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40001c24> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40001c28> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x40001c2c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40001c34> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

    };

    // General purpose timer
    struct TIM14 {
        // control register 1
        struct CR1 : public Register<0x40002000> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000200c> {
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40002010> {
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40002014> {
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40002018> {
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
            using OC1FE = Field<2, 1>;    // Output compare 1 fast enable
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
        };

        // capture/compare mode register (input mode)
        struct CCMR1_Input : public Register<0x40002018> {
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40002020> {
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40002024> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40002028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000202c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40002034> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

    };

    // Basic timer
    struct TIM6 {
        // control register 1
        struct CR1 : public Register<0x40001000> {
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40001004> {
            using MMS = Field<4, 3>;    // Master mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000100c> {
            using UDE = Field<8, 1>;    // Update DMA request enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40001010> {
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40001014> {
            using UG = Field<0, 1>;    // Update generation
        };

        // counter
        struct CNT : public Register<0x40001024> {
            using Field = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40001028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000102c> {
            using Field = Field<0, 16>;    // Low Auto-reload value
        };

    };

    // Basic timer
    struct TIM7 {
        // control register 1
        struct CR1 : public Register<0x40001400> {
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40001404> {
            using MMS = Field<4, 3>;    // Master mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000140c> {
            using UDE = Field<8, 1>;    // Update DMA request enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40001410> {
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40001414> {
            using UG = Field<0, 1>;    // Update generation
        };

        // counter
        struct CNT : public Register<0x40001424> {
            using Field = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40001428> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000142c> {
            using Field = Field<0, 16>;    // Low Auto-reload value
        };

    };

    // Inter integrated circuit
    struct I2C1 {
        // Control register 1
        struct CR1 : public Register<0x40005400> {
            using SWRST = Field<15, 1>;    // Software reset
            using ALERT = Field<13, 1>;    // SMBus alert
            using PEC = Field<12, 1>;    // Packet error checking
            using POS = Field<11, 1>;    // Acknowledge/PEC Position (for data reception)
            using ACK = Field<10, 1>;    // Acknowledge enable
            using STOP = Field<9, 1>;    // Stop generation
            using START = Field<8, 1>;    // Start generation
            using NOSTRETCH = Field<7, 1>;    // Clock stretching disable (Slave mode)
            using ENGC = Field<6, 1>;    // General call enable
            using ENPEC = Field<5, 1>;    // PEC enable
            using ENARP = Field<4, 1>;    // ARP enable
            using SMBTYPE = Field<3, 1>;    // SMBus type
            using SMBUS = Field<1, 1>;    // SMBus mode
            using PE = Field<0, 1>;    // Peripheral enable
        };

        // Control register 2
        struct CR2 : public Register<0x40005404> {
            using LAST = Field<12, 1>;    // DMA last transfer
            using DMAEN = Field<11, 1>;    // DMA requests enable
            using ITBUFEN = Field<10, 1>;    // Buffer interrupt enable
            using ITEVTEN = Field<9, 1>;    // Event interrupt enable
            using ITERREN = Field<8, 1>;    // Error interrupt enable
            using FREQ = Field<0, 6>;    // Peripheral clock frequency
        };

        // Own address register 1
        struct OAR1 : public Register<0x40005408> {
            using ADDMODE = Field<15, 1>;    // Addressing mode (slave mode)
            using ADD10 = Field<8, 2>;    // Interface address
            using ADD7 = Field<1, 7>;    // Interface address
            using ADD0 = Field<0, 1>;    // Interface address
        };

        // Own address register 2
        struct OAR2 : public Register<0x4000540c> {
            using ADD2 = Field<1, 7>;    // Interface address
            using ENDUAL = Field<0, 1>;    // Dual addressing mode enable
        };

        // Data register
        struct DR : public Register<0x40005410> {
            using Field = Field<0, 8>;    // 8-bit data register
        };

        // Status register 1
        struct SR1 : public Register<0x40005414> {
            using SMBALERT = Field<15, 1>;    // SMBus alert
            using TIMEOUT = Field<14, 1>;    // Timeout or Tlow error
            using PECERR = Field<12, 1>;    // PEC Error in reception
            using OVR = Field<11, 1>;    // Overrun/Underrun
            using AF = Field<10, 1>;    // Acknowledge failure
            using ARLO = Field<9, 1>;    // Arbitration lost (master mode)
            using BERR = Field<8, 1>;    // Bus error
            using TxE = Field<7, 1>;    // Data register empty (transmitters)
            using RxNE = Field<6, 1>;    // Data register not empty (receivers)
            using STOPF = Field<4, 1>;    // Stop detection (slave mode)
            using ADD10 = Field<3, 1>;    // 10-bit header sent (Master mode)
            using BTF = Field<2, 1>;    // Byte transfer finished
            using ADDR = Field<1, 1>;    // Address sent (master mode)/matched (slave mode)
            using SB = Field<0, 1>;    // Start bit (Master mode)
        };

        // Status register 2
        struct SR2 : public Register<0x40005418> {
            using PEC = Field<8, 8>;    // acket error checking register
            using DUALF = Field<7, 1>;    // Dual flag (Slave mode)
            using SMBHOST = Field<6, 1>;    // SMBus host header (Slave mode)
            using SMBDEFAULT = Field<5, 1>;    // SMBus device default address (Slave mode)
            using GENCALL = Field<4, 1>;    // General call address (Slave mode)
            using TRA = Field<2, 1>;    // Transmitter/receiver
            using BUSY = Field<1, 1>;    // Bus busy
            using MSL = Field<0, 1>;    // Master/slave
        };

        // Clock control register
        struct CCR : public Register<0x4000541c> {
            using F_S = Field<15, 1>;    // I2C master mode selection
            using DUTY = Field<14, 1>;    // Fast mode duty cycle
            using Field = Field<0, 12>;    // Clock control register in Fast/Standard mode (Master mode)
        };

        // TRISE register
        struct TRISE : public Register<0x40005420> {
            using Field = Field<0, 6>;    // Maximum rise time in Fast/Standard mode (Master mode)
        };

    };

    // Inter integrated circuit
    struct I2C2 {
        // Control register 1
        struct CR1 : public Register<0x40005800> {
            using SWRST = Field<15, 1>;    // Software reset
            using ALERT = Field<13, 1>;    // SMBus alert
            using PEC = Field<12, 1>;    // Packet error checking
            using POS = Field<11, 1>;    // Acknowledge/PEC Position (for data reception)
            using ACK = Field<10, 1>;    // Acknowledge enable
            using STOP = Field<9, 1>;    // Stop generation
            using START = Field<8, 1>;    // Start generation
            using NOSTRETCH = Field<7, 1>;    // Clock stretching disable (Slave mode)
            using ENGC = Field<6, 1>;    // General call enable
            using ENPEC = Field<5, 1>;    // PEC enable
            using ENARP = Field<4, 1>;    // ARP enable
            using SMBTYPE = Field<3, 1>;    // SMBus type
            using SMBUS = Field<1, 1>;    // SMBus mode
            using PE = Field<0, 1>;    // Peripheral enable
        };

        // Control register 2
        struct CR2 : public Register<0x40005804> {
            using LAST = Field<12, 1>;    // DMA last transfer
            using DMAEN = Field<11, 1>;    // DMA requests enable
            using ITBUFEN = Field<10, 1>;    // Buffer interrupt enable
            using ITEVTEN = Field<9, 1>;    // Event interrupt enable
            using ITERREN = Field<8, 1>;    // Error interrupt enable
            using FREQ = Field<0, 6>;    // Peripheral clock frequency
        };

        // Own address register 1
        struct OAR1 : public Register<0x40005808> {
            using ADDMODE = Field<15, 1>;    // Addressing mode (slave mode)
            using ADD10 = Field<8, 2>;    // Interface address
            using ADD7 = Field<1, 7>;    // Interface address
            using ADD0 = Field<0, 1>;    // Interface address
        };

        // Own address register 2
        struct OAR2 : public Register<0x4000580c> {
            using ADD2 = Field<1, 7>;    // Interface address
            using ENDUAL = Field<0, 1>;    // Dual addressing mode enable
        };

        // Data register
        struct DR : public Register<0x40005810> {
            using Field = Field<0, 8>;    // 8-bit data register
        };

        // Status register 1
        struct SR1 : public Register<0x40005814> {
            using SMBALERT = Field<15, 1>;    // SMBus alert
            using TIMEOUT = Field<14, 1>;    // Timeout or Tlow error
            using PECERR = Field<12, 1>;    // PEC Error in reception
            using OVR = Field<11, 1>;    // Overrun/Underrun
            using AF = Field<10, 1>;    // Acknowledge failure
            using ARLO = Field<9, 1>;    // Arbitration lost (master mode)
            using BERR = Field<8, 1>;    // Bus error
            using TxE = Field<7, 1>;    // Data register empty (transmitters)
            using RxNE = Field<6, 1>;    // Data register not empty (receivers)
            using STOPF = Field<4, 1>;    // Stop detection (slave mode)
            using ADD10 = Field<3, 1>;    // 10-bit header sent (Master mode)
            using BTF = Field<2, 1>;    // Byte transfer finished
            using ADDR = Field<1, 1>;    // Address sent (master mode)/matched (slave mode)
            using SB = Field<0, 1>;    // Start bit (Master mode)
        };

        // Status register 2
        struct SR2 : public Register<0x40005818> {
            using PEC = Field<8, 8>;    // acket error checking register
            using DUALF = Field<7, 1>;    // Dual flag (Slave mode)
            using SMBHOST = Field<6, 1>;    // SMBus host header (Slave mode)
            using SMBDEFAULT = Field<5, 1>;    // SMBus device default address (Slave mode)
            using GENCALL = Field<4, 1>;    // General call address (Slave mode)
            using TRA = Field<2, 1>;    // Transmitter/receiver
            using BUSY = Field<1, 1>;    // Bus busy
            using MSL = Field<0, 1>;    // Master/slave
        };

        // Clock control register
        struct CCR : public Register<0x4000581c> {
            using F_S = Field<15, 1>;    // I2C master mode selection
            using DUTY = Field<14, 1>;    // Fast mode duty cycle
            using Field = Field<0, 12>;    // Clock control register in Fast/Standard mode (Master mode)
        };

        // TRISE register
        struct TRISE : public Register<0x40005820> {
            using Field = Field<0, 6>;    // Maximum rise time in Fast/Standard mode (Master mode)
        };

    };

    // Serial peripheral interface
    struct SPI1 {
        // control register 1
        struct CR1 : public Register<0x40013000> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40013004> {
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using SSOE = Field<2, 1>;    // SS output enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
        };

        // status register
        struct SR : public Register<0x40013008> {
            using BSY = Field<7, 1>;    // Busy flag
            using OVR = Field<6, 1>;    // Overrun flag
            using MODF = Field<5, 1>;    // Mode fault
            using CRCERR = Field<4, 1>;    // CRC error flag
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using RXNE = Field<0, 1>;    // Receive buffer not empty
        };

        // data register
        struct DR : public Register<0x4001300c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40013010> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public Register<0x40013014> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public Register<0x40013018> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

    };

    // Serial peripheral interface
    struct SPI2 {
        // control register 1
        struct CR1 : public Register<0x40003800> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40003804> {
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using SSOE = Field<2, 1>;    // SS output enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
        };

        // status register
        struct SR : public Register<0x40003808> {
            using BSY = Field<7, 1>;    // Busy flag
            using OVR = Field<6, 1>;    // Overrun flag
            using MODF = Field<5, 1>;    // Mode fault
            using CRCERR = Field<4, 1>;    // CRC error flag
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using RXNE = Field<0, 1>;    // Receive buffer not empty
        };

        // data register
        struct DR : public Register<0x4000380c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40003810> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public Register<0x40003814> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public Register<0x40003818> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

    };

    // Serial peripheral interface
    struct SPI3 {
        // control register 1
        struct CR1 : public Register<0x40003c00> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40003c04> {
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using SSOE = Field<2, 1>;    // SS output enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
        };

        // status register
        struct SR : public Register<0x40003c08> {
            using BSY = Field<7, 1>;    // Busy flag
            using OVR = Field<6, 1>;    // Overrun flag
            using MODF = Field<5, 1>;    // Mode fault
            using CRCERR = Field<4, 1>;    // CRC error flag
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using RXNE = Field<0, 1>;    // Receive buffer not empty
        };

        // data register
        struct DR : public Register<0x40003c0c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40003c10> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public Register<0x40003c14> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public Register<0x40003c18> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART1 {
        // Status register
        struct SR : public Register<0x40013800> {
            using CTS = Field<9, 1>;    // CTS flag
            using LBD = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // IDLE line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NE = Field<2, 1>;    // Noise error flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Data register
        struct DR : public Register<0x40013804> {
            using Field = Field<0, 9>;    // Data value
        };

        // Baud rate register
        struct BRR : public Register<0x40013808> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Control register 1
        struct CR1 : public Register<0x4001380c> {
            using UE = Field<13, 1>;    // USART enable
            using M = Field<12, 1>;    // Word length
            using WAKE = Field<11, 1>;    // Wakeup method
            using PCE = Field<10, 1>;    // Parity control enable
            using PS = Field<9, 1>;    // Parity selection
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using TXEIE = Field<7, 1>;    // TXE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using TE = Field<3, 1>;    // Transmitter enable
            using RE = Field<2, 1>;    // Receiver enable
            using RWU = Field<1, 1>;    // Receiver wakeup
            using SBK = Field<0, 1>;    // Send break
        };

        // Control register 2
        struct CR2 : public Register<0x40013810> {
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // lin break detection length
            using ADD = Field<0, 4>;    // Address of the USART node
        };

        // Control register 3
        struct CR3 : public Register<0x40013814> {
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40013818> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART2 {
        // Status register
        struct SR : public Register<0x40004400> {
            using CTS = Field<9, 1>;    // CTS flag
            using LBD = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // IDLE line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NE = Field<2, 1>;    // Noise error flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Data register
        struct DR : public Register<0x40004404> {
            using Field = Field<0, 9>;    // Data value
        };

        // Baud rate register
        struct BRR : public Register<0x40004408> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Control register 1
        struct CR1 : public Register<0x4000440c> {
            using UE = Field<13, 1>;    // USART enable
            using M = Field<12, 1>;    // Word length
            using WAKE = Field<11, 1>;    // Wakeup method
            using PCE = Field<10, 1>;    // Parity control enable
            using PS = Field<9, 1>;    // Parity selection
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using TXEIE = Field<7, 1>;    // TXE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using TE = Field<3, 1>;    // Transmitter enable
            using RE = Field<2, 1>;    // Receiver enable
            using RWU = Field<1, 1>;    // Receiver wakeup
            using SBK = Field<0, 1>;    // Send break
        };

        // Control register 2
        struct CR2 : public Register<0x40004410> {
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // lin break detection length
            using ADD = Field<0, 4>;    // Address of the USART node
        };

        // Control register 3
        struct CR3 : public Register<0x40004414> {
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40004418> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART3 {
        // Status register
        struct SR : public Register<0x40004800> {
            using CTS = Field<9, 1>;    // CTS flag
            using LBD = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // IDLE line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NE = Field<2, 1>;    // Noise error flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Data register
        struct DR : public Register<0x40004804> {
            using Field = Field<0, 9>;    // Data value
        };

        // Baud rate register
        struct BRR : public Register<0x40004808> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Control register 1
        struct CR1 : public Register<0x4000480c> {
            using UE = Field<13, 1>;    // USART enable
            using M = Field<12, 1>;    // Word length
            using WAKE = Field<11, 1>;    // Wakeup method
            using PCE = Field<10, 1>;    // Parity control enable
            using PS = Field<9, 1>;    // Parity selection
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using TXEIE = Field<7, 1>;    // TXE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using TE = Field<3, 1>;    // Transmitter enable
            using RE = Field<2, 1>;    // Receiver enable
            using RWU = Field<1, 1>;    // Receiver wakeup
            using SBK = Field<0, 1>;    // Send break
        };

        // Control register 2
        struct CR2 : public Register<0x40004810> {
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // lin break detection length
            using ADD = Field<0, 4>;    // Address of the USART node
        };

        // Control register 3
        struct CR3 : public Register<0x40004814> {
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40004818> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

    };

    // Analog to digital converter
    struct ADC1 {
        // status register
        struct SR : public Register<0x40012400> {
            using STRT = Field<4, 1>;    // Regular channel start flag
            using JSTRT = Field<3, 1>;    // Injected channel start flag
            using JEOC = Field<2, 1>;    // Injected channel end of conversion
            using EOC = Field<1, 1>;    // Regular channel end of conversion
            using AWD = Field<0, 1>;    // Analog watchdog flag
        };

        // control register 1
        struct CR1 : public Register<0x40012404> {
            using AWDEN = Field<23, 1>;    // Analog watchdog enable on regular channels
            using JAWDEN = Field<22, 1>;    // Analog watchdog enable on injected channels
            using DISCNUM = Field<13, 3>;    // Discontinuous mode channel count
            using JDISCEN = Field<12, 1>;    // Discontinuous mode on injected channels
            using DISCEN = Field<11, 1>;    // Discontinuous mode on regular channels
            using JAUTO = Field<10, 1>;    // Automatic injected group conversion
            using AWDSGL = Field<9, 1>;    // Enable the watchdog on a single channel in scan mode
            using SCAN = Field<8, 1>;    // Scan mode
            using JEOCIE = Field<7, 1>;    // Interrupt enable for injected channels
            using AWDIE = Field<6, 1>;    // Analog watchdog interrupt enable
            using EOCIE = Field<5, 1>;    // Interrupt enable for EOC
            using AWDCH = Field<0, 5>;    // Analog watchdog channel select bits
        };

        // control register 2
        struct CR2 : public Register<0x40012408> {
            using TSVREFE = Field<23, 1>;    // Temperature sensor and VREFINT enable
            using SWSTART = Field<22, 1>;    // Start conversion of regular channels
            using JSWSTART = Field<21, 1>;    // Start conversion of injected channels
            using EXTTRIG = Field<20, 1>;    // External trigger conversion mode for regular channels
            using EXTSEL = Field<17, 3>;    // External event select for regular group
            using JEXTTRIG = Field<15, 1>;    // External trigger conversion mode for injected channels
            using JEXTSEL = Field<12, 3>;    // External event select for injected group
            using ALIGN = Field<11, 1>;    // Data alignment
            using DMA = Field<8, 1>;    // Direct memory access mode
            using RSTCAL = Field<3, 1>;    // Reset calibration
            using CAL = Field<2, 1>;    // A/D calibration
            using CONT = Field<1, 1>;    // Continuous conversion
            using ADON = Field<0, 1>;    // A/D converter ON / OFF
        };

        // sample time register 1
        struct SMPR1 : public Register<0x4001240c> {
            using SMP10 = Field<0, 3>;    // Channel 10 sample time selection
            using SMP11 = Field<3, 3>;    // Channel 11 sample time selection
            using SMP12 = Field<6, 3>;    // Channel 12 sample time selection
            using SMP13 = Field<9, 3>;    // Channel 13 sample time selection
            using SMP14 = Field<12, 3>;    // Channel 14 sample time selection
            using SMP15 = Field<15, 3>;    // Channel 15 sample time selection
            using SMP16 = Field<18, 3>;    // Channel 16 sample time selection
            using SMP17 = Field<21, 3>;    // Channel 17 sample time selection
        };

        // sample time register 2
        struct SMPR2 : public Register<0x40012410> {
            using SMP0 = Field<0, 3>;    // Channel 0 sample time selection
            using SMP1 = Field<3, 3>;    // Channel 1 sample time selection
            using SMP2 = Field<6, 3>;    // Channel 2 sample time selection
            using SMP3 = Field<9, 3>;    // Channel 3 sample time selection
            using SMP4 = Field<12, 3>;    // Channel 4 sample time selection
            using SMP5 = Field<15, 3>;    // Channel 5 sample time selection
            using SMP6 = Field<18, 3>;    // Channel 6 sample time selection
            using SMP7 = Field<21, 3>;    // Channel 7 sample time selection
            using SMP8 = Field<24, 3>;    // Channel 8 sample time selection
            using SMP9 = Field<27, 3>;    // Channel 9 sample time selection
        };

        // injected channel data offset register x
        struct JOFR1 : public Register<0x40012414> {
            using JOFFSET1 = Field<0, 12>;    // Data offset for injected channel 1
        };

        // injected channel data offset register x
        struct JOFR2 : public Register<0x40012418> {
            using JOFFSET2 = Field<0, 12>;    // Data offset for injected channel 2
        };

        // injected channel data offset register x
        struct JOFR3 : public Register<0x4001241c> {
            using JOFFSET3 = Field<0, 12>;    // Data offset for injected channel 3
        };

        // injected channel data offset register x
        struct JOFR4 : public Register<0x40012420> {
            using JOFFSET4 = Field<0, 12>;    // Data offset for injected channel 4
        };

        // watchdog higher threshold register
        struct HTR : public Register<0x40012424> {
            using HT = Field<0, 12>;    // Analog watchdog higher threshold
        };

        // watchdog lower threshold register
        struct LTR : public Register<0x40012428> {
            using LT = Field<0, 12>;    // Analog watchdog lower threshold
        };

        // regular sequence register 1
        struct SQR1 : public Register<0x4001242c> {
            using L = Field<20, 4>;    // Regular channel sequence length
            using SQ16 = Field<15, 5>;    // 16th conversion in regular sequence
            using SQ15 = Field<10, 5>;    // 15th conversion in regular sequence
            using SQ14 = Field<5, 5>;    // 14th conversion in regular sequence
            using SQ13 = Field<0, 5>;    // 13th conversion in regular sequence
        };

        // regular sequence register 2
        struct SQR2 : public Register<0x40012430> {
            using SQ12 = Field<25, 5>;    // 12th conversion in regular sequence
            using SQ11 = Field<20, 5>;    // 11th conversion in regular sequence
            using SQ10 = Field<15, 5>;    // 10th conversion in regular sequence
            using SQ9 = Field<10, 5>;    // 9th conversion in regular sequence
            using SQ8 = Field<5, 5>;    // 8th conversion in regular sequence
            using SQ7 = Field<0, 5>;    // 7th conversion in regular sequence
        };

        // regular sequence register 3
        struct SQR3 : public Register<0x40012434> {
            using SQ6 = Field<25, 5>;    // 6th conversion in regular sequence
            using SQ5 = Field<20, 5>;    // 5th conversion in regular sequence
            using SQ4 = Field<15, 5>;    // 4th conversion in regular sequence
            using SQ3 = Field<10, 5>;    // 3rd conversion in regular sequence
            using SQ2 = Field<5, 5>;    // 2nd conversion in regular sequence
            using SQ1 = Field<0, 5>;    // 1st conversion in regular sequence
        };

        // injected sequence register
        struct JSQR : public Register<0x40012438> {
            using JL = Field<20, 2>;    // Injected sequence length
            using JSQ4 = Field<15, 5>;    // 4th conversion in injected sequence
            using JSQ3 = Field<10, 5>;    // 3rd conversion in injected sequence
            using JSQ2 = Field<5, 5>;    // 2nd conversion in injected sequence
            using JSQ1 = Field<0, 5>;    // 1st conversion in injected sequence
        };

        // injected data register x
        struct JDR1 : public Register<0x4001243c> {
            using JDATA = Field<0, 16>;    // Injected data
        };

        // injected data register x
        struct JDR2 : public Register<0x40012440> {
            using JDATA = Field<0, 16>;    // Injected data
        };

        // injected data register x
        struct JDR3 : public Register<0x40012444> {
            using JDATA = Field<0, 16>;    // Injected data
        };

        // injected data register x
        struct JDR4 : public Register<0x40012448> {
            using JDATA = Field<0, 16>;    // Injected data
        };

        // regular data register
        struct DR : public Register<0x4001244c> {
            using DATA = Field<0, 16>;    // Regular data
        };

    };

    // Digital to analog converter
    struct DAC {
        // Control register (DAC_CR)
        struct CR : public Register<0x40007400> {
            using EN1 = Field<0, 1>;    // DAC channel1 enable
            using BOFF1 = Field<1, 1>;    // DAC channel1 output buffer disable
            using TEN1 = Field<2, 1>;    // DAC channel1 trigger enable
            using TSEL1 = Field<3, 3>;    // DAC channel1 trigger selection
            using WAVE1 = Field<6, 2>;    // DAC channel1 noise/triangle wave generation enable
            using MAMP1 = Field<8, 4>;    // DAC channel1 mask/amplitude selector
            using DMAEN1 = Field<12, 1>;    // DAC channel1 DMA enable
            using EN2 = Field<16, 1>;    // DAC channel2 enable
            using BOFF2 = Field<17, 1>;    // DAC channel2 output buffer disable
            using TEN2 = Field<18, 1>;    // DAC channel2 trigger enable
            using TSEL2 = Field<19, 3>;    // DAC channel2 trigger selection
            using WAVE2 = Field<22, 2>;    // DAC channel2 noise/triangle wave generation enable
            using MAMP2 = Field<24, 4>;    // DAC channel2 mask/amplitude selector
            using DMAEN2 = Field<28, 1>;    // DAC channel2 DMA enable
            using DMAUDRIE1 = Field<13, 1>;    // DAC channel1 DMA underrun interrupt enable
            using DMAUDRIE2 = Field<29, 1>;    // DAC channel2 DMA underrun interrupt enable
        };

        // DAC software trigger register (DAC_SWTRIGR)
        struct SWTRIGR : public Register<0x40007404> {
            using SWTRIG1 = Field<0, 1>;    // DAC channel1 software trigger
            using SWTRIG2 = Field<1, 1>;    // DAC channel2 software trigger
        };

        // DAC channel1 12-bit right-aligned data holding register(DAC_DHR12R1)
        struct DHR12R1 : public Register<0x40007408> {
            using DACC1DHR = Field<0, 12>;    // DAC channel1 12-bit right-aligned data
        };

        // DAC channel1 12-bit left aligned data holding register (DAC_DHR12L1)
        struct DHR12L1 : public Register<0x4000740c> {
            using DACC1DHR = Field<4, 12>;    // DAC channel1 12-bit left-aligned data
        };

        // DAC channel1 8-bit right aligned data holding register (DAC_DHR8R1)
        struct DHR8R1 : public Register<0x40007410> {
            using DACC1DHR = Field<0, 8>;    // DAC channel1 8-bit right-aligned data
        };

        // DAC channel2 12-bit right aligned data holding register (DAC_DHR12R2)
        struct DHR12R2 : public Register<0x40007414> {
            using DACC2DHR = Field<0, 12>;    // DAC channel2 12-bit right-aligned data
        };

        // DAC channel2 12-bit left aligned data holding register (DAC_DHR12L2)
        struct DHR12L2 : public Register<0x40007418> {
            using DACC2DHR = Field<4, 12>;    // DAC channel2 12-bit left-aligned data
        };

        // DAC channel2 8-bit right-aligned data holding register (DAC_DHR8R2)
        struct DHR8R2 : public Register<0x4000741c> {
            using DACC2DHR = Field<0, 8>;    // DAC channel2 8-bit right-aligned data
        };

        // Dual DAC 12-bit right-aligned data holding register (DAC_DHR12RD), Bits 31:28 Reserved, Bits 15:12 Reserved
        struct DHR12RD : public Register<0x40007420> {
            using DACC1DHR = Field<0, 12>;    // DAC channel1 12-bit right-aligned data
            using DACC2DHR = Field<16, 12>;    // DAC channel2 12-bit right-aligned data
        };

        // DUAL DAC 12-bit left aligned data holding register (DAC_DHR12LD), Bits 19:16 Reserved, Bits 3:0 Reserved
        struct DHR12LD : public Register<0x40007424> {
            using DACC1DHR = Field<4, 12>;    // DAC channel1 12-bit left-aligned data
            using DACC2DHR = Field<20, 12>;    // DAC channel2 12-bit right-aligned data
        };

        // DUAL DAC 8-bit right aligned data holding register (DAC_DHR8RD), Bits 31:16 Reserved
        struct DHR8RD : public Register<0x40007428> {
            using DACC1DHR = Field<0, 8>;    // DAC channel1 8-bit right-aligned data
            using DACC2DHR = Field<8, 8>;    // DAC channel2 8-bit right-aligned data
        };

        // DAC channel1 data output register (DAC_DOR1)
        struct DOR1 : public Register<0x4000742c> {
            using DACC1DOR = Field<0, 12>;    // DAC channel1 data output
        };

        // DAC channel2 data output register (DAC_DOR2)
        struct DOR2 : public Register<0x40007430> {
            using DACC2DOR = Field<0, 12>;    // DAC channel2 data output
        };

        // DAC status register
        struct SR : public Register<0x40007434> {
            using DMAUDR1 = Field<13, 1>;    // DAC channel1 DMA underrun flag
            using DMAUDR2 = Field<29, 1>;    // DAC channel2 DMA underrun flag
        };

    };

    // Debug support
    struct DBG {
        // DBGMCU_IDCODE
        struct IDCODE : public Register<0xe0042000> {
            using DEV_ID = Field<0, 12>;    // DEV_ID
            using REV_ID = Field<16, 16>;    // REV_ID
        };

        // DBGMCU_CR
        struct CR : public Register<0xe0042004> {
            using DBG_SLEEP = Field<0, 1>;    // DBG_SLEEP
            using DBG_STOP = Field<1, 1>;    // DBG_STOP
            using DBG_STANDBY = Field<2, 1>;    // DBG_STANDBY
            using TRACE_IOEN = Field<5, 1>;    // TRACE_IOEN
            using TRACE_MODE = Field<6, 2>;    // TRACE_MODE
            using DBG_IWDG_STOP = Field<8, 1>;    // DBG_IWDG_STOP
            using DBG_WWDG_STOP = Field<9, 1>;    // DBG_WWDG_STOP
            using DBG_TIM1_STOP = Field<10, 1>;    // DBG_TIM1_STOP
            using DBG_TIM2_STOP = Field<11, 1>;    // DBG_TIM2_STOP
            using DBG_TIM3_STOP = Field<12, 1>;    // DBG_TIM3_STOP
            using DBG_TIM4_STOP = Field<13, 1>;    // DBG_TIM4_STOP
            using DBG_I2C1_SMBUS_TIMEOUT = Field<15, 1>;    // DBG_I2C1_SMBUS_TIMEOUT
            using DBG_I2C2_SMBUS_TIMEOUT = Field<16, 1>;    // DBG_I2C2_SMBUS_TIMEOUT
            using DBG_TIM5_STOP = Field<18, 1>;    // DBG_TIM5_STOP
            using DBG_TIM6_STOP = Field<19, 1>;    // DBG_TIM6_STOP
            using DBG_TIM7_STOP = Field<20, 1>;    // DBG_TIM7_STOP
            using DBG_TIM15_STOP = Field<22, 1>;    // DBG_TIM15_STOP
            using DBG_TIM16_STOP = Field<23, 1>;    // DBG_TIM16_STOP
            using DBG_TIM17_STOP = Field<24, 1>;    // DBG_TIM17_STOP
            using DBG_TIM12_STOP = Field<25, 1>;    // DBG_TIM12_STOP
            using DBG_TIM13_STOP = Field<26, 1>;    // DBG_TIM13_STOP
            using DBG_TIM14_STOP = Field<27, 1>;    // DBG_TIM14_STOP
        };

    };

    // Universal asynchronous receiver transmitter
    struct UART4 {
        // Status register
        struct SR : public Register<0x40004c00> {
            using PE = Field<0, 1>;    // Parity error
            using FE = Field<1, 1>;    // Framing error
            using NE = Field<2, 1>;    // Noise error flag
            using ORE = Field<3, 1>;    // Overrun error
            using IDLE = Field<4, 1>;    // IDLE line detected
            using RXNE = Field<5, 1>;    // Read data register not empty
            using TC = Field<6, 1>;    // Transmission complete
            using TXE = Field<7, 1>;    // Transmit data register empty
            using LBD = Field<8, 1>;    // LIN break detection flag
        };

        // Data register
        struct DR : public Register<0x40004c04> {
            using Field = Field<0, 9>;    // DR
        };

        // Baud rate register
        struct BRR : public Register<0x40004c08> {
            using DIV_Fraction = Field<0, 4>;    // DIV_Fraction
            using DIV_Mantissa = Field<4, 12>;    // DIV_Mantissa
        };

        // Control register 1
        struct CR1 : public Register<0x40004c0c> {
            using SBK = Field<0, 1>;    // Send break
            using RWU = Field<1, 1>;    // Receiver wakeup
            using RE = Field<2, 1>;    // Receiver enable
            using TE = Field<3, 1>;    // Transmitter enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using TXEIE = Field<7, 1>;    // TXE interrupt enable
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using PS = Field<9, 1>;    // Parity selection
            using PCE = Field<10, 1>;    // Parity control enable
            using WAKE = Field<11, 1>;    // Wakeup method
            using M = Field<12, 1>;    // Word length
            using UE = Field<13, 1>;    // USART enable
        };

        // Control register 2
        struct CR2 : public Register<0x40004c10> {
            using ADD = Field<0, 4>;    // Address of the USART node
            using LBDL = Field<5, 1>;    // lin break detection length
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using STOP = Field<12, 2>;    // STOP bits
            using LINEN = Field<14, 1>;    // LIN mode enable
        };

        // Control register 3
        struct CR3 : public Register<0x40004c14> {
            using EIE = Field<0, 1>;    // Error interrupt enable
            using IREN = Field<1, 1>;    // IrDA mode enable
            using IRLP = Field<2, 1>;    // IrDA low-power
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using DMAT = Field<7, 1>;    // DMA enable transmitter
        };

    };

    // Universal asynchronous receiver transmitter
    struct UART5 {
        // Status register
        struct SR : public Register<0x40005000> {
            using PE = Field<0, 1>;    // PE
            using FE = Field<1, 1>;    // FE
            using NE = Field<2, 1>;    // NE
            using ORE = Field<3, 1>;    // ORE
            using IDLE = Field<4, 1>;    // IDLE
            using RXNE = Field<5, 1>;    // RXNE
            using TC = Field<6, 1>;    // TC
            using TXE = Field<7, 1>;    // TXE
            using LBD = Field<8, 1>;    // LBD
        };

        // Data register
        struct DR : public Register<0x40005004> {
            using Field = Field<0, 9>;    // DR
        };

        // Baud rate register
        struct BRR : public Register<0x40005008> {
            using DIV_Fraction = Field<0, 4>;    // DIV_Fraction
            using DIV_Mantissa = Field<4, 12>;    // DIV_Mantissa
        };

        // Control register 1
        struct CR1 : public Register<0x4000500c> {
            using SBK = Field<0, 1>;    // SBK
            using RWU = Field<1, 1>;    // RWU
            using RE = Field<2, 1>;    // RE
            using TE = Field<3, 1>;    // TE
            using IDLEIE = Field<4, 1>;    // IDLEIE
            using RXNEIE = Field<5, 1>;    // RXNEIE
            using TCIE = Field<6, 1>;    // TCIE
            using TXEIE = Field<7, 1>;    // TXEIE
            using PEIE = Field<8, 1>;    // PEIE
            using PS = Field<9, 1>;    // PS
            using PCE = Field<10, 1>;    // PCE
            using WAKE = Field<11, 1>;    // WAKE
            using M = Field<12, 1>;    // M
            using UE = Field<13, 1>;    // UE
        };

        // Control register 2
        struct CR2 : public Register<0x40005010> {
            using ADD = Field<0, 4>;    // ADD
            using LBDL = Field<5, 1>;    // LBDL
            using LBDIE = Field<6, 1>;    // LBDIE
            using STOP = Field<12, 2>;    // STOP
            using LINEN = Field<14, 1>;    // LINEN
        };

        // Control register 3
        struct CR3 : public Register<0x40005014> {
            using EIE = Field<0, 1>;    // Error interrupt enable
            using IREN = Field<1, 1>;    // IrDA mode enable
            using IRLP = Field<2, 1>;    // IrDA low-power
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using DMAT = Field<7, 1>;    // DMA enable transmitter
        };

    };

    // CRC calculation unit
    struct CRC {
        // Data register
        struct DR : public Register<0x40023000> {
            using Field = Field<0, 32>;    // Data Register
        };

        // Independent Data register
        struct IDR : public Register<0x40023004> {
            using Field = Field<0, 8>;    // Independent Data register
        };

        // Control register
        struct CR : public Register<0x40023008> {
            using RESET = Field<0, 1>;    // Reset bit
        };

    };

    // FLASH
    struct FLASH {
        // Flash access control register
        struct ACR : public Register<0x40022000> {
            using HLFCYA = Field<3, 1>;    // Flash half cycle access enable
        };

        // Flash key register
        struct KEYR : public Register<0x40022004> {
            using KEY = Field<0, 32>;    // FPEC key
        };

        // Flash option key register
        struct OPTKEYR : public Register<0x40022008> {
            using OPTKEY = Field<0, 32>;    // Option byte key
        };

        // Status register
        struct SR : public Register<0x4002200c> {
            using EOP = Field<5, 1>;    // End of operation
            using WRPRTERR = Field<4, 1>;    // Write protection error
            using PGERR = Field<2, 1>;    // Programming error
            using BSY = Field<0, 1>;    // Busy
        };

        // Control register
        struct CR : public Register<0x40022010> {
            using PG = Field<0, 1>;    // Programming
            using PER = Field<1, 1>;    // Page Erase
            using MER = Field<2, 1>;    // Mass Erase
            using OPTPG = Field<4, 1>;    // Option byte programming
            using OPTER = Field<5, 1>;    // Option byte erase
            using STRT = Field<6, 1>;    // Start
            using LOCK = Field<7, 1>;    // Lock
            using OPTWRE = Field<9, 1>;    // Option bytes write enable
            using ERRIE = Field<10, 1>;    // Error interrupt enable
            using EOPIE = Field<12, 1>;    // End of operation interrupt enable
        };

        // Flash address register
        struct AR : public Register<0x40022014> {
            using FAR = Field<0, 32>;    // Flash Address
        };

        // Option byte register
        struct OBR : public Register<0x4002201c> {
            using OPTERR = Field<0, 1>;    // Option byte error
            using RDPRT = Field<1, 1>;    // Read protection
            using WDG_SW = Field<2, 1>;    // WDG_SW
            using nRST_STOP = Field<3, 1>;    // nRST_STOP
            using nRST_STDBY = Field<4, 1>;    // nRST_STDBY
            using Data0 = Field<10, 8>;    // Data0
            using Data1 = Field<18, 8>;    // Data1
        };

        // Write protection register
        struct WRPR : public Register<0x40022020> {
            using WRP = Field<0, 32>;    // Write protect
        };

    };

    // General purpose timers
    struct TIM15 {
        // control register 1
        struct CR1 : public Register<0x40014000> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40014004> {
            using OIS2 = Field<10, 1>;    // Output Idle state 2
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // slave mode control register
        struct SMCR : public Register<0x40014008> {
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001400c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40014010> {
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40014014> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40014018> {
            using OC2M = Field<12, 3>;    // Output Compare 2 mode
            using OC2PE = Field<11, 1>;    // Output Compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output Compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40014018> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PSC = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40014020> {
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40014024> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40014028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001402c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // repetition counter register
        struct RCR : public Register<0x40014030> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40014034> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40014038> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40014044> {
            using MOE = Field<15, 1>;    // Main output enable
            using AOE = Field<14, 1>;    // Automatic output enable
            using BKP = Field<13, 1>;    // Break polarity
            using BKE = Field<12, 1>;    // Break enable
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using LOCK = Field<8, 2>;    // Lock configuration
            using DTG = Field<0, 8>;    // Dead-time generator setup
        };

        // DMA control register
        struct DCR : public Register<0x40014048> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4001404c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General-purpose-timers
    struct TIM16 {
        // control register 1
        struct CR1 : public Register<0x40014400> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40014404> {
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001440c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40014410> {
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40014414> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40014418> {
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40014418> {
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40014420> {
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40014424> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40014428> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001442c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // repetition counter register
        struct RCR : public Register<0x40014430> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40014434> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40014444> {
            using MOE = Field<15, 1>;    // Main output enable
            using AOE = Field<14, 1>;    // Automatic output enable
            using BKP = Field<13, 1>;    // Break polarity
            using BKE = Field<12, 1>;    // Break enable
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using LOCK = Field<8, 2>;    // Lock configuration
            using DTG = Field<0, 8>;    // Dead-time generator setup
        };

        // DMA control register
        struct DCR : public Register<0x40014448> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4001444c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General-purpose-timers
    struct TIM17 {
        // control register 1
        struct CR1 : public Register<0x40014800> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40014804> {
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001480c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40014810> {
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public Register<0x40014814> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40014818> {
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40014818> {
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40014820> {
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40014824> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40014828> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001482c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // repetition counter register
        struct RCR : public Register<0x40014830> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40014834> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40014844> {
            using MOE = Field<15, 1>;    // Main output enable
            using AOE = Field<14, 1>;    // Automatic output enable
            using BKP = Field<13, 1>;    // Break polarity
            using BKE = Field<12, 1>;    // Break enable
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using LOCK = Field<8, 2>;    // Lock configuration
            using DTG = Field<0, 8>;    // Dead-time generator setup
        };

        // DMA control register
        struct DCR : public Register<0x40014848> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4001484c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // HDMI-CEC controller
    struct CEC {
        // configuration register
        struct CFGR : public Register<0x40007800> {
            using PE = Field<0, 1>;    // Peripheral enable
            using IE = Field<1, 1>;    // Interrupt enable
            using BTEM = Field<2, 1>;    // Bit timing error mode
            using BPEM = Field<3, 1>;    // Bit period error mode
        };

        // CEC own address register
        struct OAR : public Register<0x40007804> {
            using OA = Field<0, 4>;    // Own address
        };

        // Rx Data Register
        struct PRES : public Register<0x40007808> {
            using PRESC = Field<0, 14>;    // CEC Rx Data Register
        };

        // CEC error status register
        struct ESR : public Register<0x4000780c> {
            using BTE = Field<0, 1>;    // Bit timing error
            using BPE = Field<1, 1>;    // Bit period error
            using RBTFE = Field<2, 1>;    // Rx block transfer finished error
            using SBE = Field<3, 1>;    // Start bit error
            using ACKE = Field<4, 1>;    // Block acknowledge error
            using LINE = Field<5, 1>;    // Line error
            using TBTFE = Field<6, 1>;    // Tx block transfer finished error
        };

        // CEC control and status register
        struct CSR : public Register<0x40007810> {
            using TSOM = Field<0, 1>;    // Tx start of message
            using TEOM = Field<1, 1>;    // Tx end of message
            using TERR = Field<2, 1>;    // Tx error
            using TBTRF = Field<3, 1>;    // Tx byte transfer request or block transfer finished
            using RSOM = Field<4, 1>;    // Rx start of message
            using REOM = Field<5, 1>;    // Rx end of message
            using RERR = Field<6, 1>;    // Rx error
            using RBTF = Field<7, 1>;    // Rx byte/block transfer finished
        };

        // CEC Tx data register
        struct TXD : public Register<0x40007814> {
            using Field = Field<0, 8>;    // Tx Data register
        };

        // CEC Rx data register
        struct RXD : public Register<0x40007818> {
            using Field = Field<0, 8>;    // Rx data
        };

    };

    // Nested Vectored Interrupt Controller
    struct NVIC {
        // Interrupt Set-Enable Register
        struct ISER0 : public Register<0xe000e100> {
            using SETENA = Field<0, 32>;    // SETENA
        };

        // Interrupt Set-Enable Register
        struct ISER1 : public Register<0xe000e104> {
            using SETENA = Field<0, 32>;    // SETENA
        };

        // Interrupt Clear-Enable Register
        struct ICER0 : public Register<0xe000e180> {
            using CLRENA = Field<0, 32>;    // CLRENA
        };

        // Interrupt Clear-Enable Register
        struct ICER1 : public Register<0xe000e184> {
            using CLRENA = Field<0, 32>;    // CLRENA
        };

        // Interrupt Set-Pending Register
        struct ISPR0 : public Register<0xe000e200> {
            using SETPEND = Field<0, 32>;    // SETPEND
        };

        // Interrupt Set-Pending Register
        struct ISPR1 : public Register<0xe000e204> {
            using SETPEND = Field<0, 32>;    // SETPEND
        };

        // Interrupt Clear-Pending Register
        struct ICPR0 : public Register<0xe000e280> {
            using CLRPEND = Field<0, 32>;    // CLRPEND
        };

        // Interrupt Clear-Pending Register
        struct ICPR1 : public Register<0xe000e284> {
            using CLRPEND = Field<0, 32>;    // CLRPEND
        };

        // Interrupt Active Bit Register
        struct IABR0 : public Register<0xe000e300> {
            using ACTIVE = Field<0, 32>;    // ACTIVE
        };

        // Interrupt Active Bit Register
        struct IABR1 : public Register<0xe000e304> {
            using ACTIVE = Field<0, 32>;    // ACTIVE
        };

        // Interrupt Priority Register
        struct IPR0 : public Register<0xe000e400> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR1 : public Register<0xe000e404> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR2 : public Register<0xe000e408> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR3 : public Register<0xe000e40c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR4 : public Register<0xe000e410> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR5 : public Register<0xe000e414> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR6 : public Register<0xe000e418> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR7 : public Register<0xe000e41c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR8 : public Register<0xe000e420> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR9 : public Register<0xe000e424> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR10 : public Register<0xe000e428> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR11 : public Register<0xe000e42c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR12 : public Register<0xe000e430> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR13 : public Register<0xe000e434> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR14 : public Register<0xe000e438> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

    };

    // Memory protection unit
    struct MPU {
        // MPU type register
        struct MPU_TYPER : public Register<0xe000ed90> {
            using SEPARATE = Field<0, 1>;    // Separate flag
            using DREGION = Field<8, 8>;    // Number of MPU data regions
            using IREGION = Field<16, 8>;    // Number of MPU instruction regions
        };

        // MPU control register
        struct MPU_CTRL : public Register<0xe000ed94> {
            using ENABLE = Field<0, 1>;    // Enables the MPU
            using HFNMIENA = Field<1, 1>;    // Enables the operation of MPU during hard fault
            using PRIVDEFENA = Field<2, 1>;    // Enable priviliged software access to default memory map
        };

        // MPU region number register
        struct MPU_RNR : public Register<0xe000ed98> {
            using REGION = Field<0, 8>;    // MPU region
        };

        // MPU region base address register
        struct MPU_RBAR : public Register<0xe000ed9c> {
            using REGION = Field<0, 4>;    // MPU region field
            using VALID = Field<4, 1>;    // MPU region number valid
            using ADDR = Field<5, 27>;    // Region base address field
        };

        // MPU region attribute and size register
        struct MPU_RASR : public Register<0xe000eda0> {
            using ENABLE = Field<0, 1>;    // Region enable bit.
            using SIZE = Field<1, 5>;    // Size of the MPU protection region
            using SRD = Field<8, 8>;    // Subregion disable bits
            using B = Field<16, 1>;    // memory attribute
            using C = Field<17, 1>;    // memory attribute
            using S = Field<18, 1>;    // Shareable memory attribute
            using TEX = Field<19, 3>;    // memory attribute
            using AP = Field<24, 3>;    // Access permission
            using XN = Field<28, 1>;    // Instruction access disable bit
        };

    };

    // System control block ACTLR
    struct SCB_ACTRL {
        // Auxiliary control register
        struct ACTRL : public Register<0xe000e008> {
            using DISFOLD = Field<2, 1>;    // DISFOLD
            using FPEXCODIS = Field<10, 1>;    // FPEXCODIS
            using DISRAMODE = Field<11, 1>;    // DISRAMODE
            using DISITMATBFLUSH = Field<12, 1>;    // DISITMATBFLUSH
        };

    };

    // Nested vectored interrupt controller
    struct NVIC_STIR {
        // Software trigger interrupt register
        struct STIR : public Register<0xe000ef00> {
            using INTID = Field<0, 9>;    // Software generated interrupt ID
        };

    };

    // System control block
    struct SCB {
        // CPUID base register
        struct CPUID : public Register<0xe000ed00> {
            using Revision = Field<0, 4>;    // Revision number
            using PartNo = Field<4, 12>;    // Part number of the processor
            using Constant = Field<16, 4>;    // Reads as 0xF
            using Variant = Field<20, 4>;    // Variant number
            using Implementer = Field<24, 8>;    // Implementer code
        };

        // Interrupt control and state register
        struct ICSR : public Register<0xe000ed04> {
            using VECTACTIVE = Field<0, 9>;    // Active vector
            using RETTOBASE = Field<11, 1>;    // Return to base level
            using VECTPENDING = Field<12, 7>;    // Pending vector
            using ISRPENDING = Field<22, 1>;    // Interrupt pending flag
            using PENDSTCLR = Field<25, 1>;    // SysTick exception clear-pending bit
            using PENDSTSET = Field<26, 1>;    // SysTick exception set-pending bit
            using PENDSVCLR = Field<27, 1>;    // PendSV clear-pending bit
            using PENDSVSET = Field<28, 1>;    // PendSV set-pending bit
            using NMIPENDSET = Field<31, 1>;    // NMI set-pending bit.
        };

        // Vector table offset register
        struct VTOR : public Register<0xe000ed08> {
            using TBLOFF = Field<9, 21>;    // Vector table base offset field
        };

        // Application interrupt and reset control register
        struct AIRCR : public Register<0xe000ed0c> {
            using VECTRESET = Field<0, 1>;    // VECTRESET
            using VECTCLRACTIVE = Field<1, 1>;    // VECTCLRACTIVE
            using SYSRESETREQ = Field<2, 1>;    // SYSRESETREQ
            using PRIGROUP = Field<8, 3>;    // PRIGROUP
            using ENDIANESS = Field<15, 1>;    // ENDIANESS
            using VECTKEYSTAT = Field<16, 16>;    // Register key
        };

        // System control register
        struct SCR : public Register<0xe000ed10> {
            using SLEEPONEXIT = Field<1, 1>;    // SLEEPONEXIT
            using SLEEPDEEP = Field<2, 1>;    // SLEEPDEEP
            using SEVEONPEND = Field<4, 1>;    // Send Event on Pending bit
        };

        // Configuration and control register
        struct CCR : public Register<0xe000ed14> {
            using NONBASETHRDENA = Field<0, 1>;    // Configures how the processor enters Thread mode
            using USERSETMPEND = Field<1, 1>;    // USERSETMPEND
            using UNALIGN__TRP = Field<3, 1>;    // UNALIGN_ TRP
            using DIV_0_TRP = Field<4, 1>;    // DIV_0_TRP
            using BFHFNMIGN = Field<8, 1>;    // BFHFNMIGN
            using STKALIGN = Field<9, 1>;    // STKALIGN
        };

        // System handler priority registers
        struct SHPR1 : public Register<0xe000ed18> {
            using PRI_4 = Field<0, 8>;    // Priority of system handler 4
            using PRI_5 = Field<8, 8>;    // Priority of system handler 5
            using PRI_6 = Field<16, 8>;    // Priority of system handler 6
        };

        // System handler priority registers
        struct SHPR2 : public Register<0xe000ed1c> {
            using PRI_11 = Field<24, 8>;    // Priority of system handler 11
        };

        // System handler priority registers
        struct SHPR3 : public Register<0xe000ed20> {
            using PRI_14 = Field<16, 8>;    // Priority of system handler 14
            using PRI_15 = Field<24, 8>;    // Priority of system handler 15
        };

        // System handler control and state register
        struct SHCRS : public Register<0xe000ed24> {
            using MEMFAULTACT = Field<0, 1>;    // Memory management fault exception active bit
            using BUSFAULTACT = Field<1, 1>;    // Bus fault exception active bit
            using USGFAULTACT = Field<3, 1>;    // Usage fault exception active bit
            using SVCALLACT = Field<7, 1>;    // SVC call active bit
            using MONITORACT = Field<8, 1>;    // Debug monitor active bit
            using PENDSVACT = Field<10, 1>;    // PendSV exception active bit
            using SYSTICKACT = Field<11, 1>;    // SysTick exception active bit
            using USGFAULTPENDED = Field<12, 1>;    // Usage fault exception pending bit
            using MEMFAULTPENDED = Field<13, 1>;    // Memory management fault exception pending bit
            using BUSFAULTPENDED = Field<14, 1>;    // Bus fault exception pending bit
            using SVCALLPENDED = Field<15, 1>;    // SVC call pending bit
            using MEMFAULTENA = Field<16, 1>;    // Memory management fault enable bit
            using BUSFAULTENA = Field<17, 1>;    // Bus fault enable bit
            using USGFAULTENA = Field<18, 1>;    // Usage fault enable bit
        };

        // Configurable fault status register
        struct CFSR_UFSR_BFSR_MMFSR : public Register<0xe000ed28> {
            using IACCVIOL = Field<0, 1>;    // IACCVIOL
            using DACCVIOL = Field<1, 1>;    // DACCVIOL
            using MUNSTKERR = Field<3, 1>;    // MUNSTKERR
            using MSTKERR = Field<4, 1>;    // MSTKERR
            using MLSPERR = Field<5, 1>;    // MLSPERR
            using MMARVALID = Field<7, 1>;    // MMARVALID
            using IBUSERR = Field<8, 1>;    // Instruction bus error
            using PRECISERR = Field<9, 1>;    // Precise data bus error
            using IMPRECISERR = Field<10, 1>;    // Imprecise data bus error
            using UNSTKERR = Field<11, 1>;    // Bus fault on unstacking for a return from exception
            using STKERR = Field<12, 1>;    // Bus fault on stacking for exception entry
            using LSPERR = Field<13, 1>;    // Bus fault on floating-point lazy state preservation
            using BFARVALID = Field<15, 1>;    // Bus Fault Address Register (BFAR) valid flag
            using UNDEFINSTR = Field<16, 1>;    // Undefined instruction usage fault
            using INVSTATE = Field<17, 1>;    // Invalid state usage fault
            using INVPC = Field<18, 1>;    // Invalid PC load usage fault
            using NOCP = Field<19, 1>;    // No coprocessor usage fault.
            using UNALIGNED = Field<24, 1>;    // Unaligned access usage fault
            using DIVBYZERO = Field<25, 1>;    // Divide by zero usage fault
        };

        // Hard fault status register
        struct HFSR : public Register<0xe000ed2c> {
            using VECTTBL = Field<1, 1>;    // Vector table hard fault
            using FORCED = Field<30, 1>;    // Forced hard fault
            using DEBUG_VT = Field<31, 1>;    // Reserved for Debug use
        };

        // Memory management fault address register
        struct MMFAR : public Register<0xe000ed34> {
            using Field = Field<0, 32>;    // Memory management fault address
        };

        // Bus fault address register
        struct BFAR : public Register<0xe000ed38> {
            using Field = Field<0, 32>;    // Bus fault address
        };

    };

    // SysTick timer
    struct STK {
        // SysTick control and status register
        struct CTRL : public Register<0xe000e010> {
            using ENABLE = Field<0, 1>;    // Counter enable
            using TICKINT = Field<1, 1>;    // SysTick exception request enable
            using CLKSOURCE = Field<2, 1>;    // Clock source selection
            using COUNTFLAG = Field<16, 1>;    // COUNTFLAG
        };

        // SysTick reload value register
        struct LOAD_ : public Register<0xe000e014> {
            using RELOAD = Field<0, 24>;    // RELOAD value
        };

        // SysTick current value register
        struct VAL : public Register<0xe000e018> {
            using CURRENT = Field<0, 24>;    // Current counter value
        };

        // SysTick calibration value register
        struct CALIB : public Register<0xe000e01c> {
            using TENMS = Field<0, 24>;    // Calibration value
        };

    };

};
