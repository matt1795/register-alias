// This is a file generated by svd-alias.

#pragma once

#include "svd-alias/bit-field.hpp"
#include "svd-alias/register.hpp"

struct STM32F0x1 {
    // cyclic redundancy check calculation unit
    struct CRC {
        // Data register
        struct DR : public Register<0x40023000> {
            using Field = Field<0, 32>;    // Data register bits
        };

        // Independent data register
        struct IDR : public Register<0x40023004> {
            using Field = Field<0, 8>;    // General-purpose 8-bit data register bits
        };

        // Control register
        struct CR : public Register<0x40023008> {
            using RESET = Field<0, 1>;    // reset bit
            using POLYSIZE = Field<3, 2>;    // Polynomial size
            using REV_IN = Field<5, 2>;    // Reverse input data
            using REV_OUT = Field<7, 1>;    // Reverse output data
        };

        // Initial CRC value
        struct INIT : public Register<0x4002300c> {
            using Field = Field<0, 32>;    // Programmable initial CRC value
        };

    };

    // General-purpose I/Os
    struct GPIOF {
        // GPIO port mode register
        struct MODER : public Register<0x48001400> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x48001404> {
            using OT15 = Field<15, 1>;    // Port x configuration bit 15
            using OT14 = Field<14, 1>;    // Port x configuration bit 14
            using OT13 = Field<13, 1>;    // Port x configuration bit 13
            using OT12 = Field<12, 1>;    // Port x configuration bit 12
            using OT11 = Field<11, 1>;    // Port x configuration bit 11
            using OT10 = Field<10, 1>;    // Port x configuration bit 10
            using OT9 = Field<9, 1>;    // Port x configuration bit 9
            using OT8 = Field<8, 1>;    // Port x configuration bit 8
            using OT7 = Field<7, 1>;    // Port x configuration bit 7
            using OT6 = Field<6, 1>;    // Port x configuration bit 6
            using OT5 = Field<5, 1>;    // Port x configuration bit 5
            using OT4 = Field<4, 1>;    // Port x configuration bit 4
            using OT3 = Field<3, 1>;    // Port x configuration bit 3
            using OT2 = Field<2, 1>;    // Port x configuration bit 2
            using OT1 = Field<1, 1>;    // Port x configuration bit 1
            using OT0 = Field<0, 1>;    // Port x configuration bit 0
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x48001408> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4800140c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x48001410> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x48001414> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x48001418> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4800141c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x48001420> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x48001424> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

        // Port bit reset register
        struct BRR : public RegisterWriteOnly<0x48001428> {
            using BR0 = Field<0, 1>;    // Port x Reset bit y
            using BR1 = Field<1, 1>;    // Port x Reset bit y
            using BR2 = Field<2, 1>;    // Port x Reset bit y
            using BR3 = Field<3, 1>;    // Port x Reset bit y
            using BR4 = Field<4, 1>;    // Port x Reset bit y
            using BR5 = Field<5, 1>;    // Port x Reset bit y
            using BR6 = Field<6, 1>;    // Port x Reset bit y
            using BR7 = Field<7, 1>;    // Port x Reset bit y
            using BR8 = Field<8, 1>;    // Port x Reset bit y
            using BR9 = Field<9, 1>;    // Port x Reset bit y
            using BR10 = Field<10, 1>;    // Port x Reset bit y
            using BR11 = Field<11, 1>;    // Port x Reset bit y
            using BR12 = Field<12, 1>;    // Port x Reset bit y
            using BR13 = Field<13, 1>;    // Port x Reset bit y
            using BR14 = Field<14, 1>;    // Port x Reset bit y
            using BR15 = Field<15, 1>;    // Port x Reset bit y
        };

    };

    // General-purpose I/Os
    struct GPIOD {
        // GPIO port mode register
        struct MODER : public Register<0x48000c00> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x48000c04> {
            using OT15 = Field<15, 1>;    // Port x configuration bit 15
            using OT14 = Field<14, 1>;    // Port x configuration bit 14
            using OT13 = Field<13, 1>;    // Port x configuration bit 13
            using OT12 = Field<12, 1>;    // Port x configuration bit 12
            using OT11 = Field<11, 1>;    // Port x configuration bit 11
            using OT10 = Field<10, 1>;    // Port x configuration bit 10
            using OT9 = Field<9, 1>;    // Port x configuration bit 9
            using OT8 = Field<8, 1>;    // Port x configuration bit 8
            using OT7 = Field<7, 1>;    // Port x configuration bit 7
            using OT6 = Field<6, 1>;    // Port x configuration bit 6
            using OT5 = Field<5, 1>;    // Port x configuration bit 5
            using OT4 = Field<4, 1>;    // Port x configuration bit 4
            using OT3 = Field<3, 1>;    // Port x configuration bit 3
            using OT2 = Field<2, 1>;    // Port x configuration bit 2
            using OT1 = Field<1, 1>;    // Port x configuration bit 1
            using OT0 = Field<0, 1>;    // Port x configuration bit 0
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x48000c08> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x48000c0c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x48000c10> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x48000c14> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x48000c18> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x48000c1c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x48000c20> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x48000c24> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

        // Port bit reset register
        struct BRR : public RegisterWriteOnly<0x48000c28> {
            using BR0 = Field<0, 1>;    // Port x Reset bit y
            using BR1 = Field<1, 1>;    // Port x Reset bit y
            using BR2 = Field<2, 1>;    // Port x Reset bit y
            using BR3 = Field<3, 1>;    // Port x Reset bit y
            using BR4 = Field<4, 1>;    // Port x Reset bit y
            using BR5 = Field<5, 1>;    // Port x Reset bit y
            using BR6 = Field<6, 1>;    // Port x Reset bit y
            using BR7 = Field<7, 1>;    // Port x Reset bit y
            using BR8 = Field<8, 1>;    // Port x Reset bit y
            using BR9 = Field<9, 1>;    // Port x Reset bit y
            using BR10 = Field<10, 1>;    // Port x Reset bit y
            using BR11 = Field<11, 1>;    // Port x Reset bit y
            using BR12 = Field<12, 1>;    // Port x Reset bit y
            using BR13 = Field<13, 1>;    // Port x Reset bit y
            using BR14 = Field<14, 1>;    // Port x Reset bit y
            using BR15 = Field<15, 1>;    // Port x Reset bit y
        };

    };

    // General-purpose I/Os
    struct GPIOC {
        // GPIO port mode register
        struct MODER : public Register<0x48000800> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x48000804> {
            using OT15 = Field<15, 1>;    // Port x configuration bit 15
            using OT14 = Field<14, 1>;    // Port x configuration bit 14
            using OT13 = Field<13, 1>;    // Port x configuration bit 13
            using OT12 = Field<12, 1>;    // Port x configuration bit 12
            using OT11 = Field<11, 1>;    // Port x configuration bit 11
            using OT10 = Field<10, 1>;    // Port x configuration bit 10
            using OT9 = Field<9, 1>;    // Port x configuration bit 9
            using OT8 = Field<8, 1>;    // Port x configuration bit 8
            using OT7 = Field<7, 1>;    // Port x configuration bit 7
            using OT6 = Field<6, 1>;    // Port x configuration bit 6
            using OT5 = Field<5, 1>;    // Port x configuration bit 5
            using OT4 = Field<4, 1>;    // Port x configuration bit 4
            using OT3 = Field<3, 1>;    // Port x configuration bit 3
            using OT2 = Field<2, 1>;    // Port x configuration bit 2
            using OT1 = Field<1, 1>;    // Port x configuration bit 1
            using OT0 = Field<0, 1>;    // Port x configuration bit 0
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x48000808> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4800080c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x48000810> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x48000814> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x48000818> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4800081c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x48000820> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x48000824> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

        // Port bit reset register
        struct BRR : public RegisterWriteOnly<0x48000828> {
            using BR0 = Field<0, 1>;    // Port x Reset bit y
            using BR1 = Field<1, 1>;    // Port x Reset bit y
            using BR2 = Field<2, 1>;    // Port x Reset bit y
            using BR3 = Field<3, 1>;    // Port x Reset bit y
            using BR4 = Field<4, 1>;    // Port x Reset bit y
            using BR5 = Field<5, 1>;    // Port x Reset bit y
            using BR6 = Field<6, 1>;    // Port x Reset bit y
            using BR7 = Field<7, 1>;    // Port x Reset bit y
            using BR8 = Field<8, 1>;    // Port x Reset bit y
            using BR9 = Field<9, 1>;    // Port x Reset bit y
            using BR10 = Field<10, 1>;    // Port x Reset bit y
            using BR11 = Field<11, 1>;    // Port x Reset bit y
            using BR12 = Field<12, 1>;    // Port x Reset bit y
            using BR13 = Field<13, 1>;    // Port x Reset bit y
            using BR14 = Field<14, 1>;    // Port x Reset bit y
            using BR15 = Field<15, 1>;    // Port x Reset bit y
        };

    };

    // General-purpose I/Os
    struct GPIOB {
        // GPIO port mode register
        struct MODER : public Register<0x48000400> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x48000404> {
            using OT15 = Field<15, 1>;    // Port x configuration bit 15
            using OT14 = Field<14, 1>;    // Port x configuration bit 14
            using OT13 = Field<13, 1>;    // Port x configuration bit 13
            using OT12 = Field<12, 1>;    // Port x configuration bit 12
            using OT11 = Field<11, 1>;    // Port x configuration bit 11
            using OT10 = Field<10, 1>;    // Port x configuration bit 10
            using OT9 = Field<9, 1>;    // Port x configuration bit 9
            using OT8 = Field<8, 1>;    // Port x configuration bit 8
            using OT7 = Field<7, 1>;    // Port x configuration bit 7
            using OT6 = Field<6, 1>;    // Port x configuration bit 6
            using OT5 = Field<5, 1>;    // Port x configuration bit 5
            using OT4 = Field<4, 1>;    // Port x configuration bit 4
            using OT3 = Field<3, 1>;    // Port x configuration bit 3
            using OT2 = Field<2, 1>;    // Port x configuration bit 2
            using OT1 = Field<1, 1>;    // Port x configuration bit 1
            using OT0 = Field<0, 1>;    // Port x configuration bit 0
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x48000408> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4800040c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x48000410> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x48000414> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x48000418> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4800041c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x48000420> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x48000424> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

        // Port bit reset register
        struct BRR : public RegisterWriteOnly<0x48000428> {
            using BR0 = Field<0, 1>;    // Port x Reset bit y
            using BR1 = Field<1, 1>;    // Port x Reset bit y
            using BR2 = Field<2, 1>;    // Port x Reset bit y
            using BR3 = Field<3, 1>;    // Port x Reset bit y
            using BR4 = Field<4, 1>;    // Port x Reset bit y
            using BR5 = Field<5, 1>;    // Port x Reset bit y
            using BR6 = Field<6, 1>;    // Port x Reset bit y
            using BR7 = Field<7, 1>;    // Port x Reset bit y
            using BR8 = Field<8, 1>;    // Port x Reset bit y
            using BR9 = Field<9, 1>;    // Port x Reset bit y
            using BR10 = Field<10, 1>;    // Port x Reset bit y
            using BR11 = Field<11, 1>;    // Port x Reset bit y
            using BR12 = Field<12, 1>;    // Port x Reset bit y
            using BR13 = Field<13, 1>;    // Port x Reset bit y
            using BR14 = Field<14, 1>;    // Port x Reset bit y
            using BR15 = Field<15, 1>;    // Port x Reset bit y
        };

    };

    // General-purpose I/Os
    struct GPIOE {
        // GPIO port mode register
        struct MODER : public Register<0x48001000> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x48001004> {
            using OT15 = Field<15, 1>;    // Port x configuration bit 15
            using OT14 = Field<14, 1>;    // Port x configuration bit 14
            using OT13 = Field<13, 1>;    // Port x configuration bit 13
            using OT12 = Field<12, 1>;    // Port x configuration bit 12
            using OT11 = Field<11, 1>;    // Port x configuration bit 11
            using OT10 = Field<10, 1>;    // Port x configuration bit 10
            using OT9 = Field<9, 1>;    // Port x configuration bit 9
            using OT8 = Field<8, 1>;    // Port x configuration bit 8
            using OT7 = Field<7, 1>;    // Port x configuration bit 7
            using OT6 = Field<6, 1>;    // Port x configuration bit 6
            using OT5 = Field<5, 1>;    // Port x configuration bit 5
            using OT4 = Field<4, 1>;    // Port x configuration bit 4
            using OT3 = Field<3, 1>;    // Port x configuration bit 3
            using OT2 = Field<2, 1>;    // Port x configuration bit 2
            using OT1 = Field<1, 1>;    // Port x configuration bit 1
            using OT0 = Field<0, 1>;    // Port x configuration bit 0
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x48001008> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4800100c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x48001010> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x48001014> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x48001018> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4800101c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x48001020> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x48001024> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

        // Port bit reset register
        struct BRR : public RegisterWriteOnly<0x48001028> {
            using BR0 = Field<0, 1>;    // Port x Reset bit y
            using BR1 = Field<1, 1>;    // Port x Reset bit y
            using BR2 = Field<2, 1>;    // Port x Reset bit y
            using BR3 = Field<3, 1>;    // Port x Reset bit y
            using BR4 = Field<4, 1>;    // Port x Reset bit y
            using BR5 = Field<5, 1>;    // Port x Reset bit y
            using BR6 = Field<6, 1>;    // Port x Reset bit y
            using BR7 = Field<7, 1>;    // Port x Reset bit y
            using BR8 = Field<8, 1>;    // Port x Reset bit y
            using BR9 = Field<9, 1>;    // Port x Reset bit y
            using BR10 = Field<10, 1>;    // Port x Reset bit y
            using BR11 = Field<11, 1>;    // Port x Reset bit y
            using BR12 = Field<12, 1>;    // Port x Reset bit y
            using BR13 = Field<13, 1>;    // Port x Reset bit y
            using BR14 = Field<14, 1>;    // Port x Reset bit y
            using BR15 = Field<15, 1>;    // Port x Reset bit y
        };

    };

    // General-purpose I/Os
    struct GPIOA {
        // GPIO port mode register
        struct MODER : public Register<0x48000000> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x48000004> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x48000008> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4800000c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x48000010> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x48000014> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x48000018> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4800001c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x48000020> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x48000024> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

        // Port bit reset register
        struct BRR : public RegisterWriteOnly<0x48000028> {
            using BR0 = Field<0, 1>;    // Port x Reset bit y
            using BR1 = Field<1, 1>;    // Port x Reset bit y
            using BR2 = Field<2, 1>;    // Port x Reset bit y
            using BR3 = Field<3, 1>;    // Port x Reset bit y
            using BR4 = Field<4, 1>;    // Port x Reset bit y
            using BR5 = Field<5, 1>;    // Port x Reset bit y
            using BR6 = Field<6, 1>;    // Port x Reset bit y
            using BR7 = Field<7, 1>;    // Port x Reset bit y
            using BR8 = Field<8, 1>;    // Port x Reset bit y
            using BR9 = Field<9, 1>;    // Port x Reset bit y
            using BR10 = Field<10, 1>;    // Port x Reset bit y
            using BR11 = Field<11, 1>;    // Port x Reset bit y
            using BR12 = Field<12, 1>;    // Port x Reset bit y
            using BR13 = Field<13, 1>;    // Port x Reset bit y
            using BR14 = Field<14, 1>;    // Port x Reset bit y
            using BR15 = Field<15, 1>;    // Port x Reset bit y
        };

    };

    // Serial peripheral interface
    struct SPI1 {
        // control register 1
        struct CR1 : public Register<0x40013000> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40013004> {
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using SSOE = Field<2, 1>;    // SS output enable
            using NSSP = Field<3, 1>;    // NSS pulse management
            using FRF = Field<4, 1>;    // Frame format
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using DS = Field<8, 4>;    // Data size
            using FRXTH = Field<12, 1>;    // FIFO reception threshold
            using LDMA_RX = Field<13, 1>;    // Last DMA transfer for reception
            using LDMA_TX = Field<14, 1>;    // Last DMA transfer for transmission
        };

        // status register
        struct SR : public Register<0x40013008> {
            using RXNE = Field<0, 1>;    // Receive buffer not empty
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using CHSIDE = Field<2, 1>;    // Channel side
            using UDR = Field<3, 1>;    // Underrun flag
            using CRCERR = Field<4, 1>;    // CRC error flag
            using MODF = Field<5, 1>;    // Mode fault
            using OVR = Field<6, 1>;    // Overrun flag
            using BSY = Field<7, 1>;    // Busy flag
            using TIFRFE = Field<8, 1>;    // TI frame format error
            using FRLVL = Field<9, 2>;    // FIFO reception level
            using FTLVL = Field<11, 2>;    // FIFO transmission level
        };

        // data register
        struct DR : public Register<0x4001300c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40013010> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public RegisterReadOnly<0x40013014> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public RegisterReadOnly<0x40013018> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

        // I2S configuration register
        struct I2SCFGR : public Register<0x4001301c> {
            using I2SMOD = Field<11, 1>;    // I2S mode selection
            using I2SE = Field<10, 1>;    // I2S Enable
            using I2SCFG = Field<8, 2>;    // I2S configuration mode
            using PCMSYNC = Field<7, 1>;    // PCM frame synchronization
            using I2SSTD = Field<4, 2>;    // I2S standard selection
            using CKPOL = Field<3, 1>;    // Steady state clock polarity
            using DATLEN = Field<1, 2>;    // Data length to be transferred
            using CHLEN = Field<0, 1>;    // Channel length (number of bits per audio channel)
        };

        // I2S prescaler register
        struct I2SPR : public Register<0x40013020> {
            using MCKOE = Field<9, 1>;    // Master clock output enable
            using ODD = Field<8, 1>;    // Odd factor for the prescaler
            using I2SDIV = Field<0, 8>;    // I2S Linear prescaler
        };

    };

    // Serial peripheral interface
    struct SPI2 {
        // control register 1
        struct CR1 : public Register<0x40003800> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40003804> {
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using SSOE = Field<2, 1>;    // SS output enable
            using NSSP = Field<3, 1>;    // NSS pulse management
            using FRF = Field<4, 1>;    // Frame format
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using DS = Field<8, 4>;    // Data size
            using FRXTH = Field<12, 1>;    // FIFO reception threshold
            using LDMA_RX = Field<13, 1>;    // Last DMA transfer for reception
            using LDMA_TX = Field<14, 1>;    // Last DMA transfer for transmission
        };

        // status register
        struct SR : public Register<0x40003808> {
            using RXNE = Field<0, 1>;    // Receive buffer not empty
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using CHSIDE = Field<2, 1>;    // Channel side
            using UDR = Field<3, 1>;    // Underrun flag
            using CRCERR = Field<4, 1>;    // CRC error flag
            using MODF = Field<5, 1>;    // Mode fault
            using OVR = Field<6, 1>;    // Overrun flag
            using BSY = Field<7, 1>;    // Busy flag
            using TIFRFE = Field<8, 1>;    // TI frame format error
            using FRLVL = Field<9, 2>;    // FIFO reception level
            using FTLVL = Field<11, 2>;    // FIFO transmission level
        };

        // data register
        struct DR : public Register<0x4000380c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40003810> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public RegisterReadOnly<0x40003814> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public RegisterReadOnly<0x40003818> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

        // I2S configuration register
        struct I2SCFGR : public Register<0x4000381c> {
            using I2SMOD = Field<11, 1>;    // I2S mode selection
            using I2SE = Field<10, 1>;    // I2S Enable
            using I2SCFG = Field<8, 2>;    // I2S configuration mode
            using PCMSYNC = Field<7, 1>;    // PCM frame synchronization
            using I2SSTD = Field<4, 2>;    // I2S standard selection
            using CKPOL = Field<3, 1>;    // Steady state clock polarity
            using DATLEN = Field<1, 2>;    // Data length to be transferred
            using CHLEN = Field<0, 1>;    // Channel length (number of bits per audio channel)
        };

        // I2S prescaler register
        struct I2SPR : public Register<0x40003820> {
            using MCKOE = Field<9, 1>;    // Master clock output enable
            using ODD = Field<8, 1>;    // Odd factor for the prescaler
            using I2SDIV = Field<0, 8>;    // I2S Linear prescaler
        };

    };

    // Power control
    struct PWR {
        // power control register
        struct CR : public Register<0x40007000> {
            using DBP = Field<8, 1>;    // Disable backup domain write protection
            using PLS = Field<5, 3>;    // PVD level selection
            using PVDE = Field<4, 1>;    // Power voltage detector enable
            using CSBF = Field<3, 1>;    // Clear standby flag
            using CWUF = Field<2, 1>;    // Clear wakeup flag
            using PDDS = Field<1, 1>;    // Power down deepsleep
            using LPDS = Field<0, 1>;    // Low-power deep sleep
        };

        // power control/status register
        struct CSR : public Register<0x40007004> {
            using WUF = Field<0, 1>;    // Wakeup flag
            using SBF = Field<1, 1>;    // Standby flag
            using PVDO = Field<2, 1>;    // PVD output
            using VREFINTRDY = Field<3, 1>;    // VREFINT reference voltage ready
            using EWUP1 = Field<8, 1>;    // Enable WKUP pin 1
            using EWUP2 = Field<9, 1>;    // Enable WKUP pin 2
            using EWUP3 = Field<10, 1>;    // Enable WKUP pin 3
            using EWUP4 = Field<11, 1>;    // Enable WKUP pin 4
            using EWUP5 = Field<12, 1>;    // Enable WKUP pin 5
            using EWUP6 = Field<13, 1>;    // Enable WKUP pin 6
            using EWUP7 = Field<14, 1>;    // Enable WKUP pin 7
            using EWUP8 = Field<15, 1>;    // Enable WKUP pin 8
        };

    };

    // Inter-integrated circuit
    struct I2C1 {
        // Control register 1
        struct CR1 : public Register<0x40005400> {
            using PE = Field<0, 1>;    // Peripheral enable
            using TXIE = Field<1, 1>;    // TX Interrupt enable
            using RXIE = Field<2, 1>;    // RX Interrupt enable
            using ADDRIE = Field<3, 1>;    // Address match interrupt enable (slave only)
            using NACKIE = Field<4, 1>;    // Not acknowledge received interrupt enable
            using STOPIE = Field<5, 1>;    // STOP detection Interrupt enable
            using TCIE = Field<6, 1>;    // Transfer Complete interrupt enable
            using ERRIE = Field<7, 1>;    // Error interrupts enable
            using DNF = Field<8, 4>;    // Digital noise filter
            using ANFOFF = Field<12, 1>;    // Analog noise filter OFF
            using SWRST = Field<13, 1>;    // Software reset
            using TXDMAEN = Field<14, 1>;    // DMA transmission requests enable
            using RXDMAEN = Field<15, 1>;    // DMA reception requests enable
            using SBC = Field<16, 1>;    // Slave byte control
            using NOSTRETCH = Field<17, 1>;    // Clock stretching disable
            using WUPEN = Field<18, 1>;    // Wakeup from STOP enable
            using GCEN = Field<19, 1>;    // General call enable
            using SMBHEN = Field<20, 1>;    // SMBus Host address enable
            using SMBDEN = Field<21, 1>;    // SMBus Device Default address enable
            using ALERTEN = Field<22, 1>;    // SMBUS alert enable
            using PECEN = Field<23, 1>;    // PEC enable
        };

        // Control register 2
        struct CR2 : public Register<0x40005404> {
            using PECBYTE = Field<26, 1>;    // Packet error checking byte
            using AUTOEND = Field<25, 1>;    // Automatic end mode (master mode)
            using RELOAD = Field<24, 1>;    // NBYTES reload mode
            using NBYTES = Field<16, 8>;    // Number of bytes
            using NACK = Field<15, 1>;    // NACK generation (slave mode)
            using STOP = Field<14, 1>;    // Stop generation (master mode)
            using START = Field<13, 1>;    // Start generation
            using HEAD10R = Field<12, 1>;    // 10-bit address header only read direction (master receiver mode)
            using ADD10 = Field<11, 1>;    // 10-bit addressing mode (master mode)
            using RD_WRN = Field<10, 1>;    // Transfer direction (master mode)
            using SADD8 = Field<8, 2>;    // Slave address bit 9:8 (master mode)
            using SADD1 = Field<1, 7>;    // Slave address bit 7:1 (master mode)
            using SADD0 = Field<0, 1>;    // Slave address bit 0 (master mode)
        };

        // Own address register 1
        struct OAR1 : public Register<0x40005408> {
            using OA1_0 = Field<0, 1>;    // Interface address
            using OA1_1 = Field<1, 7>;    // Interface address
            using OA1_8 = Field<8, 2>;    // Interface address
            using OA1MODE = Field<10, 1>;    // Own Address 1 10-bit mode
            using OA1EN = Field<15, 1>;    // Own Address 1 enable
        };

        // Own address register 2
        struct OAR2 : public Register<0x4000540c> {
            using OA2 = Field<1, 7>;    // Interface address
            using OA2MSK = Field<8, 3>;    // Own Address 2 masks
            using OA2EN = Field<15, 1>;    // Own Address 2 enable
        };

        // Timing register
        struct TIMINGR : public Register<0x40005410> {
            using SCLL = Field<0, 8>;    // SCL low period (master mode)
            using SCLH = Field<8, 8>;    // SCL high period (master mode)
            using SDADEL = Field<16, 4>;    // Data hold time
            using SCLDEL = Field<20, 4>;    // Data setup time
            using PRESC = Field<28, 4>;    // Timing prescaler
        };

        // Status register 1
        struct TIMEOUTR : public Register<0x40005414> {
            using TIMEOUTA = Field<0, 12>;    // Bus timeout A
            using TIDLE = Field<12, 1>;    // Idle clock timeout detection
            using TIMOUTEN = Field<15, 1>;    // Clock timeout enable
            using TIMEOUTB = Field<16, 12>;    // Bus timeout B
            using TEXTEN = Field<31, 1>;    // Extended clock timeout enable
        };

        // Interrupt and Status register
        struct ISR : public Register<0x40005418> {
            using ADDCODE = Field<17, 7>;    // Address match code (Slave mode)
            using DIR = Field<16, 1>;    // Transfer direction (Slave mode)
            using BUSY = Field<15, 1>;    // Bus busy
            using ALERT = Field<13, 1>;    // SMBus alert
            using TIMEOUT = Field<12, 1>;    // Timeout or t_low detection flag
            using PECERR = Field<11, 1>;    // PEC Error in reception
            using OVR = Field<10, 1>;    // Overrun/Underrun (slave mode)
            using ARLO = Field<9, 1>;    // Arbitration lost
            using BERR = Field<8, 1>;    // Bus error
            using TCR = Field<7, 1>;    // Transfer Complete Reload
            using TC = Field<6, 1>;    // Transfer Complete (master mode)
            using STOPF = Field<5, 1>;    // Stop detection flag
            using NACKF = Field<4, 1>;    // Not acknowledge received flag
            using ADDR = Field<3, 1>;    // Address matched (slave mode)
            using RXNE = Field<2, 1>;    // Receive data register not empty (receivers)
            using TXIS = Field<1, 1>;    // Transmit interrupt status (transmitters)
            using TXE = Field<0, 1>;    // Transmit data register empty (transmitters)
        };

        // Interrupt clear register
        struct ICR : public RegisterWriteOnly<0x4000541c> {
            using ALERTCF = Field<13, 1>;    // Alert flag clear
            using TIMOUTCF = Field<12, 1>;    // Timeout detection flag clear
            using PECCF = Field<11, 1>;    // PEC Error flag clear
            using OVRCF = Field<10, 1>;    // Overrun/Underrun flag clear
            using ARLOCF = Field<9, 1>;    // Arbitration lost flag clear
            using BERRCF = Field<8, 1>;    // Bus error flag clear
            using STOPCF = Field<5, 1>;    // Stop detection flag clear
            using NACKCF = Field<4, 1>;    // Not Acknowledge flag clear
            using ADDRCF = Field<3, 1>;    // Address Matched flag clear
        };

        // PEC register
        struct PECR : public RegisterReadOnly<0x40005420> {
            using PEC = Field<0, 8>;    // Packet error checking register
        };

        // Receive data register
        struct RXDR : public RegisterReadOnly<0x40005424> {
            using RXDATA = Field<0, 8>;    // 8-bit receive data
        };

        // Transmit data register
        struct TXDR : public Register<0x40005428> {
            using TXDATA = Field<0, 8>;    // 8-bit transmit data
        };

    };

    // Inter-integrated circuit
    struct I2C2 {
        // Control register 1
        struct CR1 : public Register<0x40005800> {
            using PE = Field<0, 1>;    // Peripheral enable
            using TXIE = Field<1, 1>;    // TX Interrupt enable
            using RXIE = Field<2, 1>;    // RX Interrupt enable
            using ADDRIE = Field<3, 1>;    // Address match interrupt enable (slave only)
            using NACKIE = Field<4, 1>;    // Not acknowledge received interrupt enable
            using STOPIE = Field<5, 1>;    // STOP detection Interrupt enable
            using TCIE = Field<6, 1>;    // Transfer Complete interrupt enable
            using ERRIE = Field<7, 1>;    // Error interrupts enable
            using DNF = Field<8, 4>;    // Digital noise filter
            using ANFOFF = Field<12, 1>;    // Analog noise filter OFF
            using SWRST = Field<13, 1>;    // Software reset
            using TXDMAEN = Field<14, 1>;    // DMA transmission requests enable
            using RXDMAEN = Field<15, 1>;    // DMA reception requests enable
            using SBC = Field<16, 1>;    // Slave byte control
            using NOSTRETCH = Field<17, 1>;    // Clock stretching disable
            using WUPEN = Field<18, 1>;    // Wakeup from STOP enable
            using GCEN = Field<19, 1>;    // General call enable
            using SMBHEN = Field<20, 1>;    // SMBus Host address enable
            using SMBDEN = Field<21, 1>;    // SMBus Device Default address enable
            using ALERTEN = Field<22, 1>;    // SMBUS alert enable
            using PECEN = Field<23, 1>;    // PEC enable
        };

        // Control register 2
        struct CR2 : public Register<0x40005804> {
            using PECBYTE = Field<26, 1>;    // Packet error checking byte
            using AUTOEND = Field<25, 1>;    // Automatic end mode (master mode)
            using RELOAD = Field<24, 1>;    // NBYTES reload mode
            using NBYTES = Field<16, 8>;    // Number of bytes
            using NACK = Field<15, 1>;    // NACK generation (slave mode)
            using STOP = Field<14, 1>;    // Stop generation (master mode)
            using START = Field<13, 1>;    // Start generation
            using HEAD10R = Field<12, 1>;    // 10-bit address header only read direction (master receiver mode)
            using ADD10 = Field<11, 1>;    // 10-bit addressing mode (master mode)
            using RD_WRN = Field<10, 1>;    // Transfer direction (master mode)
            using SADD8 = Field<8, 2>;    // Slave address bit 9:8 (master mode)
            using SADD1 = Field<1, 7>;    // Slave address bit 7:1 (master mode)
            using SADD0 = Field<0, 1>;    // Slave address bit 0 (master mode)
        };

        // Own address register 1
        struct OAR1 : public Register<0x40005808> {
            using OA1_0 = Field<0, 1>;    // Interface address
            using OA1_1 = Field<1, 7>;    // Interface address
            using OA1_8 = Field<8, 2>;    // Interface address
            using OA1MODE = Field<10, 1>;    // Own Address 1 10-bit mode
            using OA1EN = Field<15, 1>;    // Own Address 1 enable
        };

        // Own address register 2
        struct OAR2 : public Register<0x4000580c> {
            using OA2 = Field<1, 7>;    // Interface address
            using OA2MSK = Field<8, 3>;    // Own Address 2 masks
            using OA2EN = Field<15, 1>;    // Own Address 2 enable
        };

        // Timing register
        struct TIMINGR : public Register<0x40005810> {
            using SCLL = Field<0, 8>;    // SCL low period (master mode)
            using SCLH = Field<8, 8>;    // SCL high period (master mode)
            using SDADEL = Field<16, 4>;    // Data hold time
            using SCLDEL = Field<20, 4>;    // Data setup time
            using PRESC = Field<28, 4>;    // Timing prescaler
        };

        // Status register 1
        struct TIMEOUTR : public Register<0x40005814> {
            using TIMEOUTA = Field<0, 12>;    // Bus timeout A
            using TIDLE = Field<12, 1>;    // Idle clock timeout detection
            using TIMOUTEN = Field<15, 1>;    // Clock timeout enable
            using TIMEOUTB = Field<16, 12>;    // Bus timeout B
            using TEXTEN = Field<31, 1>;    // Extended clock timeout enable
        };

        // Interrupt and Status register
        struct ISR : public Register<0x40005818> {
            using ADDCODE = Field<17, 7>;    // Address match code (Slave mode)
            using DIR = Field<16, 1>;    // Transfer direction (Slave mode)
            using BUSY = Field<15, 1>;    // Bus busy
            using ALERT = Field<13, 1>;    // SMBus alert
            using TIMEOUT = Field<12, 1>;    // Timeout or t_low detection flag
            using PECERR = Field<11, 1>;    // PEC Error in reception
            using OVR = Field<10, 1>;    // Overrun/Underrun (slave mode)
            using ARLO = Field<9, 1>;    // Arbitration lost
            using BERR = Field<8, 1>;    // Bus error
            using TCR = Field<7, 1>;    // Transfer Complete Reload
            using TC = Field<6, 1>;    // Transfer Complete (master mode)
            using STOPF = Field<5, 1>;    // Stop detection flag
            using NACKF = Field<4, 1>;    // Not acknowledge received flag
            using ADDR = Field<3, 1>;    // Address matched (slave mode)
            using RXNE = Field<2, 1>;    // Receive data register not empty (receivers)
            using TXIS = Field<1, 1>;    // Transmit interrupt status (transmitters)
            using TXE = Field<0, 1>;    // Transmit data register empty (transmitters)
        };

        // Interrupt clear register
        struct ICR : public RegisterWriteOnly<0x4000581c> {
            using ALERTCF = Field<13, 1>;    // Alert flag clear
            using TIMOUTCF = Field<12, 1>;    // Timeout detection flag clear
            using PECCF = Field<11, 1>;    // PEC Error flag clear
            using OVRCF = Field<10, 1>;    // Overrun/Underrun flag clear
            using ARLOCF = Field<9, 1>;    // Arbitration lost flag clear
            using BERRCF = Field<8, 1>;    // Bus error flag clear
            using STOPCF = Field<5, 1>;    // Stop detection flag clear
            using NACKCF = Field<4, 1>;    // Not Acknowledge flag clear
            using ADDRCF = Field<3, 1>;    // Address Matched flag clear
        };

        // PEC register
        struct PECR : public RegisterReadOnly<0x40005820> {
            using PEC = Field<0, 8>;    // Packet error checking register
        };

        // Receive data register
        struct RXDR : public RegisterReadOnly<0x40005824> {
            using RXDATA = Field<0, 8>;    // 8-bit receive data
        };

        // Transmit data register
        struct TXDR : public Register<0x40005828> {
            using TXDATA = Field<0, 8>;    // 8-bit transmit data
        };

    };

    // Independent watchdog
    struct IWDG {
        // Key register
        struct KR : public RegisterWriteOnly<0x40003000> {
            using KEY = Field<0, 16>;    // Key value
        };

        // Prescaler register
        struct PR : public Register<0x40003004> {
            using Field = Field<0, 3>;    // Prescaler divider
        };

        // Reload register
        struct RLR : public Register<0x40003008> {
            using RL = Field<0, 12>;    // Watchdog counter reload value
        };

        // Status register
        struct SR : public RegisterReadOnly<0x4000300c> {
            using PVU = Field<0, 1>;    // Watchdog prescaler value update
            using RVU = Field<1, 1>;    // Watchdog counter reload value update
            using WVU = Field<2, 1>;    // Watchdog counter window value update
        };

        // Window register
        struct WINR : public Register<0x40003010> {
            using WIN = Field<0, 12>;    // Watchdog counter window value
        };

    };

    // Window watchdog
    struct WWDG {
        // Control register
        struct CR : public Register<0x40002c00> {
            using WDGA = Field<7, 1>;    // Activation bit
            using T = Field<0, 7>;    // 7-bit counter
        };

        // Configuration register
        struct CFR : public Register<0x40002c04> {
            using EWI = Field<9, 1>;    // Early wakeup interrupt
            using WDGTB = Field<7, 2>;    // Timer base
            using W = Field<0, 7>;    // 7-bit window value
        };

        // Status register
        struct SR : public Register<0x40002c08> {
            using EWIF = Field<0, 1>;    // Early wakeup interrupt flag
        };

    };

    // Advanced-timers
    struct TIM1 {
        // control register 1
        struct CR1 : public Register<0x40012c00> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40012c04> {
            using OIS4 = Field<14, 1>;    // Output Idle state 4
            using OIS3N = Field<13, 1>;    // Output Idle state 3
            using OIS3 = Field<12, 1>;    // Output Idle state 3
            using OIS2N = Field<11, 1>;    // Output Idle state 2
            using OIS2 = Field<10, 1>;    // Output Idle state 2
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // slave mode control register
        struct SMCR : public Register<0x40012c08> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x40012c0c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using COMDE = Field<13, 1>;    // COM DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40012c10> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40012c14> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40012c18> {
            using OC2CE = Field<15, 1>;    // Output Compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output Compare 2 mode
            using OC2PE = Field<11, 1>;    // Output Compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output Compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output Compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40012c18> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PCS = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PCS = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register (output mode)
        struct CCMR2_Output : public Register<0x40012c1c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x40012c1c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40012c20> {
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3NE = Field<10, 1>;    // Capture/Compare 3 complementary output enable
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2NE = Field<6, 1>;    // Capture/Compare 2 complementary output enable
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40012c24> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40012c28> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x40012c2c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // repetition counter register
        struct RCR : public Register<0x40012c30> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40012c34> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40012c38> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x40012c3c> {
            using Field = Field<0, 16>;    // Capture/Compare 3 value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40012c40> {
            using Field = Field<0, 16>;    // Capture/Compare 3 value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40012c44> {
            using MOE = Field<15, 1>;    // Main output enable
            using AOE = Field<14, 1>;    // Automatic output enable
            using BKP = Field<13, 1>;    // Break polarity
            using BKE = Field<12, 1>;    // Break enable
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using LOCK = Field<8, 2>;    // Lock configuration
            using DTG = Field<0, 8>;    // Dead-time generator setup
        };

        // DMA control register
        struct DCR : public Register<0x40012c48> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x40012c4c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General-purpose-timers
    struct TIM2 {
        // control register 1
        struct CR1 : public Register<0x40000000> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40000004> {
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40000008> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000000c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using COMDE = Field<13, 1>;    // COM DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40000010> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40000014> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40000018> {
            using OC2CE = Field<15, 1>;    // Output compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output compare 2 mode
            using OC2PE = Field<11, 1>;    // Output compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output compare 1 mode
            using OC1PE = Field<3, 1>;    // Output compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40000018> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PSC = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x4000001c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x4000001c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40000020> {
            using CC4NP = Field<15, 1>;    // Capture/Compare 4 output Polarity
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40000024> {
            using CNT_H = Field<16, 16>;    // High counter value (TIM2 only)
            using CNT_L = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40000028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000002c> {
            using ARR_H = Field<16, 16>;    // High Auto-reload value (TIM2 only)
            using ARR_L = Field<0, 16>;    // Low Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40000034> {
            using CCR1_H = Field<16, 16>;    // High Capture/Compare 1 value (TIM2 only)
            using CCR1_L = Field<0, 16>;    // Low Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40000038> {
            using CCR2_H = Field<16, 16>;    // High Capture/Compare 2 value (TIM2 only)
            using CCR2_L = Field<0, 16>;    // Low Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x4000003c> {
            using CCR3_H = Field<16, 16>;    // High Capture/Compare value (TIM2 only)
            using CCR3_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40000040> {
            using CCR4_H = Field<16, 16>;    // High Capture/Compare value (TIM2 only)
            using CCR4_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40000048> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4000004c> {
            using Field = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General-purpose-timers
    struct TIM3 {
        // control register 1
        struct CR1 : public Register<0x40000400> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40000404> {
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40000408> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000040c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using COMDE = Field<13, 1>;    // COM DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40000410> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40000414> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40000418> {
            using OC2CE = Field<15, 1>;    // Output compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output compare 2 mode
            using OC2PE = Field<11, 1>;    // Output compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output compare 1 mode
            using OC1PE = Field<3, 1>;    // Output compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40000418> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PSC = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x4000041c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x4000041c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40000420> {
            using CC4NP = Field<15, 1>;    // Capture/Compare 4 output Polarity
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40000424> {
            using CNT_H = Field<16, 16>;    // High counter value (TIM2 only)
            using CNT_L = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40000428> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000042c> {
            using ARR_H = Field<16, 16>;    // High Auto-reload value (TIM2 only)
            using ARR_L = Field<0, 16>;    // Low Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40000434> {
            using CCR1_H = Field<16, 16>;    // High Capture/Compare 1 value (TIM2 only)
            using CCR1_L = Field<0, 16>;    // Low Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40000438> {
            using CCR2_H = Field<16, 16>;    // High Capture/Compare 2 value (TIM2 only)
            using CCR2_L = Field<0, 16>;    // Low Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x4000043c> {
            using CCR3_H = Field<16, 16>;    // High Capture/Compare value (TIM2 only)
            using CCR3_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40000440> {
            using CCR4_H = Field<16, 16>;    // High Capture/Compare value (TIM2 only)
            using CCR4_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40000448> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4000044c> {
            using Field = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General-purpose-timers
    struct TIM14 {
        // control register 1
        struct CR1 : public Register<0x40002000> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000200c> {
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40002010> {
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40002014> {
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40002018> {
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
            using OC1FE = Field<2, 1>;    // Output compare 1 fast enable
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
        };

        // capture/compare mode register (input mode)
        struct CCMR1_Input : public Register<0x40002018> {
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40002020> {
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40002024> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40002028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000202c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40002034> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // option register
        struct OR : public Register<0x40002050> {
            using RMP = Field<0, 2>;    // Timer input 1 remap
        };

    };

    // Basic-timers
    struct TIM6 {
        // control register 1
        struct CR1 : public Register<0x40001000> {
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40001004> {
            using MMS = Field<4, 3>;    // Master mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000100c> {
            using UDE = Field<8, 1>;    // Update DMA request enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40001010> {
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40001014> {
            using UG = Field<0, 1>;    // Update generation
        };

        // counter
        struct CNT : public Register<0x40001024> {
            using Field = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40001028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000102c> {
            using Field = Field<0, 16>;    // Low Auto-reload value
        };

    };

    // Basic-timers
    struct TIM7 {
        // control register 1
        struct CR1 : public Register<0x40001400> {
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40001404> {
            using MMS = Field<4, 3>;    // Master mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000140c> {
            using UDE = Field<8, 1>;    // Update DMA request enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40001410> {
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40001414> {
            using UG = Field<0, 1>;    // Update generation
        };

        // counter
        struct CNT : public Register<0x40001424> {
            using Field = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40001428> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000142c> {
            using Field = Field<0, 16>;    // Low Auto-reload value
        };

    };

    // External interrupt/event controller
    struct EXTI {
        // Interrupt mask register (EXTI_IMR)
        struct IMR : public Register<0x40010400> {
            using MR0 = Field<0, 1>;    // Interrupt Mask on line 0
            using MR1 = Field<1, 1>;    // Interrupt Mask on line 1
            using MR2 = Field<2, 1>;    // Interrupt Mask on line 2
            using MR3 = Field<3, 1>;    // Interrupt Mask on line 3
            using MR4 = Field<4, 1>;    // Interrupt Mask on line 4
            using MR5 = Field<5, 1>;    // Interrupt Mask on line 5
            using MR6 = Field<6, 1>;    // Interrupt Mask on line 6
            using MR7 = Field<7, 1>;    // Interrupt Mask on line 7
            using MR8 = Field<8, 1>;    // Interrupt Mask on line 8
            using MR9 = Field<9, 1>;    // Interrupt Mask on line 9
            using MR10 = Field<10, 1>;    // Interrupt Mask on line 10
            using MR11 = Field<11, 1>;    // Interrupt Mask on line 11
            using MR12 = Field<12, 1>;    // Interrupt Mask on line 12
            using MR13 = Field<13, 1>;    // Interrupt Mask on line 13
            using MR14 = Field<14, 1>;    // Interrupt Mask on line 14
            using MR15 = Field<15, 1>;    // Interrupt Mask on line 15
            using MR16 = Field<16, 1>;    // Interrupt Mask on line 16
            using MR17 = Field<17, 1>;    // Interrupt Mask on line 17
            using MR18 = Field<18, 1>;    // Interrupt Mask on line 18
            using MR19 = Field<19, 1>;    // Interrupt Mask on line 19
            using MR20 = Field<20, 1>;    // Interrupt Mask on line 20
            using MR21 = Field<21, 1>;    // Interrupt Mask on line 21
            using MR22 = Field<22, 1>;    // Interrupt Mask on line 22
            using MR23 = Field<23, 1>;    // Interrupt Mask on line 23
            using MR24 = Field<24, 1>;    // Interrupt Mask on line 24
            using MR25 = Field<25, 1>;    // Interrupt Mask on line 25
            using MR26 = Field<26, 1>;    // Interrupt Mask on line 26
            using MR27 = Field<27, 1>;    // Interrupt Mask on line 27
        };

        // Event mask register (EXTI_EMR)
        struct EMR : public Register<0x40010404> {
            using MR0 = Field<0, 1>;    // Event Mask on line 0
            using MR1 = Field<1, 1>;    // Event Mask on line 1
            using MR2 = Field<2, 1>;    // Event Mask on line 2
            using MR3 = Field<3, 1>;    // Event Mask on line 3
            using MR4 = Field<4, 1>;    // Event Mask on line 4
            using MR5 = Field<5, 1>;    // Event Mask on line 5
            using MR6 = Field<6, 1>;    // Event Mask on line 6
            using MR7 = Field<7, 1>;    // Event Mask on line 7
            using MR8 = Field<8, 1>;    // Event Mask on line 8
            using MR9 = Field<9, 1>;    // Event Mask on line 9
            using MR10 = Field<10, 1>;    // Event Mask on line 10
            using MR11 = Field<11, 1>;    // Event Mask on line 11
            using MR12 = Field<12, 1>;    // Event Mask on line 12
            using MR13 = Field<13, 1>;    // Event Mask on line 13
            using MR14 = Field<14, 1>;    // Event Mask on line 14
            using MR15 = Field<15, 1>;    // Event Mask on line 15
            using MR16 = Field<16, 1>;    // Event Mask on line 16
            using MR17 = Field<17, 1>;    // Event Mask on line 17
            using MR18 = Field<18, 1>;    // Event Mask on line 18
            using MR19 = Field<19, 1>;    // Event Mask on line 19
            using MR20 = Field<20, 1>;    // Event Mask on line 20
            using MR21 = Field<21, 1>;    // Event Mask on line 21
            using MR22 = Field<22, 1>;    // Event Mask on line 22
            using MR23 = Field<23, 1>;    // Event Mask on line 23
            using MR24 = Field<24, 1>;    // Event Mask on line 24
            using MR25 = Field<25, 1>;    // Event Mask on line 25
            using MR26 = Field<26, 1>;    // Event Mask on line 26
            using MR27 = Field<27, 1>;    // Event Mask on line 27
        };

        // Rising Trigger selection register (EXTI_RTSR)
        struct RTSR : public Register<0x40010408> {
            using TR0 = Field<0, 1>;    // Rising trigger event configuration of line 0
            using TR1 = Field<1, 1>;    // Rising trigger event configuration of line 1
            using TR2 = Field<2, 1>;    // Rising trigger event configuration of line 2
            using TR3 = Field<3, 1>;    // Rising trigger event configuration of line 3
            using TR4 = Field<4, 1>;    // Rising trigger event configuration of line 4
            using TR5 = Field<5, 1>;    // Rising trigger event configuration of line 5
            using TR6 = Field<6, 1>;    // Rising trigger event configuration of line 6
            using TR7 = Field<7, 1>;    // Rising trigger event configuration of line 7
            using TR8 = Field<8, 1>;    // Rising trigger event configuration of line 8
            using TR9 = Field<9, 1>;    // Rising trigger event configuration of line 9
            using TR10 = Field<10, 1>;    // Rising trigger event configuration of line 10
            using TR11 = Field<11, 1>;    // Rising trigger event configuration of line 11
            using TR12 = Field<12, 1>;    // Rising trigger event configuration of line 12
            using TR13 = Field<13, 1>;    // Rising trigger event configuration of line 13
            using TR14 = Field<14, 1>;    // Rising trigger event configuration of line 14
            using TR15 = Field<15, 1>;    // Rising trigger event configuration of line 15
            using TR16 = Field<16, 1>;    // Rising trigger event configuration of line 16
            using TR17 = Field<17, 1>;    // Rising trigger event configuration of line 17
            using TR19 = Field<19, 1>;    // Rising trigger event configuration of line 19
        };

        // Falling Trigger selection register (EXTI_FTSR)
        struct FTSR : public Register<0x4001040c> {
            using TR0 = Field<0, 1>;    // Falling trigger event configuration of line 0
            using TR1 = Field<1, 1>;    // Falling trigger event configuration of line 1
            using TR2 = Field<2, 1>;    // Falling trigger event configuration of line 2
            using TR3 = Field<3, 1>;    // Falling trigger event configuration of line 3
            using TR4 = Field<4, 1>;    // Falling trigger event configuration of line 4
            using TR5 = Field<5, 1>;    // Falling trigger event configuration of line 5
            using TR6 = Field<6, 1>;    // Falling trigger event configuration of line 6
            using TR7 = Field<7, 1>;    // Falling trigger event configuration of line 7
            using TR8 = Field<8, 1>;    // Falling trigger event configuration of line 8
            using TR9 = Field<9, 1>;    // Falling trigger event configuration of line 9
            using TR10 = Field<10, 1>;    // Falling trigger event configuration of line 10
            using TR11 = Field<11, 1>;    // Falling trigger event configuration of line 11
            using TR12 = Field<12, 1>;    // Falling trigger event configuration of line 12
            using TR13 = Field<13, 1>;    // Falling trigger event configuration of line 13
            using TR14 = Field<14, 1>;    // Falling trigger event configuration of line 14
            using TR15 = Field<15, 1>;    // Falling trigger event configuration of line 15
            using TR16 = Field<16, 1>;    // Falling trigger event configuration of line 16
            using TR17 = Field<17, 1>;    // Falling trigger event configuration of line 17
            using TR19 = Field<19, 1>;    // Falling trigger event configuration of line 19
        };

        // Software interrupt event register (EXTI_SWIER)
        struct SWIER : public Register<0x40010410> {
            using SWIER0 = Field<0, 1>;    // Software Interrupt on line 0
            using SWIER1 = Field<1, 1>;    // Software Interrupt on line 1
            using SWIER2 = Field<2, 1>;    // Software Interrupt on line 2
            using SWIER3 = Field<3, 1>;    // Software Interrupt on line 3
            using SWIER4 = Field<4, 1>;    // Software Interrupt on line 4
            using SWIER5 = Field<5, 1>;    // Software Interrupt on line 5
            using SWIER6 = Field<6, 1>;    // Software Interrupt on line 6
            using SWIER7 = Field<7, 1>;    // Software Interrupt on line 7
            using SWIER8 = Field<8, 1>;    // Software Interrupt on line 8
            using SWIER9 = Field<9, 1>;    // Software Interrupt on line 9
            using SWIER10 = Field<10, 1>;    // Software Interrupt on line 10
            using SWIER11 = Field<11, 1>;    // Software Interrupt on line 11
            using SWIER12 = Field<12, 1>;    // Software Interrupt on line 12
            using SWIER13 = Field<13, 1>;    // Software Interrupt on line 13
            using SWIER14 = Field<14, 1>;    // Software Interrupt on line 14
            using SWIER15 = Field<15, 1>;    // Software Interrupt on line 15
            using SWIER16 = Field<16, 1>;    // Software Interrupt on line 16
            using SWIER17 = Field<17, 1>;    // Software Interrupt on line 17
            using SWIER19 = Field<19, 1>;    // Software Interrupt on line 19
        };

        // Pending register (EXTI_PR)
        struct PR : public Register<0x40010414> {
            using PR0 = Field<0, 1>;    // Pending bit 0
            using PR1 = Field<1, 1>;    // Pending bit 1
            using PR2 = Field<2, 1>;    // Pending bit 2
            using PR3 = Field<3, 1>;    // Pending bit 3
            using PR4 = Field<4, 1>;    // Pending bit 4
            using PR5 = Field<5, 1>;    // Pending bit 5
            using PR6 = Field<6, 1>;    // Pending bit 6
            using PR7 = Field<7, 1>;    // Pending bit 7
            using PR8 = Field<8, 1>;    // Pending bit 8
            using PR9 = Field<9, 1>;    // Pending bit 9
            using PR10 = Field<10, 1>;    // Pending bit 10
            using PR11 = Field<11, 1>;    // Pending bit 11
            using PR12 = Field<12, 1>;    // Pending bit 12
            using PR13 = Field<13, 1>;    // Pending bit 13
            using PR14 = Field<14, 1>;    // Pending bit 14
            using PR15 = Field<15, 1>;    // Pending bit 15
            using PR16 = Field<16, 1>;    // Pending bit 16
            using PR17 = Field<17, 1>;    // Pending bit 17
            using PR19 = Field<19, 1>;    // Pending bit 19
        };

    };

    // Nested Vectored Interrupt Controller
    struct NVIC {
        // Interrupt Set Enable Register
        struct ISER : public Register<0xe000e100> {
            using SETENA = Field<0, 32>;    // SETENA
        };

        // Interrupt Clear Enable Register
        struct ICER : public Register<0xe000e180> {
            using CLRENA = Field<0, 32>;    // CLRENA
        };

        // Interrupt Set-Pending Register
        struct ISPR : public Register<0xe000e200> {
            using SETPEND = Field<0, 32>;    // SETPEND
        };

        // Interrupt Clear-Pending Register
        struct ICPR : public Register<0xe000e280> {
            using CLRPEND = Field<0, 32>;    // CLRPEND
        };

        // Interrupt Priority Register 0
        struct IPR0 : public Register<0xe000e400> {
            using PRI_00 = Field<6, 2>;    // PRI_00
            using PRI_01 = Field<14, 2>;    // PRI_01
            using PRI_02 = Field<22, 2>;    // PRI_02
            using PRI_03 = Field<30, 2>;    // PRI_03
        };

        // Interrupt Priority Register 1
        struct IPR1 : public Register<0xe000e404> {
            using PRI_40 = Field<6, 2>;    // PRI_40
            using PRI_41 = Field<14, 2>;    // PRI_41
            using PRI_42 = Field<22, 2>;    // PRI_42
            using PRI_43 = Field<30, 2>;    // PRI_43
        };

        // Interrupt Priority Register 2
        struct IPR2 : public Register<0xe000e408> {
            using PRI_80 = Field<6, 2>;    // PRI_80
            using PRI_81 = Field<14, 2>;    // PRI_81
            using PRI_82 = Field<22, 2>;    // PRI_82
            using PRI_83 = Field<30, 2>;    // PRI_83
        };

        // Interrupt Priority Register 3
        struct IPR3 : public Register<0xe000e40c> {
            using PRI_120 = Field<6, 2>;    // PRI_120
            using PRI_121 = Field<14, 2>;    // PRI_121
            using PRI_122 = Field<22, 2>;    // PRI_122
            using PRI_123 = Field<30, 2>;    // PRI_123
        };

        // Interrupt Priority Register 4
        struct IPR4 : public Register<0xe000e410> {
            using PRI_160 = Field<6, 2>;    // PRI_160
            using PRI_161 = Field<14, 2>;    // PRI_161
            using PRI_162 = Field<22, 2>;    // PRI_162
            using PRI_163 = Field<30, 2>;    // PRI_163
        };

        // Interrupt Priority Register 5
        struct IPR5 : public Register<0xe000e414> {
            using PRI_200 = Field<6, 2>;    // PRI_200
            using PRI_201 = Field<14, 2>;    // PRI_201
            using PRI_202 = Field<22, 2>;    // PRI_202
            using PRI_203 = Field<30, 2>;    // PRI_203
        };

        // Interrupt Priority Register 6
        struct IPR6 : public Register<0xe000e418> {
            using PRI_240 = Field<6, 2>;    // PRI_240
            using PRI_241 = Field<14, 2>;    // PRI_241
            using PRI_242 = Field<22, 2>;    // PRI_242
            using PRI_243 = Field<30, 2>;    // PRI_243
        };

        // Interrupt Priority Register 7
        struct IPR7 : public Register<0xe000e41c> {
            using PRI_280 = Field<6, 2>;    // PRI_280
            using PRI_281 = Field<14, 2>;    // PRI_281
            using PRI_282 = Field<22, 2>;    // PRI_282
            using PRI_283 = Field<30, 2>;    // PRI_283
        };

    };

    // DMA controller
    struct DMA1 {
        // DMA interrupt status register (DMA_ISR)
        struct ISR : public RegisterReadOnly<0x40020000> {
            using GIF1 = Field<0, 1>;    // Channel 1 Global interrupt flag
            using TCIF1 = Field<1, 1>;    // Channel 1 Transfer Complete flag
            using HTIF1 = Field<2, 1>;    // Channel 1 Half Transfer Complete flag
            using TEIF1 = Field<3, 1>;    // Channel 1 Transfer Error flag
            using GIF2 = Field<4, 1>;    // Channel 2 Global interrupt flag
            using TCIF2 = Field<5, 1>;    // Channel 2 Transfer Complete flag
            using HTIF2 = Field<6, 1>;    // Channel 2 Half Transfer Complete flag
            using TEIF2 = Field<7, 1>;    // Channel 2 Transfer Error flag
            using GIF3 = Field<8, 1>;    // Channel 3 Global interrupt flag
            using TCIF3 = Field<9, 1>;    // Channel 3 Transfer Complete flag
            using HTIF3 = Field<10, 1>;    // Channel 3 Half Transfer Complete flag
            using TEIF3 = Field<11, 1>;    // Channel 3 Transfer Error flag
            using GIF4 = Field<12, 1>;    // Channel 4 Global interrupt flag
            using TCIF4 = Field<13, 1>;    // Channel 4 Transfer Complete flag
            using HTIF4 = Field<14, 1>;    // Channel 4 Half Transfer Complete flag
            using TEIF4 = Field<15, 1>;    // Channel 4 Transfer Error flag
            using GIF5 = Field<16, 1>;    // Channel 5 Global interrupt flag
            using TCIF5 = Field<17, 1>;    // Channel 5 Transfer Complete flag
            using HTIF5 = Field<18, 1>;    // Channel 5 Half Transfer Complete flag
            using TEIF5 = Field<19, 1>;    // Channel 5 Transfer Error flag
            using GIF6 = Field<20, 1>;    // Channel 6 Global interrupt flag
            using TCIF6 = Field<21, 1>;    // Channel 6 Transfer Complete flag
            using HTIF6 = Field<22, 1>;    // Channel 6 Half Transfer Complete flag
            using TEIF6 = Field<23, 1>;    // Channel 6 Transfer Error flag
            using GIF7 = Field<24, 1>;    // Channel 7 Global interrupt flag
            using TCIF7 = Field<25, 1>;    // Channel 7 Transfer Complete flag
            using HTIF7 = Field<26, 1>;    // Channel 7 Half Transfer Complete flag
            using TEIF7 = Field<27, 1>;    // Channel 7 Transfer Error flag
        };

        // DMA interrupt flag clear register (DMA_IFCR)
        struct IFCR : public RegisterWriteOnly<0x40020004> {
            using CGIF1 = Field<0, 1>;    // Channel 1 Global interrupt clear
            using CTCIF1 = Field<1, 1>;    // Channel 1 Transfer Complete clear
            using CHTIF1 = Field<2, 1>;    // Channel 1 Half Transfer clear
            using CTEIF1 = Field<3, 1>;    // Channel 1 Transfer Error clear
            using CGIF2 = Field<4, 1>;    // Channel 2 Global interrupt clear
            using CTCIF2 = Field<5, 1>;    // Channel 2 Transfer Complete clear
            using CHTIF2 = Field<6, 1>;    // Channel 2 Half Transfer clear
            using CTEIF2 = Field<7, 1>;    // Channel 2 Transfer Error clear
            using CGIF3 = Field<8, 1>;    // Channel 3 Global interrupt clear
            using CTCIF3 = Field<9, 1>;    // Channel 3 Transfer Complete clear
            using CHTIF3 = Field<10, 1>;    // Channel 3 Half Transfer clear
            using CTEIF3 = Field<11, 1>;    // Channel 3 Transfer Error clear
            using CGIF4 = Field<12, 1>;    // Channel 4 Global interrupt clear
            using CTCIF4 = Field<13, 1>;    // Channel 4 Transfer Complete clear
            using CHTIF4 = Field<14, 1>;    // Channel 4 Half Transfer clear
            using CTEIF4 = Field<15, 1>;    // Channel 4 Transfer Error clear
            using CGIF5 = Field<16, 1>;    // Channel 5 Global interrupt clear
            using CTCIF5 = Field<17, 1>;    // Channel 5 Transfer Complete clear
            using CHTIF5 = Field<18, 1>;    // Channel 5 Half Transfer clear
            using CTEIF5 = Field<19, 1>;    // Channel 5 Transfer Error clear
            using CGIF6 = Field<20, 1>;    // Channel 6 Global interrupt clear
            using CTCIF6 = Field<21, 1>;    // Channel 6 Transfer Complete clear
            using CHTIF6 = Field<22, 1>;    // Channel 6 Half Transfer clear
            using CTEIF6 = Field<23, 1>;    // Channel 6 Transfer Error clear
            using CGIF7 = Field<24, 1>;    // Channel 7 Global interrupt clear
            using CTCIF7 = Field<25, 1>;    // Channel 7 Transfer Complete clear
            using CHTIF7 = Field<26, 1>;    // Channel 7 Half Transfer clear
            using CTEIF7 = Field<27, 1>;    // Channel 7 Transfer Error clear
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR1 : public Register<0x40020008> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 1 number of data register
        struct CNDTR1 : public Register<0x4002000c> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 1 peripheral address register
        struct CPAR1 : public Register<0x40020010> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 1 memory address register
        struct CMAR1 : public Register<0x40020014> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR2 : public Register<0x4002001c> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 2 number of data register
        struct CNDTR2 : public Register<0x40020020> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 2 peripheral address register
        struct CPAR2 : public Register<0x40020024> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 2 memory address register
        struct CMAR2 : public Register<0x40020028> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR3 : public Register<0x40020030> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 3 number of data register
        struct CNDTR3 : public Register<0x40020034> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 3 peripheral address register
        struct CPAR3 : public Register<0x40020038> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 3 memory address register
        struct CMAR3 : public Register<0x4002003c> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR4 : public Register<0x40020044> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 4 number of data register
        struct CNDTR4 : public Register<0x40020048> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 4 peripheral address register
        struct CPAR4 : public Register<0x4002004c> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 4 memory address register
        struct CMAR4 : public Register<0x40020050> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR5 : public Register<0x40020058> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 5 number of data register
        struct CNDTR5 : public Register<0x4002005c> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 5 peripheral address register
        struct CPAR5 : public Register<0x40020060> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 5 memory address register
        struct CMAR5 : public Register<0x40020064> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR6 : public Register<0x4002006c> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 6 number of data register
        struct CNDTR6 : public Register<0x40020070> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 6 peripheral address register
        struct CPAR6 : public Register<0x40020074> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 6 memory address register
        struct CMAR6 : public Register<0x40020078> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR7 : public Register<0x40020080> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 7 number of data register
        struct CNDTR7 : public Register<0x40020084> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 7 peripheral address register
        struct CPAR7 : public Register<0x40020088> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 7 memory address register
        struct CMAR7 : public Register<0x4002008c> {
            using MA = Field<0, 32>;    // Memory address
        };

    };

    // DMA controller
    struct DMA2 {
        // DMA interrupt status register (DMA_ISR)
        struct ISR : public RegisterReadOnly<0x40020400> {
            using GIF1 = Field<0, 1>;    // Channel 1 Global interrupt flag
            using TCIF1 = Field<1, 1>;    // Channel 1 Transfer Complete flag
            using HTIF1 = Field<2, 1>;    // Channel 1 Half Transfer Complete flag
            using TEIF1 = Field<3, 1>;    // Channel 1 Transfer Error flag
            using GIF2 = Field<4, 1>;    // Channel 2 Global interrupt flag
            using TCIF2 = Field<5, 1>;    // Channel 2 Transfer Complete flag
            using HTIF2 = Field<6, 1>;    // Channel 2 Half Transfer Complete flag
            using TEIF2 = Field<7, 1>;    // Channel 2 Transfer Error flag
            using GIF3 = Field<8, 1>;    // Channel 3 Global interrupt flag
            using TCIF3 = Field<9, 1>;    // Channel 3 Transfer Complete flag
            using HTIF3 = Field<10, 1>;    // Channel 3 Half Transfer Complete flag
            using TEIF3 = Field<11, 1>;    // Channel 3 Transfer Error flag
            using GIF4 = Field<12, 1>;    // Channel 4 Global interrupt flag
            using TCIF4 = Field<13, 1>;    // Channel 4 Transfer Complete flag
            using HTIF4 = Field<14, 1>;    // Channel 4 Half Transfer Complete flag
            using TEIF4 = Field<15, 1>;    // Channel 4 Transfer Error flag
            using GIF5 = Field<16, 1>;    // Channel 5 Global interrupt flag
            using TCIF5 = Field<17, 1>;    // Channel 5 Transfer Complete flag
            using HTIF5 = Field<18, 1>;    // Channel 5 Half Transfer Complete flag
            using TEIF5 = Field<19, 1>;    // Channel 5 Transfer Error flag
            using GIF6 = Field<20, 1>;    // Channel 6 Global interrupt flag
            using TCIF6 = Field<21, 1>;    // Channel 6 Transfer Complete flag
            using HTIF6 = Field<22, 1>;    // Channel 6 Half Transfer Complete flag
            using TEIF6 = Field<23, 1>;    // Channel 6 Transfer Error flag
            using GIF7 = Field<24, 1>;    // Channel 7 Global interrupt flag
            using TCIF7 = Field<25, 1>;    // Channel 7 Transfer Complete flag
            using HTIF7 = Field<26, 1>;    // Channel 7 Half Transfer Complete flag
            using TEIF7 = Field<27, 1>;    // Channel 7 Transfer Error flag
        };

        // DMA interrupt flag clear register (DMA_IFCR)
        struct IFCR : public RegisterWriteOnly<0x40020404> {
            using CGIF1 = Field<0, 1>;    // Channel 1 Global interrupt clear
            using CTCIF1 = Field<1, 1>;    // Channel 1 Transfer Complete clear
            using CHTIF1 = Field<2, 1>;    // Channel 1 Half Transfer clear
            using CTEIF1 = Field<3, 1>;    // Channel 1 Transfer Error clear
            using CGIF2 = Field<4, 1>;    // Channel 2 Global interrupt clear
            using CTCIF2 = Field<5, 1>;    // Channel 2 Transfer Complete clear
            using CHTIF2 = Field<6, 1>;    // Channel 2 Half Transfer clear
            using CTEIF2 = Field<7, 1>;    // Channel 2 Transfer Error clear
            using CGIF3 = Field<8, 1>;    // Channel 3 Global interrupt clear
            using CTCIF3 = Field<9, 1>;    // Channel 3 Transfer Complete clear
            using CHTIF3 = Field<10, 1>;    // Channel 3 Half Transfer clear
            using CTEIF3 = Field<11, 1>;    // Channel 3 Transfer Error clear
            using CGIF4 = Field<12, 1>;    // Channel 4 Global interrupt clear
            using CTCIF4 = Field<13, 1>;    // Channel 4 Transfer Complete clear
            using CHTIF4 = Field<14, 1>;    // Channel 4 Half Transfer clear
            using CTEIF4 = Field<15, 1>;    // Channel 4 Transfer Error clear
            using CGIF5 = Field<16, 1>;    // Channel 5 Global interrupt clear
            using CTCIF5 = Field<17, 1>;    // Channel 5 Transfer Complete clear
            using CHTIF5 = Field<18, 1>;    // Channel 5 Half Transfer clear
            using CTEIF5 = Field<19, 1>;    // Channel 5 Transfer Error clear
            using CGIF6 = Field<20, 1>;    // Channel 6 Global interrupt clear
            using CTCIF6 = Field<21, 1>;    // Channel 6 Transfer Complete clear
            using CHTIF6 = Field<22, 1>;    // Channel 6 Half Transfer clear
            using CTEIF6 = Field<23, 1>;    // Channel 6 Transfer Error clear
            using CGIF7 = Field<24, 1>;    // Channel 7 Global interrupt clear
            using CTCIF7 = Field<25, 1>;    // Channel 7 Transfer Complete clear
            using CHTIF7 = Field<26, 1>;    // Channel 7 Half Transfer clear
            using CTEIF7 = Field<27, 1>;    // Channel 7 Transfer Error clear
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR1 : public Register<0x40020408> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 1 number of data register
        struct CNDTR1 : public Register<0x4002040c> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 1 peripheral address register
        struct CPAR1 : public Register<0x40020410> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 1 memory address register
        struct CMAR1 : public Register<0x40020414> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR2 : public Register<0x4002041c> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 2 number of data register
        struct CNDTR2 : public Register<0x40020420> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 2 peripheral address register
        struct CPAR2 : public Register<0x40020424> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 2 memory address register
        struct CMAR2 : public Register<0x40020428> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR3 : public Register<0x40020430> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 3 number of data register
        struct CNDTR3 : public Register<0x40020434> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 3 peripheral address register
        struct CPAR3 : public Register<0x40020438> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 3 memory address register
        struct CMAR3 : public Register<0x4002043c> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR4 : public Register<0x40020444> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 4 number of data register
        struct CNDTR4 : public Register<0x40020448> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 4 peripheral address register
        struct CPAR4 : public Register<0x4002044c> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 4 memory address register
        struct CMAR4 : public Register<0x40020450> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR5 : public Register<0x40020458> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 5 number of data register
        struct CNDTR5 : public Register<0x4002045c> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 5 peripheral address register
        struct CPAR5 : public Register<0x40020460> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 5 memory address register
        struct CMAR5 : public Register<0x40020464> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR6 : public Register<0x4002046c> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 6 number of data register
        struct CNDTR6 : public Register<0x40020470> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 6 peripheral address register
        struct CPAR6 : public Register<0x40020474> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 6 memory address register
        struct CMAR6 : public Register<0x40020478> {
            using MA = Field<0, 32>;    // Memory address
        };

        // DMA channel configuration register (DMA_CCR)
        struct CCR7 : public Register<0x40020480> {
            using EN = Field<0, 1>;    // Channel enable
            using TCIE = Field<1, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<2, 1>;    // Half Transfer interrupt enable
            using TEIE = Field<3, 1>;    // Transfer error interrupt enable
            using DIR = Field<4, 1>;    // Data transfer direction
            using CIRC = Field<5, 1>;    // Circular mode
            using PINC = Field<6, 1>;    // Peripheral increment mode
            using MINC = Field<7, 1>;    // Memory increment mode
            using PSIZE = Field<8, 2>;    // Peripheral size
            using MSIZE = Field<10, 2>;    // Memory size
            using PL = Field<12, 2>;    // Channel Priority level
            using MEM2MEM = Field<14, 1>;    // Memory to memory mode
        };

        // DMA channel 7 number of data register
        struct CNDTR7 : public Register<0x40020484> {
            using NDT = Field<0, 16>;    // Number of data to transfer
        };

        // DMA channel 7 peripheral address register
        struct CPAR7 : public Register<0x40020488> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // DMA channel 7 memory address register
        struct CMAR7 : public Register<0x4002048c> {
            using MA = Field<0, 32>;    // Memory address
        };

    };

    // Reset and clock control
    struct RCC {
        // Clock control register
        struct CR : public Register<0x40021000> {
            using HSION = Field<0, 1>;    // Internal High Speed clock enable
            using HSIRDY = Field<1, 1>;    // Internal High Speed clock ready flag
            using HSITRIM = Field<3, 5>;    // Internal High Speed clock trimming
            using HSICAL = Field<8, 8>;    // Internal High Speed clock Calibration
            using HSEON = Field<16, 1>;    // External High Speed clock enable
            using HSERDY = Field<17, 1>;    // External High Speed clock ready flag
            using HSEBYP = Field<18, 1>;    // External High Speed clock Bypass
            using CSSON = Field<19, 1>;    // Clock Security System enable
            using PLLON = Field<24, 1>;    // PLL enable
            using PLLRDY = Field<25, 1>;    // PLL clock ready flag
        };

        // Clock configuration register (RCC_CFGR)
        struct CFGR : public Register<0x40021004> {
            using SW = Field<0, 2>;    // System clock Switch
            using SWS = Field<2, 2>;    // System Clock Switch Status
            using HPRE = Field<4, 4>;    // AHB prescaler
            using PPRE = Field<8, 3>;    // APB Low speed prescaler (APB1)
            using ADCPRE = Field<14, 1>;    // ADC prescaler
            using PLLSRC = Field<15, 2>;    // PLL input clock source
            using PLLXTPRE = Field<17, 1>;    // HSE divider for PLL entry
            using PLLMUL = Field<18, 4>;    // PLL Multiplication Factor
            using MCO = Field<24, 3>;    // Microcontroller clock output
            using MCOPRE = Field<28, 3>;    // Microcontroller Clock Output Prescaler
            using PLLNODIV = Field<31, 1>;    // PLL clock not divided for MCO
        };

        // Clock interrupt register (RCC_CIR)
        struct CIR : public Register<0x40021008> {
            using LSIRDYF = Field<0, 1>;    // LSI Ready Interrupt flag
            using LSERDYF = Field<1, 1>;    // LSE Ready Interrupt flag
            using HSIRDYF = Field<2, 1>;    // HSI Ready Interrupt flag
            using HSERDYF = Field<3, 1>;    // HSE Ready Interrupt flag
            using PLLRDYF = Field<4, 1>;    // PLL Ready Interrupt flag
            using HSI14RDYF = Field<5, 1>;    // HSI14 ready interrupt flag
            using HSI48RDYF = Field<6, 1>;    // HSI48 ready interrupt flag
            using CSSF = Field<7, 1>;    // Clock Security System Interrupt flag
            using LSIRDYIE = Field<8, 1>;    // LSI Ready Interrupt Enable
            using LSERDYIE = Field<9, 1>;    // LSE Ready Interrupt Enable
            using HSIRDYIE = Field<10, 1>;    // HSI Ready Interrupt Enable
            using HSERDYIE = Field<11, 1>;    // HSE Ready Interrupt Enable
            using PLLRDYIE = Field<12, 1>;    // PLL Ready Interrupt Enable
            using HSI14RDYE = Field<13, 1>;    // HSI14 ready interrupt enable
            using HSI48RDYIE = Field<14, 1>;    // HSI48 ready interrupt enable
            using LSIRDYC = Field<16, 1>;    // LSI Ready Interrupt Clear
            using LSERDYC = Field<17, 1>;    // LSE Ready Interrupt Clear
            using HSIRDYC = Field<18, 1>;    // HSI Ready Interrupt Clear
            using HSERDYC = Field<19, 1>;    // HSE Ready Interrupt Clear
            using PLLRDYC = Field<20, 1>;    // PLL Ready Interrupt Clear
            using HSI14RDYC = Field<21, 1>;    // HSI 14 MHz Ready Interrupt Clear
            using HSI48RDYC = Field<22, 1>;    // HSI48 Ready Interrupt Clear
            using CSSC = Field<23, 1>;    // Clock security system interrupt clear
        };

        // APB2 peripheral reset register (RCC_APB2RSTR)
        struct APB2RSTR : public Register<0x4002100c> {
            using SYSCFGRST = Field<0, 1>;    // SYSCFG and COMP reset
            using ADCRST = Field<9, 1>;    // ADC interface reset
            using TIM1RST = Field<11, 1>;    // TIM1 timer reset
            using SPI1RST = Field<12, 1>;    // SPI 1 reset
            using USART1RST = Field<14, 1>;    // USART1 reset
            using TIM15RST = Field<16, 1>;    // TIM15 timer reset
            using TIM16RST = Field<17, 1>;    // TIM16 timer reset
            using TIM17RST = Field<18, 1>;    // TIM17 timer reset
            using DBGMCURST = Field<22, 1>;    // Debug MCU reset
        };

        // APB1 peripheral reset register (RCC_APB1RSTR)
        struct APB1RSTR : public Register<0x40021010> {
            using TIM2RST = Field<0, 1>;    // Timer 2 reset
            using TIM3RST = Field<1, 1>;    // Timer 3 reset
            using TIM6RST = Field<4, 1>;    // Timer 6 reset
            using TIM7RST = Field<5, 1>;    // TIM7 timer reset
            using TIM14RST = Field<8, 1>;    // Timer 14 reset
            using WWDGRST = Field<11, 1>;    // Window watchdog reset
            using SPI2RST = Field<14, 1>;    // SPI2 reset
            using USART2RST = Field<17, 1>;    // USART 2 reset
            using USART3RST = Field<18, 1>;    // USART3 reset
            using USART4RST = Field<19, 1>;    // USART4 reset
            using USART5RST = Field<20, 1>;    // USART5 reset
            using I2C1RST = Field<21, 1>;    // I2C1 reset
            using I2C2RST = Field<22, 1>;    // I2C2 reset
            using USBRST = Field<23, 1>;    // USB interface reset
            using CANRST = Field<25, 1>;    // CAN interface reset
            using CRSRST = Field<27, 1>;    // Clock Recovery System interface reset
            using PWRRST = Field<28, 1>;    // Power interface reset
            using DACRST = Field<29, 1>;    // DAC interface reset
            using CECRST = Field<30, 1>;    // HDMI CEC reset
        };

        // AHB Peripheral Clock enable register (RCC_AHBENR)
        struct AHBENR : public Register<0x40021014> {
            using DMA1EN = Field<0, 1>;    // DMA1 clock enable
            using DMA2EN = Field<1, 1>;    // DMA2 clock enable
            using SRAMEN = Field<2, 1>;    // SRAM interface clock enable
            using FLITFEN = Field<4, 1>;    // FLITF clock enable
            using CRCEN = Field<6, 1>;    // CRC clock enable
            using IOPAEN = Field<17, 1>;    // I/O port A clock enable
            using IOPBEN = Field<18, 1>;    // I/O port B clock enable
            using IOPCEN = Field<19, 1>;    // I/O port C clock enable
            using IOPDEN = Field<20, 1>;    // I/O port D clock enable
            using IOPFEN = Field<22, 1>;    // I/O port F clock enable
            using TSCEN = Field<24, 1>;    // Touch sensing controller clock enable
        };

        // APB2 peripheral clock enable register (RCC_APB2ENR)
        struct APB2ENR : public Register<0x40021018> {
            using SYSCFGEN = Field<0, 1>;    // SYSCFG clock enable
            using ADCEN = Field<9, 1>;    // ADC 1 interface clock enable
            using TIM1EN = Field<11, 1>;    // TIM1 Timer clock enable
            using SPI1EN = Field<12, 1>;    // SPI 1 clock enable
            using USART1EN = Field<14, 1>;    // USART1 clock enable
            using TIM15EN = Field<16, 1>;    // TIM15 timer clock enable
            using TIM16EN = Field<17, 1>;    // TIM16 timer clock enable
            using TIM17EN = Field<18, 1>;    // TIM17 timer clock enable
            using DBGMCUEN = Field<22, 1>;    // MCU debug module clock enable
            using USART8EN = Field<7, 1>;    // USART8 clock enable
            using USART7EN = Field<6, 1>;    // USART7 clock enable
            using USART6EN = Field<5, 1>;    // USART6 clock enable
        };

        // APB1 peripheral clock enable register (RCC_APB1ENR)
        struct APB1ENR : public Register<0x4002101c> {
            using TIM2EN = Field<0, 1>;    // Timer 2 clock enable
            using TIM3EN = Field<1, 1>;    // Timer 3 clock enable
            using TIM6EN = Field<4, 1>;    // Timer 6 clock enable
            using TIM7EN = Field<5, 1>;    // TIM7 timer clock enable
            using TIM14EN = Field<8, 1>;    // Timer 14 clock enable
            using WWDGEN = Field<11, 1>;    // Window watchdog clock enable
            using SPI2EN = Field<14, 1>;    // SPI 2 clock enable
            using USART2EN = Field<17, 1>;    // USART 2 clock enable
            using USART3EN = Field<18, 1>;    // USART3 clock enable
            using USART4EN = Field<19, 1>;    // USART4 clock enable
            using USART5EN = Field<20, 1>;    // USART5 clock enable
            using I2C1EN = Field<21, 1>;    // I2C 1 clock enable
            using I2C2EN = Field<22, 1>;    // I2C 2 clock enable
            using USBRST = Field<23, 1>;    // USB interface clock enable
            using CANEN = Field<25, 1>;    // CAN interface clock enable
            using CRSEN = Field<27, 1>;    // Clock Recovery System interface clock enable
            using PWREN = Field<28, 1>;    // Power interface clock enable
            using DACEN = Field<29, 1>;    // DAC interface clock enable
            using CECEN = Field<30, 1>;    // HDMI CEC interface clock enable
        };

        // Backup domain control register (RCC_BDCR)
        struct BDCR : public Register<0x40021020> {
            using LSEON = Field<0, 1>;    // External Low Speed oscillator enable
            using LSERDY = Field<1, 1>;    // External Low Speed oscillator ready
            using LSEBYP = Field<2, 1>;    // External Low Speed oscillator bypass
            using LSEDRV = Field<3, 2>;    // LSE oscillator drive capability
            using RTCSEL = Field<8, 2>;    // RTC clock source selection
            using RTCEN = Field<15, 1>;    // RTC clock enable
            using BDRST = Field<16, 1>;    // Backup domain software reset
        };

        // Control/status register (RCC_CSR)
        struct CSR : public Register<0x40021024> {
            using LSION = Field<0, 1>;    // Internal low speed oscillator enable
            using LSIRDY = Field<1, 1>;    // Internal low speed oscillator ready
            using RMVF = Field<24, 1>;    // Remove reset flag
            using OBLRSTF = Field<25, 1>;    // Option byte loader reset flag
            using PINRSTF = Field<26, 1>;    // PIN reset flag
            using PORRSTF = Field<27, 1>;    // POR/PDR reset flag
            using SFTRSTF = Field<28, 1>;    // Software reset flag
            using IWDGRSTF = Field<29, 1>;    // Independent watchdog reset flag
            using WWDGRSTF = Field<30, 1>;    // Window watchdog reset flag
            using LPWRRSTF = Field<31, 1>;    // Low-power reset flag
        };

        // AHB peripheral reset register
        struct AHBRSTR : public Register<0x40021028> {
            using IOPARST = Field<17, 1>;    // I/O port A reset
            using IOPBRST = Field<18, 1>;    // I/O port B reset
            using IOPCRST = Field<19, 1>;    // I/O port C reset
            using IOPDRST = Field<20, 1>;    // I/O port D reset
            using IOPFRST = Field<22, 1>;    // I/O port F reset
            using TSCRST = Field<24, 1>;    // Touch sensing controller reset
        };

        // Clock configuration register 2
        struct CFGR2 : public Register<0x4002102c> {
            using PREDIV = Field<0, 4>;    // PREDIV division factor
        };

        // Clock configuration register 3
        struct CFGR3 : public Register<0x40021030> {
            using USART1SW = Field<0, 2>;    // USART1 clock source selection
            using I2C1SW = Field<4, 1>;    // I2C1 clock source selection
            using CECSW = Field<6, 1>;    // HDMI CEC clock source selection
            using USBSW = Field<7, 1>;    // USB clock source selection
            using ADCSW = Field<8, 1>;    // ADC clock source selection
            using USART2SW = Field<16, 2>;    // USART2 clock source selection
        };

        // Clock control register 2
        struct CR2 : public Register<0x40021034> {
            using HSI14ON = Field<0, 1>;    // HSI14 clock enable
            using HSI14RDY = Field<1, 1>;    // HR14 clock ready flag
            using HSI14DIS = Field<2, 1>;    // HSI14 clock request from ADC disable
            using HSI14TRIM = Field<3, 5>;    // HSI14 clock trimming
            using HSI14CAL = Field<8, 8>;    // HSI14 clock calibration
            using HSI48ON = Field<16, 1>;    // HSI48 clock enable
            using HSI48RDY = Field<17, 1>;    // HSI48 clock ready flag
            using HSI48CAL = Field<24, 1>;    // HSI48 factory clock calibration
        };

    };

    // System configuration controller
    struct SYSCFG_COMP {
        // configuration register 1
        struct SYSCFG_CFGR1 : public Register<0x40010000> {
            using MEM_MODE = Field<0, 2>;    // Memory mapping selection bits
            using ADC_DMA_RMP = Field<8, 1>;    // ADC DMA remapping bit
            using USART1_TX_DMA_RMP = Field<9, 1>;    // USART1_TX DMA remapping bit
            using USART1_RX_DMA_RMP = Field<10, 1>;    // USART1_RX DMA request remapping bit
            using TIM16_DMA_RMP = Field<11, 1>;    // TIM16 DMA request remapping bit
            using TIM17_DMA_RMP = Field<12, 1>;    // TIM17 DMA request remapping bit
            using I2C_PB6_FM = Field<16, 1>;    // Fast Mode Plus (FM plus) driving capability activation bits.
            using I2C_PB7_FM = Field<17, 1>;    // Fast Mode Plus (FM+) driving capability activation bits.
            using I2C_PB8_FM = Field<18, 1>;    // Fast Mode Plus (FM+) driving capability activation bits.
            using I2C_PB9_FM = Field<19, 1>;    // Fast Mode Plus (FM+) driving capability activation bits.
            using I2C1_FM_plus = Field<20, 1>;    // FM+ driving capability activation for I2C1
            using I2C2_FM_plus = Field<21, 1>;    // FM+ driving capability activation for I2C2
            using SPI2_DMA_RMP = Field<24, 1>;    // SPI2 DMA request remapping bit
            using USART2_DMA_RMP = Field<25, 1>;    // USART2 DMA request remapping bit
            using USART3_DMA_RMP = Field<26, 1>;    // USART3 DMA request remapping bit
            using I2C1_DMA_RMP = Field<27, 1>;    // I2C1 DMA request remapping bit
            using TIM1_DMA_RMP = Field<28, 1>;    // TIM1 DMA request remapping bit
            using TIM2_DMA_RMP = Field<29, 1>;    // TIM2 DMA request remapping bit
            using TIM3_DMA_RMP = Field<30, 1>;    // TIM3 DMA request remapping bit
        };

        // external interrupt configuration register 1
        struct SYSCFG_EXTICR1 : public Register<0x40010008> {
            using EXTI3 = Field<12, 4>;    // EXTI 3 configuration bits
            using EXTI2 = Field<8, 4>;    // EXTI 2 configuration bits
            using EXTI1 = Field<4, 4>;    // EXTI 1 configuration bits
            using EXTI0 = Field<0, 4>;    // EXTI 0 configuration bits
        };

        // external interrupt configuration register 2
        struct SYSCFG_EXTICR2 : public Register<0x4001000c> {
            using EXTI7 = Field<12, 4>;    // EXTI 7 configuration bits
            using EXTI6 = Field<8, 4>;    // EXTI 6 configuration bits
            using EXTI5 = Field<4, 4>;    // EXTI 5 configuration bits
            using EXTI4 = Field<0, 4>;    // EXTI 4 configuration bits
        };

        // external interrupt configuration register 3
        struct SYSCFG_EXTICR3 : public Register<0x40010010> {
            using EXTI11 = Field<12, 4>;    // EXTI 11 configuration bits
            using EXTI10 = Field<8, 4>;    // EXTI 10 configuration bits
            using EXTI9 = Field<4, 4>;    // EXTI 9 configuration bits
            using EXTI8 = Field<0, 4>;    // EXTI 8 configuration bits
        };

        // external interrupt configuration register 4
        struct SYSCFG_EXTICR4 : public Register<0x40010014> {
            using EXTI15 = Field<12, 4>;    // EXTI 15 configuration bits
            using EXTI14 = Field<8, 4>;    // EXTI 14 configuration bits
            using EXTI13 = Field<4, 4>;    // EXTI 13 configuration bits
            using EXTI12 = Field<0, 4>;    // EXTI 12 configuration bits
        };

        // configuration register 2
        struct SYSCFG_CFGR2 : public Register<0x40010018> {
            using SRAM_PEF = Field<8, 1>;    // SRAM parity flag
            using PVD_LOCK = Field<2, 1>;    // PVD lock enable bit
            using SRAM_PARITY_LOCK = Field<1, 1>;    // SRAM parity lock bit
            using LOCUP_LOCK = Field<0, 1>;    // Cortex-M0 LOCKUP bit enable bit
        };

        // control and status register
        struct COMP_CSR : public Register<0x4001001c> {
            using COMP1EN = Field<0, 1>;    // Comparator 1 enable
            using COMP1_INP_DAC = Field<1, 1>;    // COMP1_INP_DAC
            using COMP1MODE = Field<2, 2>;    // Comparator 1 mode
            using COMP1INSEL = Field<4, 3>;    // Comparator 1 inverting input selection
            using COMP1OUTSEL = Field<8, 3>;    // Comparator 1 output selection
            using COMP1POL = Field<11, 1>;    // Comparator 1 output polarity
            using COMP1HYST = Field<12, 2>;    // Comparator 1 hysteresis
            using COMP1OUT = Field<14, 1>;    // Comparator 1 output
            using COMP1LOCK = Field<15, 1>;    // Comparator 1 lock
            using COMP2EN = Field<16, 1>;    // Comparator 2 enable
            using COMP2MODE = Field<18, 2>;    // Comparator 2 mode
            using COMP2INSEL = Field<20, 3>;    // Comparator 2 inverting input selection
            using WNDWEN = Field<23, 1>;    // Window mode enable
            using COMP2OUTSEL = Field<24, 3>;    // Comparator 2 output selection
            using COMP2POL = Field<27, 1>;    // Comparator 2 output polarity
            using COMP2HYST = Field<28, 2>;    // Comparator 2 hysteresis
            using COMP2OUT = Field<30, 1>;    // Comparator 2 output
            using COMP2LOCK = Field<31, 1>;    // Comparator 2 lock
        };

    };

    // Analog-to-digital converter
    struct ADC {
        // interrupt and status register
        struct ISR : public Register<0x40012400> {
            using AWD = Field<7, 1>;    // Analog watchdog flag
            using OVR = Field<4, 1>;    // ADC overrun
            using EOS = Field<3, 1>;    // End of sequence flag
            using EOC = Field<2, 1>;    // End of conversion flag
            using EOSMP = Field<1, 1>;    // End of sampling flag
            using ADRDY = Field<0, 1>;    // ADC ready
        };

        // interrupt enable register
        struct IER : public Register<0x40012404> {
            using AWDIE = Field<7, 1>;    // Analog watchdog interrupt enable
            using OVRIE = Field<4, 1>;    // Overrun interrupt enable
            using EOSIE = Field<3, 1>;    // End of conversion sequence interrupt enable
            using EOCIE = Field<2, 1>;    // End of conversion interrupt enable
            using EOSMPIE = Field<1, 1>;    // End of sampling flag interrupt enable
            using ADRDYIE = Field<0, 1>;    // ADC ready interrupt enable
        };

        // control register
        struct CR : public Register<0x40012408> {
            using ADCAL = Field<31, 1>;    // ADC calibration
            using ADSTP = Field<4, 1>;    // ADC stop conversion command
            using ADSTART = Field<2, 1>;    // ADC start conversion command
            using ADDIS = Field<1, 1>;    // ADC disable command
            using ADEN = Field<0, 1>;    // ADC enable command
        };

        // configuration register 1
        struct CFGR1 : public Register<0x4001240c> {
            using AWDCH = Field<26, 5>;    // Analog watchdog channel selection
            using AWDEN = Field<23, 1>;    // Analog watchdog enable
            using AWDSGL = Field<22, 1>;    // Enable the watchdog on a single channel or on all channels
            using DISCEN = Field<16, 1>;    // Discontinuous mode
            using AUTOFF = Field<15, 1>;    // Auto-off mode
            using AUTDLY = Field<14, 1>;    // Auto-delayed conversion mode
            using CONT = Field<13, 1>;    // Single / continuous conversion mode
            using OVRMOD = Field<12, 1>;    // Overrun management mode
            using EXTEN = Field<10, 2>;    // External trigger enable and polarity selection
            using EXTSEL = Field<6, 3>;    // External trigger selection
            using ALIGN = Field<5, 1>;    // Data alignment
            using RES = Field<3, 2>;    // Data resolution
            using SCANDIR = Field<2, 1>;    // Scan sequence direction
            using DMACFG = Field<1, 1>;    // Direct memery access configuration
            using DMAEN = Field<0, 1>;    // Direct memory access enable
        };

        // configuration register 2
        struct CFGR2 : public Register<0x40012410> {
            using JITOFF_D4 = Field<31, 1>;    // JITOFF_D4
            using JITOFF_D2 = Field<30, 1>;    // JITOFF_D2
        };

        // sampling time register
        struct SMPR : public Register<0x40012414> {
            using Field = Field<0, 3>;    // Sampling time selection
        };

        // watchdog threshold register
        struct TR : public Register<0x40012420> {
            using HT = Field<16, 12>;    // Analog watchdog higher threshold
            using LT = Field<0, 12>;    // Analog watchdog lower threshold
        };

        // channel selection register
        struct CHSELR : public Register<0x40012428> {
            using CHSEL18 = Field<18, 1>;    // Channel-x selection
            using CHSEL17 = Field<17, 1>;    // Channel-x selection
            using CHSEL16 = Field<16, 1>;    // Channel-x selection
            using CHSEL15 = Field<15, 1>;    // Channel-x selection
            using CHSEL14 = Field<14, 1>;    // Channel-x selection
            using CHSEL13 = Field<13, 1>;    // Channel-x selection
            using CHSEL12 = Field<12, 1>;    // Channel-x selection
            using CHSEL11 = Field<11, 1>;    // Channel-x selection
            using CHSEL10 = Field<10, 1>;    // Channel-x selection
            using CHSEL9 = Field<9, 1>;    // Channel-x selection
            using CHSEL8 = Field<8, 1>;    // Channel-x selection
            using CHSEL7 = Field<7, 1>;    // Channel-x selection
            using CHSEL6 = Field<6, 1>;    // Channel-x selection
            using CHSEL5 = Field<5, 1>;    // Channel-x selection
            using CHSEL4 = Field<4, 1>;    // Channel-x selection
            using CHSEL3 = Field<3, 1>;    // Channel-x selection
            using CHSEL2 = Field<2, 1>;    // Channel-x selection
            using CHSEL1 = Field<1, 1>;    // Channel-x selection
            using CHSEL0 = Field<0, 1>;    // Channel-x selection
        };

        // data register
        struct DR : public RegisterReadOnly<0x40012440> {
            using DATA = Field<0, 16>;    // Converted data
        };

        // common configuration register
        struct CCR : public Register<0x40012708> {
            using VBATEN = Field<24, 1>;    // VBAT enable
            using TSEN = Field<23, 1>;    // Temperature sensor enable
            using VREFEN = Field<22, 1>;    // Temperature sensor and VREFINT enable
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART1 {
        // Control register 1
        struct CR1 : public Register<0x40013800> {
            using UE = Field<0, 1>;    // USART enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using RE = Field<2, 1>;    // Receiver enable
            using TE = Field<3, 1>;    // Transmitter enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using PS = Field<9, 1>;    // Parity selection
            using PCE = Field<10, 1>;    // Parity control enable
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using M = Field<12, 1>;    // Word length
            using MME = Field<13, 1>;    // Mute mode enable
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using DEDT = Field<16, 5>;    // Driver Enable deassertion time
            using DEAT = Field<21, 5>;    // Driver Enable assertion time
            using RTOIE = Field<26, 1>;    // Receiver timeout interrupt enable
            using EOBIE = Field<27, 1>;    // End of Block interrupt enable
            using M1 = Field<28, 1>;    // Word length
        };

        // Control register 2
        struct CR2 : public Register<0x40013804> {
            using ADD4 = Field<28, 4>;    // Address of the USART node
            using ADD0 = Field<24, 4>;    // Address of the USART node
            using RTOEN = Field<23, 1>;    // Receiver timeout enable
            using ABRMOD = Field<21, 2>;    // Auto baud rate mode
            using ABREN = Field<20, 1>;    // Auto baud rate enable
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using DATAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // LIN break detection length
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40013808> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using SCARCNT = Field<17, 3>;    // Smartcard auto-retry count
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x4001380c> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40013810> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

        // Receiver timeout register
        struct RTOR : public Register<0x40013814> {
            using BLEN = Field<24, 8>;    // Block Length
            using RTO = Field<0, 24>;    // Receiver timeout value
        };

        // Request register
        struct RQR : public Register<0x40013818> {
            using TXFRQ = Field<4, 1>;    // Transmit data flush request
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
            using ABRRQ = Field<0, 1>;    // Auto baud rate request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x4001381c> {
            using REACK = Field<22, 1>;    // Receive enable acknowledge flag
            using TEACK = Field<21, 1>;    // Transmit enable acknowledge flag
            using WUF = Field<20, 1>;    // Wakeup from Stop mode flag
            using RWU = Field<19, 1>;    // Receiver wakeup from Mute mode
            using SBKF = Field<18, 1>;    // Send break flag
            using CMF = Field<17, 1>;    // character match flag
            using BUSY = Field<16, 1>;    // Busy flag
            using ABRF = Field<15, 1>;    // Auto baud rate flag
            using ABRE = Field<14, 1>;    // Auto baud rate error
            using EOBF = Field<12, 1>;    // End of block flag
            using RTOF = Field<11, 1>;    // Receiver timeout
            using CTS = Field<10, 1>;    // CTS flag
            using CTSIF = Field<9, 1>;    // CTS interrupt flag
            using LBDF = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // Idle line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NF = Field<2, 1>;    // Noise detected flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Interrupt flag clear register
        struct ICR : public Register<0x40013820> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using EOBCF = Field<12, 1>;    // End of timeout clear flag
            using RTOCF = Field<11, 1>;    // Receiver timeout clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using LBDCF = Field<8, 1>;    // LIN break detection clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40013824> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40013828> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART2 {
        // Control register 1
        struct CR1 : public Register<0x40004400> {
            using UE = Field<0, 1>;    // USART enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using RE = Field<2, 1>;    // Receiver enable
            using TE = Field<3, 1>;    // Transmitter enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using PS = Field<9, 1>;    // Parity selection
            using PCE = Field<10, 1>;    // Parity control enable
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using M = Field<12, 1>;    // Word length
            using MME = Field<13, 1>;    // Mute mode enable
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using DEDT = Field<16, 5>;    // Driver Enable deassertion time
            using DEAT = Field<21, 5>;    // Driver Enable assertion time
            using RTOIE = Field<26, 1>;    // Receiver timeout interrupt enable
            using EOBIE = Field<27, 1>;    // End of Block interrupt enable
            using M1 = Field<28, 1>;    // Word length
        };

        // Control register 2
        struct CR2 : public Register<0x40004404> {
            using ADD4 = Field<28, 4>;    // Address of the USART node
            using ADD0 = Field<24, 4>;    // Address of the USART node
            using RTOEN = Field<23, 1>;    // Receiver timeout enable
            using ABRMOD = Field<21, 2>;    // Auto baud rate mode
            using ABREN = Field<20, 1>;    // Auto baud rate enable
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using DATAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // LIN break detection length
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40004408> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using SCARCNT = Field<17, 3>;    // Smartcard auto-retry count
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x4000440c> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40004410> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

        // Receiver timeout register
        struct RTOR : public Register<0x40004414> {
            using BLEN = Field<24, 8>;    // Block Length
            using RTO = Field<0, 24>;    // Receiver timeout value
        };

        // Request register
        struct RQR : public Register<0x40004418> {
            using TXFRQ = Field<4, 1>;    // Transmit data flush request
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
            using ABRRQ = Field<0, 1>;    // Auto baud rate request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x4000441c> {
            using REACK = Field<22, 1>;    // Receive enable acknowledge flag
            using TEACK = Field<21, 1>;    // Transmit enable acknowledge flag
            using WUF = Field<20, 1>;    // Wakeup from Stop mode flag
            using RWU = Field<19, 1>;    // Receiver wakeup from Mute mode
            using SBKF = Field<18, 1>;    // Send break flag
            using CMF = Field<17, 1>;    // character match flag
            using BUSY = Field<16, 1>;    // Busy flag
            using ABRF = Field<15, 1>;    // Auto baud rate flag
            using ABRE = Field<14, 1>;    // Auto baud rate error
            using EOBF = Field<12, 1>;    // End of block flag
            using RTOF = Field<11, 1>;    // Receiver timeout
            using CTS = Field<10, 1>;    // CTS flag
            using CTSIF = Field<9, 1>;    // CTS interrupt flag
            using LBDF = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // Idle line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NF = Field<2, 1>;    // Noise detected flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Interrupt flag clear register
        struct ICR : public Register<0x40004420> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using EOBCF = Field<12, 1>;    // End of timeout clear flag
            using RTOCF = Field<11, 1>;    // Receiver timeout clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using LBDCF = Field<8, 1>;    // LIN break detection clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40004424> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40004428> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART3 {
        // Control register 1
        struct CR1 : public Register<0x40004800> {
            using UE = Field<0, 1>;    // USART enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using RE = Field<2, 1>;    // Receiver enable
            using TE = Field<3, 1>;    // Transmitter enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using PS = Field<9, 1>;    // Parity selection
            using PCE = Field<10, 1>;    // Parity control enable
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using M = Field<12, 1>;    // Word length
            using MME = Field<13, 1>;    // Mute mode enable
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using DEDT = Field<16, 5>;    // Driver Enable deassertion time
            using DEAT = Field<21, 5>;    // Driver Enable assertion time
            using RTOIE = Field<26, 1>;    // Receiver timeout interrupt enable
            using EOBIE = Field<27, 1>;    // End of Block interrupt enable
            using M1 = Field<28, 1>;    // Word length
        };

        // Control register 2
        struct CR2 : public Register<0x40004804> {
            using ADD4 = Field<28, 4>;    // Address of the USART node
            using ADD0 = Field<24, 4>;    // Address of the USART node
            using RTOEN = Field<23, 1>;    // Receiver timeout enable
            using ABRMOD = Field<21, 2>;    // Auto baud rate mode
            using ABREN = Field<20, 1>;    // Auto baud rate enable
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using DATAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // LIN break detection length
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40004808> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using SCARCNT = Field<17, 3>;    // Smartcard auto-retry count
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x4000480c> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40004810> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

        // Receiver timeout register
        struct RTOR : public Register<0x40004814> {
            using BLEN = Field<24, 8>;    // Block Length
            using RTO = Field<0, 24>;    // Receiver timeout value
        };

        // Request register
        struct RQR : public Register<0x40004818> {
            using TXFRQ = Field<4, 1>;    // Transmit data flush request
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
            using ABRRQ = Field<0, 1>;    // Auto baud rate request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x4000481c> {
            using REACK = Field<22, 1>;    // Receive enable acknowledge flag
            using TEACK = Field<21, 1>;    // Transmit enable acknowledge flag
            using WUF = Field<20, 1>;    // Wakeup from Stop mode flag
            using RWU = Field<19, 1>;    // Receiver wakeup from Mute mode
            using SBKF = Field<18, 1>;    // Send break flag
            using CMF = Field<17, 1>;    // character match flag
            using BUSY = Field<16, 1>;    // Busy flag
            using ABRF = Field<15, 1>;    // Auto baud rate flag
            using ABRE = Field<14, 1>;    // Auto baud rate error
            using EOBF = Field<12, 1>;    // End of block flag
            using RTOF = Field<11, 1>;    // Receiver timeout
            using CTS = Field<10, 1>;    // CTS flag
            using CTSIF = Field<9, 1>;    // CTS interrupt flag
            using LBDF = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // Idle line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NF = Field<2, 1>;    // Noise detected flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Interrupt flag clear register
        struct ICR : public Register<0x40004820> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using EOBCF = Field<12, 1>;    // End of timeout clear flag
            using RTOCF = Field<11, 1>;    // Receiver timeout clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using LBDCF = Field<8, 1>;    // LIN break detection clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40004824> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40004828> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART4 {
        // Control register 1
        struct CR1 : public Register<0x40004c00> {
            using UE = Field<0, 1>;    // USART enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using RE = Field<2, 1>;    // Receiver enable
            using TE = Field<3, 1>;    // Transmitter enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using PS = Field<9, 1>;    // Parity selection
            using PCE = Field<10, 1>;    // Parity control enable
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using M = Field<12, 1>;    // Word length
            using MME = Field<13, 1>;    // Mute mode enable
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using DEDT = Field<16, 5>;    // Driver Enable deassertion time
            using DEAT = Field<21, 5>;    // Driver Enable assertion time
            using RTOIE = Field<26, 1>;    // Receiver timeout interrupt enable
            using EOBIE = Field<27, 1>;    // End of Block interrupt enable
            using M1 = Field<28, 1>;    // Word length
        };

        // Control register 2
        struct CR2 : public Register<0x40004c04> {
            using ADD4 = Field<28, 4>;    // Address of the USART node
            using ADD0 = Field<24, 4>;    // Address of the USART node
            using RTOEN = Field<23, 1>;    // Receiver timeout enable
            using ABRMOD = Field<21, 2>;    // Auto baud rate mode
            using ABREN = Field<20, 1>;    // Auto baud rate enable
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using DATAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // LIN break detection length
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40004c08> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using SCARCNT = Field<17, 3>;    // Smartcard auto-retry count
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x40004c0c> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40004c10> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

        // Receiver timeout register
        struct RTOR : public Register<0x40004c14> {
            using BLEN = Field<24, 8>;    // Block Length
            using RTO = Field<0, 24>;    // Receiver timeout value
        };

        // Request register
        struct RQR : public Register<0x40004c18> {
            using TXFRQ = Field<4, 1>;    // Transmit data flush request
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
            using ABRRQ = Field<0, 1>;    // Auto baud rate request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x40004c1c> {
            using REACK = Field<22, 1>;    // Receive enable acknowledge flag
            using TEACK = Field<21, 1>;    // Transmit enable acknowledge flag
            using WUF = Field<20, 1>;    // Wakeup from Stop mode flag
            using RWU = Field<19, 1>;    // Receiver wakeup from Mute mode
            using SBKF = Field<18, 1>;    // Send break flag
            using CMF = Field<17, 1>;    // character match flag
            using BUSY = Field<16, 1>;    // Busy flag
            using ABRF = Field<15, 1>;    // Auto baud rate flag
            using ABRE = Field<14, 1>;    // Auto baud rate error
            using EOBF = Field<12, 1>;    // End of block flag
            using RTOF = Field<11, 1>;    // Receiver timeout
            using CTS = Field<10, 1>;    // CTS flag
            using CTSIF = Field<9, 1>;    // CTS interrupt flag
            using LBDF = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // Idle line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NF = Field<2, 1>;    // Noise detected flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Interrupt flag clear register
        struct ICR : public Register<0x40004c20> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using EOBCF = Field<12, 1>;    // End of timeout clear flag
            using RTOCF = Field<11, 1>;    // Receiver timeout clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using LBDCF = Field<8, 1>;    // LIN break detection clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40004c24> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40004c28> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART6 {
        // Control register 1
        struct CR1 : public Register<0x40011400> {
            using UE = Field<0, 1>;    // USART enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using RE = Field<2, 1>;    // Receiver enable
            using TE = Field<3, 1>;    // Transmitter enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using PS = Field<9, 1>;    // Parity selection
            using PCE = Field<10, 1>;    // Parity control enable
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using M = Field<12, 1>;    // Word length
            using MME = Field<13, 1>;    // Mute mode enable
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using DEDT = Field<16, 5>;    // Driver Enable deassertion time
            using DEAT = Field<21, 5>;    // Driver Enable assertion time
            using RTOIE = Field<26, 1>;    // Receiver timeout interrupt enable
            using EOBIE = Field<27, 1>;    // End of Block interrupt enable
            using M1 = Field<28, 1>;    // Word length
        };

        // Control register 2
        struct CR2 : public Register<0x40011404> {
            using ADD4 = Field<28, 4>;    // Address of the USART node
            using ADD0 = Field<24, 4>;    // Address of the USART node
            using RTOEN = Field<23, 1>;    // Receiver timeout enable
            using ABRMOD = Field<21, 2>;    // Auto baud rate mode
            using ABREN = Field<20, 1>;    // Auto baud rate enable
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using DATAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // LIN break detection length
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40011408> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using SCARCNT = Field<17, 3>;    // Smartcard auto-retry count
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x4001140c> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40011410> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

        // Receiver timeout register
        struct RTOR : public Register<0x40011414> {
            using BLEN = Field<24, 8>;    // Block Length
            using RTO = Field<0, 24>;    // Receiver timeout value
        };

        // Request register
        struct RQR : public Register<0x40011418> {
            using TXFRQ = Field<4, 1>;    // Transmit data flush request
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
            using ABRRQ = Field<0, 1>;    // Auto baud rate request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x4001141c> {
            using REACK = Field<22, 1>;    // Receive enable acknowledge flag
            using TEACK = Field<21, 1>;    // Transmit enable acknowledge flag
            using WUF = Field<20, 1>;    // Wakeup from Stop mode flag
            using RWU = Field<19, 1>;    // Receiver wakeup from Mute mode
            using SBKF = Field<18, 1>;    // Send break flag
            using CMF = Field<17, 1>;    // character match flag
            using BUSY = Field<16, 1>;    // Busy flag
            using ABRF = Field<15, 1>;    // Auto baud rate flag
            using ABRE = Field<14, 1>;    // Auto baud rate error
            using EOBF = Field<12, 1>;    // End of block flag
            using RTOF = Field<11, 1>;    // Receiver timeout
            using CTS = Field<10, 1>;    // CTS flag
            using CTSIF = Field<9, 1>;    // CTS interrupt flag
            using LBDF = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // Idle line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NF = Field<2, 1>;    // Noise detected flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Interrupt flag clear register
        struct ICR : public Register<0x40011420> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using EOBCF = Field<12, 1>;    // End of timeout clear flag
            using RTOCF = Field<11, 1>;    // Receiver timeout clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using LBDCF = Field<8, 1>;    // LIN break detection clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40011424> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40011428> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART7 {
        // Control register 1
        struct CR1 : public Register<0x40011800> {
            using UE = Field<0, 1>;    // USART enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using RE = Field<2, 1>;    // Receiver enable
            using TE = Field<3, 1>;    // Transmitter enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using PS = Field<9, 1>;    // Parity selection
            using PCE = Field<10, 1>;    // Parity control enable
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using M = Field<12, 1>;    // Word length
            using MME = Field<13, 1>;    // Mute mode enable
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using DEDT = Field<16, 5>;    // Driver Enable deassertion time
            using DEAT = Field<21, 5>;    // Driver Enable assertion time
            using RTOIE = Field<26, 1>;    // Receiver timeout interrupt enable
            using EOBIE = Field<27, 1>;    // End of Block interrupt enable
            using M1 = Field<28, 1>;    // Word length
        };

        // Control register 2
        struct CR2 : public Register<0x40011804> {
            using ADD4 = Field<28, 4>;    // Address of the USART node
            using ADD0 = Field<24, 4>;    // Address of the USART node
            using RTOEN = Field<23, 1>;    // Receiver timeout enable
            using ABRMOD = Field<21, 2>;    // Auto baud rate mode
            using ABREN = Field<20, 1>;    // Auto baud rate enable
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using DATAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // LIN break detection length
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40011808> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using SCARCNT = Field<17, 3>;    // Smartcard auto-retry count
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x4001180c> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40011810> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

        // Receiver timeout register
        struct RTOR : public Register<0x40011814> {
            using BLEN = Field<24, 8>;    // Block Length
            using RTO = Field<0, 24>;    // Receiver timeout value
        };

        // Request register
        struct RQR : public Register<0x40011818> {
            using TXFRQ = Field<4, 1>;    // Transmit data flush request
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
            using ABRRQ = Field<0, 1>;    // Auto baud rate request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x4001181c> {
            using REACK = Field<22, 1>;    // Receive enable acknowledge flag
            using TEACK = Field<21, 1>;    // Transmit enable acknowledge flag
            using WUF = Field<20, 1>;    // Wakeup from Stop mode flag
            using RWU = Field<19, 1>;    // Receiver wakeup from Mute mode
            using SBKF = Field<18, 1>;    // Send break flag
            using CMF = Field<17, 1>;    // character match flag
            using BUSY = Field<16, 1>;    // Busy flag
            using ABRF = Field<15, 1>;    // Auto baud rate flag
            using ABRE = Field<14, 1>;    // Auto baud rate error
            using EOBF = Field<12, 1>;    // End of block flag
            using RTOF = Field<11, 1>;    // Receiver timeout
            using CTS = Field<10, 1>;    // CTS flag
            using CTSIF = Field<9, 1>;    // CTS interrupt flag
            using LBDF = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // Idle line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NF = Field<2, 1>;    // Noise detected flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Interrupt flag clear register
        struct ICR : public Register<0x40011820> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using EOBCF = Field<12, 1>;    // End of timeout clear flag
            using RTOCF = Field<11, 1>;    // Receiver timeout clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using LBDCF = Field<8, 1>;    // LIN break detection clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40011824> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40011828> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART8 {
        // Control register 1
        struct CR1 : public Register<0x40011c00> {
            using UE = Field<0, 1>;    // USART enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using RE = Field<2, 1>;    // Receiver enable
            using TE = Field<3, 1>;    // Transmitter enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using PS = Field<9, 1>;    // Parity selection
            using PCE = Field<10, 1>;    // Parity control enable
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using M = Field<12, 1>;    // Word length
            using MME = Field<13, 1>;    // Mute mode enable
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using DEDT = Field<16, 5>;    // Driver Enable deassertion time
            using DEAT = Field<21, 5>;    // Driver Enable assertion time
            using RTOIE = Field<26, 1>;    // Receiver timeout interrupt enable
            using EOBIE = Field<27, 1>;    // End of Block interrupt enable
            using M1 = Field<28, 1>;    // Word length
        };

        // Control register 2
        struct CR2 : public Register<0x40011c04> {
            using ADD4 = Field<28, 4>;    // Address of the USART node
            using ADD0 = Field<24, 4>;    // Address of the USART node
            using RTOEN = Field<23, 1>;    // Receiver timeout enable
            using ABRMOD = Field<21, 2>;    // Auto baud rate mode
            using ABREN = Field<20, 1>;    // Auto baud rate enable
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using DATAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // LIN break detection length
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40011c08> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using SCARCNT = Field<17, 3>;    // Smartcard auto-retry count
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x40011c0c> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40011c10> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

        // Receiver timeout register
        struct RTOR : public Register<0x40011c14> {
            using BLEN = Field<24, 8>;    // Block Length
            using RTO = Field<0, 24>;    // Receiver timeout value
        };

        // Request register
        struct RQR : public Register<0x40011c18> {
            using TXFRQ = Field<4, 1>;    // Transmit data flush request
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
            using ABRRQ = Field<0, 1>;    // Auto baud rate request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x40011c1c> {
            using REACK = Field<22, 1>;    // Receive enable acknowledge flag
            using TEACK = Field<21, 1>;    // Transmit enable acknowledge flag
            using WUF = Field<20, 1>;    // Wakeup from Stop mode flag
            using RWU = Field<19, 1>;    // Receiver wakeup from Mute mode
            using SBKF = Field<18, 1>;    // Send break flag
            using CMF = Field<17, 1>;    // character match flag
            using BUSY = Field<16, 1>;    // Busy flag
            using ABRF = Field<15, 1>;    // Auto baud rate flag
            using ABRE = Field<14, 1>;    // Auto baud rate error
            using EOBF = Field<12, 1>;    // End of block flag
            using RTOF = Field<11, 1>;    // Receiver timeout
            using CTS = Field<10, 1>;    // CTS flag
            using CTSIF = Field<9, 1>;    // CTS interrupt flag
            using LBDF = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // Idle line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NF = Field<2, 1>;    // Noise detected flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Interrupt flag clear register
        struct ICR : public Register<0x40011c20> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using EOBCF = Field<12, 1>;    // End of timeout clear flag
            using RTOCF = Field<11, 1>;    // Receiver timeout clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using LBDCF = Field<8, 1>;    // LIN break detection clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40011c24> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40011c28> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART5 {
        // Control register 1
        struct CR1 : public Register<0x40005000> {
            using UE = Field<0, 1>;    // USART enable
            using UESM = Field<1, 1>;    // USART enable in Stop mode
            using RE = Field<2, 1>;    // Receiver enable
            using TE = Field<3, 1>;    // Transmitter enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using TXEIE = Field<7, 1>;    // interrupt enable
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using PS = Field<9, 1>;    // Parity selection
            using PCE = Field<10, 1>;    // Parity control enable
            using WAKE = Field<11, 1>;    // Receiver wakeup method
            using M = Field<12, 1>;    // Word length
            using MME = Field<13, 1>;    // Mute mode enable
            using CMIE = Field<14, 1>;    // Character match interrupt enable
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using DEDT = Field<16, 5>;    // Driver Enable deassertion time
            using DEAT = Field<21, 5>;    // Driver Enable assertion time
            using RTOIE = Field<26, 1>;    // Receiver timeout interrupt enable
            using EOBIE = Field<27, 1>;    // End of Block interrupt enable
            using M1 = Field<28, 1>;    // Word length
        };

        // Control register 2
        struct CR2 : public Register<0x40005004> {
            using ADD4 = Field<28, 4>;    // Address of the USART node
            using ADD0 = Field<24, 4>;    // Address of the USART node
            using RTOEN = Field<23, 1>;    // Receiver timeout enable
            using ABRMOD = Field<21, 2>;    // Auto baud rate mode
            using ABREN = Field<20, 1>;    // Auto baud rate enable
            using MSBFIRST = Field<19, 1>;    // Most significant bit first
            using DATAINV = Field<18, 1>;    // Binary data inversion
            using TXINV = Field<17, 1>;    // TX pin active level inversion
            using RXINV = Field<16, 1>;    // RX pin active level inversion
            using SWAP = Field<15, 1>;    // Swap TX/RX pins
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // LIN break detection length
            using ADDM7 = Field<4, 1>;    // 7-bit Address Detection/4-bit Address Detection
        };

        // Control register 3
        struct CR3 : public Register<0x40005008> {
            using WUFIE = Field<22, 1>;    // Wakeup from Stop mode interrupt enable
            using WUS = Field<20, 2>;    // Wakeup from Stop mode interrupt flag selection
            using SCARCNT = Field<17, 3>;    // Smartcard auto-retry count
            using DEP = Field<15, 1>;    // Driver enable polarity selection
            using DEM = Field<14, 1>;    // Driver enable mode
            using DDRE = Field<13, 1>;    // DMA Disable on Reception Error
            using OVRDIS = Field<12, 1>;    // Overrun Disable
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Baud rate register
        struct BRR : public Register<0x4000500c> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40005010> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

        // Receiver timeout register
        struct RTOR : public Register<0x40005014> {
            using BLEN = Field<24, 8>;    // Block Length
            using RTO = Field<0, 24>;    // Receiver timeout value
        };

        // Request register
        struct RQR : public Register<0x40005018> {
            using TXFRQ = Field<4, 1>;    // Transmit data flush request
            using RXFRQ = Field<3, 1>;    // Receive data flush request
            using MMRQ = Field<2, 1>;    // Mute mode request
            using SBKRQ = Field<1, 1>;    // Send break request
            using ABRRQ = Field<0, 1>;    // Auto baud rate request
        };

        // Interrupt & status register
        struct ISR : public RegisterReadOnly<0x4000501c> {
            using REACK = Field<22, 1>;    // Receive enable acknowledge flag
            using TEACK = Field<21, 1>;    // Transmit enable acknowledge flag
            using WUF = Field<20, 1>;    // Wakeup from Stop mode flag
            using RWU = Field<19, 1>;    // Receiver wakeup from Mute mode
            using SBKF = Field<18, 1>;    // Send break flag
            using CMF = Field<17, 1>;    // character match flag
            using BUSY = Field<16, 1>;    // Busy flag
            using ABRF = Field<15, 1>;    // Auto baud rate flag
            using ABRE = Field<14, 1>;    // Auto baud rate error
            using EOBF = Field<12, 1>;    // End of block flag
            using RTOF = Field<11, 1>;    // Receiver timeout
            using CTS = Field<10, 1>;    // CTS flag
            using CTSIF = Field<9, 1>;    // CTS interrupt flag
            using LBDF = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // Idle line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NF = Field<2, 1>;    // Noise detected flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Interrupt flag clear register
        struct ICR : public Register<0x40005020> {
            using WUCF = Field<20, 1>;    // Wakeup from Stop mode clear flag
            using CMCF = Field<17, 1>;    // Character match clear flag
            using EOBCF = Field<12, 1>;    // End of timeout clear flag
            using RTOCF = Field<11, 1>;    // Receiver timeout clear flag
            using CTSCF = Field<9, 1>;    // CTS clear flag
            using LBDCF = Field<8, 1>;    // LIN break detection clear flag
            using TCCF = Field<6, 1>;    // Transmission complete clear flag
            using IDLECF = Field<4, 1>;    // Idle line detected clear flag
            using ORECF = Field<3, 1>;    // Overrun error clear flag
            using NCF = Field<2, 1>;    // Noise detected clear flag
            using FECF = Field<1, 1>;    // Framing error clear flag
            using PECF = Field<0, 1>;    // Parity error clear flag
        };

        // Receive data register
        struct RDR : public RegisterReadOnly<0x40005024> {
            using Field = Field<0, 9>;    // Receive data value
        };

        // Transmit data register
        struct TDR : public Register<0x40005028> {
            using Field = Field<0, 9>;    // Transmit data value
        };

    };

    // Real-time clock
    struct RTC {
        // time register
        struct TR : public Register<0x40002800> {
            using PM = Field<22, 1>;    // AM/PM notation
            using HT = Field<20, 2>;    // Hour tens in BCD format
            using HU = Field<16, 4>;    // Hour units in BCD format
            using MNT = Field<12, 3>;    // Minute tens in BCD format
            using MNU = Field<8, 4>;    // Minute units in BCD format
            using ST = Field<4, 3>;    // Second tens in BCD format
            using SU = Field<0, 4>;    // Second units in BCD format
        };

        // date register
        struct DR : public Register<0x40002804> {
            using YT = Field<20, 4>;    // Year tens in BCD format
            using YU = Field<16, 4>;    // Year units in BCD format
            using WDU = Field<13, 3>;    // Week day units
            using MT = Field<12, 1>;    // Month tens in BCD format
            using MU = Field<8, 4>;    // Month units in BCD format
            using DT = Field<4, 2>;    // Date tens in BCD format
            using DU = Field<0, 4>;    // Date units in BCD format
        };

        // control register
        struct CR : public Register<0x40002808> {
            using TSEDGE = Field<3, 1>;    // Time-stamp event active edge
            using REFCKON = Field<4, 1>;    // RTC_REFIN reference clock detection enable (50 or 60 Hz)
            using BYPSHAD = Field<5, 1>;    // Bypass the shadow registers
            using FMT = Field<6, 1>;    // Hour format
            using ALRAE = Field<8, 1>;    // Alarm A enable
            using TSE = Field<11, 1>;    // timestamp enable
            using ALRAIE = Field<12, 1>;    // Alarm A interrupt enable
            using TSIE = Field<15, 1>;    // Time-stamp interrupt enable
            using ADD1H = Field<16, 1>;    // Add 1 hour (summer time change)
            using SUB1H = Field<17, 1>;    // Subtract 1 hour (winter time change)
            using BKP = Field<18, 1>;    // Backup
            using COSEL = Field<19, 1>;    // Calibration output selection
            using POL = Field<20, 1>;    // Output polarity
            using OSEL = Field<21, 2>;    // Output selection
            using COE = Field<23, 1>;    // Calibration output enable
        };

        // initialization and status register
        struct ISR : public Register<0x4000280c> {
            using ALRAWF = Field<0, 1>;    // Alarm A write flag
            using SHPF = Field<3, 1>;    // Shift operation pending
            using INITS = Field<4, 1>;    // Initialization status flag
            using RSF = Field<5, 1>;    // Registers synchronization flag
            using INITF = Field<6, 1>;    // Initialization flag
            using INIT = Field<7, 1>;    // Initialization mode
            using ALRAF = Field<8, 1>;    // Alarm A flag
            using TSF = Field<11, 1>;    // Time-stamp flag
            using TSOVF = Field<12, 1>;    // Time-stamp overflow flag
            using TAMP1F = Field<13, 1>;    // RTC_TAMP1 detection flag
            using TAMP2F = Field<14, 1>;    // RTC_TAMP2 detection flag
            using RECALPF = Field<16, 1>;    // Recalibration pending Flag
        };

        // prescaler register
        struct PRER : public Register<0x40002810> {
            using PREDIV_A = Field<16, 7>;    // Asynchronous prescaler factor
            using PREDIV_S = Field<0, 15>;    // Synchronous prescaler factor
        };

        // alarm A register
        struct ALRMAR : public Register<0x4000281c> {
            using MSK4 = Field<31, 1>;    // Alarm A date mask
            using WDSEL = Field<30, 1>;    // Week day selection
            using DT = Field<28, 2>;    // Date tens in BCD format.
            using DU = Field<24, 4>;    // Date units or day in BCD format.
            using MSK3 = Field<23, 1>;    // Alarm A hours mask
            using PM = Field<22, 1>;    // AM/PM notation
            using HT = Field<20, 2>;    // Hour tens in BCD format.
            using HU = Field<16, 4>;    // Hour units in BCD format.
            using MSK2 = Field<15, 1>;    // Alarm A minutes mask
            using MNT = Field<12, 3>;    // Minute tens in BCD format.
            using MNU = Field<8, 4>;    // Minute units in BCD format.
            using MSK1 = Field<7, 1>;    // Alarm A seconds mask
            using ST = Field<4, 3>;    // Second tens in BCD format.
            using SU = Field<0, 4>;    // Second units in BCD format.
        };

        // write protection register
        struct WPR : public RegisterWriteOnly<0x40002824> {
            using KEY = Field<0, 8>;    // Write protection key
        };

        // sub second register
        struct SSR : public RegisterReadOnly<0x40002828> {
            using SS = Field<0, 16>;    // Sub second value
        };

        // shift control register
        struct SHIFTR : public RegisterWriteOnly<0x4000282c> {
            using ADD1S = Field<31, 1>;    // Add one second
            using SUBFS = Field<0, 15>;    // Subtract a fraction of a second
        };

        // timestamp time register
        struct TSTR : public RegisterReadOnly<0x40002830> {
            using PM = Field<22, 1>;    // AM/PM notation
            using HT = Field<20, 2>;    // Hour tens in BCD format.
            using HU = Field<16, 4>;    // Hour units in BCD format.
            using MNT = Field<12, 3>;    // Minute tens in BCD format.
            using MNU = Field<8, 4>;    // Minute units in BCD format.
            using ST = Field<4, 3>;    // Second tens in BCD format.
            using SU = Field<0, 4>;    // Second units in BCD format.
        };

        // timestamp date register
        struct TSDR : public RegisterReadOnly<0x40002834> {
            using WDU = Field<13, 3>;    // Week day units
            using MT = Field<12, 1>;    // Month tens in BCD format
            using MU = Field<8, 4>;    // Month units in BCD format
            using DT = Field<4, 2>;    // Date tens in BCD format
            using DU = Field<0, 4>;    // Date units in BCD format
        };

        // time-stamp sub second register
        struct TSSSR : public RegisterReadOnly<0x40002838> {
            using SS = Field<0, 16>;    // Sub second value
        };

        // calibration register
        struct CALR : public Register<0x4000283c> {
            using CALP = Field<15, 1>;    // Increase frequency of RTC by 488.5 ppm
            using CALW8 = Field<14, 1>;    // Use an 8-second calibration cycle period
            using CALW16 = Field<13, 1>;    // Use a 16-second calibration cycle period
            using CALM = Field<0, 9>;    // Calibration minus
        };

        // tamper and alternate function configuration register
        struct TAFCR : public Register<0x40002840> {
            using PC15MODE = Field<23, 1>;    // PC15 mode
            using PC15VALUE = Field<22, 1>;    // PC15 value
            using PC14MODE = Field<21, 1>;    // PC14 mode
            using PC14VALUE = Field<20, 1>;    // PC14 value
            using PC13MODE = Field<19, 1>;    // PC13 mode
            using PC13VALUE = Field<18, 1>;    // RTC_ALARM output type/PC13 value
            using TAMP_PUDIS = Field<15, 1>;    // RTC_TAMPx pull-up disable
            using TAMP_PRCH = Field<13, 2>;    // RTC_TAMPx precharge duration
            using TAMPFLT = Field<11, 2>;    // RTC_TAMPx filter count
            using TAMPFREQ = Field<8, 3>;    // Tamper sampling frequency
            using TAMPTS = Field<7, 1>;    // Activate timestamp on tamper detection event
            using TAMP2_TRG = Field<4, 1>;    // Active level for RTC_TAMP2 input
            using TAMP2E = Field<3, 1>;    // RTC_TAMP2 input detection enable
            using TAMPIE = Field<2, 1>;    // Tamper interrupt enable
            using TAMP1TRG = Field<1, 1>;    // Active level for RTC_TAMP1 input
            using TAMP1E = Field<0, 1>;    // RTC_TAMP1 input detection enable
        };

        // alarm A sub second register
        struct ALRMASSR : public Register<0x40002844> {
            using MASKSS = Field<24, 4>;    // Mask the most-significant bits starting at this bit
            using SS = Field<0, 15>;    // Sub seconds value
        };

        // backup register
        struct BKP0R : public Register<0x40002850> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP1R : public Register<0x40002854> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP2R : public Register<0x40002858> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP3R : public Register<0x4000285c> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP4R : public Register<0x40002860> {
            using BKP = Field<0, 32>;    // BKP
        };

    };

    // General-purpose-timers
    struct TIM15 {
        // control register 1
        struct CR1 : public Register<0x40014000> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40014004> {
            using OIS2 = Field<10, 1>;    // Output Idle state 2
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // slave mode control register
        struct SMCR : public Register<0x40014008> {
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001400c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40014010> {
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40014014> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40014018> {
            using OC2M = Field<12, 3>;    // Output Compare 2 mode
            using OC2PE = Field<11, 1>;    // Output Compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output Compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40014018> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PSC = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40014020> {
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40014024> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40014028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001402c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // repetition counter register
        struct RCR : public Register<0x40014030> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40014034> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40014038> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40014044> {
            using MOE = Field<15, 1>;    // Main output enable
            using AOE = Field<14, 1>;    // Automatic output enable
            using BKP = Field<13, 1>;    // Break polarity
            using BKE = Field<12, 1>;    // Break enable
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using LOCK = Field<8, 2>;    // Lock configuration
            using DTG = Field<0, 8>;    // Dead-time generator setup
        };

        // DMA control register
        struct DCR : public Register<0x40014048> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4001404c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General-purpose-timers
    struct TIM16 {
        // control register 1
        struct CR1 : public Register<0x40014400> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40014404> {
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001440c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40014410> {
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40014414> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40014418> {
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40014418> {
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40014420> {
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40014424> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40014428> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001442c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // repetition counter register
        struct RCR : public Register<0x40014430> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40014434> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40014444> {
            using MOE = Field<15, 1>;    // Main output enable
            using AOE = Field<14, 1>;    // Automatic output enable
            using BKP = Field<13, 1>;    // Break polarity
            using BKE = Field<12, 1>;    // Break enable
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using LOCK = Field<8, 2>;    // Lock configuration
            using DTG = Field<0, 8>;    // Dead-time generator setup
        };

        // DMA control register
        struct DCR : public Register<0x40014448> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4001444c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General-purpose-timers
    struct TIM17 {
        // control register 1
        struct CR1 : public Register<0x40014800> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40014804> {
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001480c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40014810> {
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40014814> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register (output mode)
        struct CCMR1_Output : public Register<0x40014818> {
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40014818> {
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using IC1PSC = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40014820> {
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40014824> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40014828> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001482c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // repetition counter register
        struct RCR : public Register<0x40014830> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40014834> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40014844> {
            using MOE = Field<15, 1>;    // Main output enable
            using AOE = Field<14, 1>;    // Automatic output enable
            using BKP = Field<13, 1>;    // Break polarity
            using BKE = Field<12, 1>;    // Break enable
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using LOCK = Field<8, 2>;    // Lock configuration
            using DTG = Field<0, 8>;    // Dead-time generator setup
        };

        // DMA control register
        struct DCR : public Register<0x40014848> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4001484c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // Touch sensing controller
    struct TSC {
        // control register
        struct CR : public Register<0x40024000> {
            using CTPH = Field<28, 4>;    // Charge transfer pulse high
            using CTPL = Field<24, 4>;    // Charge transfer pulse low
            using SSD = Field<17, 7>;    // Spread spectrum deviation
            using SSE = Field<16, 1>;    // Spread spectrum enable
            using SSPSC = Field<15, 1>;    // Spread spectrum prescaler
            using PGPSC = Field<12, 3>;    // pulse generator prescaler
            using MCV = Field<5, 3>;    // Max count value
            using IODEF = Field<4, 1>;    // I/O Default mode
            using SYNCPOL = Field<3, 1>;    // Synchronization pin polarity
            using AM = Field<2, 1>;    // Acquisition mode
            using START = Field<1, 1>;    // Start a new acquisition
            using TSCE = Field<0, 1>;    // Touch sensing controller enable
        };

        // interrupt enable register
        struct IER : public Register<0x40024004> {
            using MCEIE = Field<1, 1>;    // Max count error interrupt enable
            using EOAIE = Field<0, 1>;    // End of acquisition interrupt enable
        };

        // interrupt clear register
        struct ICR : public Register<0x40024008> {
            using MCEIC = Field<1, 1>;    // Max count error interrupt clear
            using EOAIC = Field<0, 1>;    // End of acquisition interrupt clear
        };

        // interrupt status register
        struct ISR : public Register<0x4002400c> {
            using MCEF = Field<1, 1>;    // Max count error flag
            using EOAF = Field<0, 1>;    // End of acquisition flag
        };

        // I/O hysteresis control register
        struct IOHCR : public Register<0x40024010> {
            using G6_IO4 = Field<23, 1>;    // G6_IO4 Schmitt trigger hysteresis mode
            using G6_IO3 = Field<22, 1>;    // G6_IO3 Schmitt trigger hysteresis mode
            using G6_IO2 = Field<21, 1>;    // G6_IO2 Schmitt trigger hysteresis mode
            using G6_IO1 = Field<20, 1>;    // G6_IO1 Schmitt trigger hysteresis mode
            using G5_IO4 = Field<19, 1>;    // G5_IO4 Schmitt trigger hysteresis mode
            using G5_IO3 = Field<18, 1>;    // G5_IO3 Schmitt trigger hysteresis mode
            using G5_IO2 = Field<17, 1>;    // G5_IO2 Schmitt trigger hysteresis mode
            using G5_IO1 = Field<16, 1>;    // G5_IO1 Schmitt trigger hysteresis mode
            using G4_IO4 = Field<15, 1>;    // G4_IO4 Schmitt trigger hysteresis mode
            using G4_IO3 = Field<14, 1>;    // G4_IO3 Schmitt trigger hysteresis mode
            using G4_IO2 = Field<13, 1>;    // G4_IO2 Schmitt trigger hysteresis mode
            using G4_IO1 = Field<12, 1>;    // G4_IO1 Schmitt trigger hysteresis mode
            using G3_IO4 = Field<11, 1>;    // G3_IO4 Schmitt trigger hysteresis mode
            using G3_IO3 = Field<10, 1>;    // G3_IO3 Schmitt trigger hysteresis mode
            using G3_IO2 = Field<9, 1>;    // G3_IO2 Schmitt trigger hysteresis mode
            using G3_IO1 = Field<8, 1>;    // G3_IO1 Schmitt trigger hysteresis mode
            using G2_IO4 = Field<7, 1>;    // G2_IO4 Schmitt trigger hysteresis mode
            using G2_IO3 = Field<6, 1>;    // G2_IO3 Schmitt trigger hysteresis mode
            using G2_IO2 = Field<5, 1>;    // G2_IO2 Schmitt trigger hysteresis mode
            using G2_IO1 = Field<4, 1>;    // G2_IO1 Schmitt trigger hysteresis mode
            using G1_IO4 = Field<3, 1>;    // G1_IO4 Schmitt trigger hysteresis mode
            using G1_IO3 = Field<2, 1>;    // G1_IO3 Schmitt trigger hysteresis mode
            using G1_IO2 = Field<1, 1>;    // G1_IO2 Schmitt trigger hysteresis mode
            using G1_IO1 = Field<0, 1>;    // G1_IO1 Schmitt trigger hysteresis mode
        };

        // I/O analog switch control register
        struct IOASCR : public Register<0x40024018> {
            using G6_IO4 = Field<23, 1>;    // G6_IO4 analog switch enable
            using G6_IO3 = Field<22, 1>;    // G6_IO3 analog switch enable
            using G6_IO2 = Field<21, 1>;    // G6_IO2 analog switch enable
            using G6_IO1 = Field<20, 1>;    // G6_IO1 analog switch enable
            using G5_IO4 = Field<19, 1>;    // G5_IO4 analog switch enable
            using G5_IO3 = Field<18, 1>;    // G5_IO3 analog switch enable
            using G5_IO2 = Field<17, 1>;    // G5_IO2 analog switch enable
            using G5_IO1 = Field<16, 1>;    // G5_IO1 analog switch enable
            using G4_IO4 = Field<15, 1>;    // G4_IO4 analog switch enable
            using G4_IO3 = Field<14, 1>;    // G4_IO3 analog switch enable
            using G4_IO2 = Field<13, 1>;    // G4_IO2 analog switch enable
            using G4_IO1 = Field<12, 1>;    // G4_IO1 analog switch enable
            using G3_IO4 = Field<11, 1>;    // G3_IO4 analog switch enable
            using G3_IO3 = Field<10, 1>;    // G3_IO3 analog switch enable
            using G3_IO2 = Field<9, 1>;    // G3_IO2 analog switch enable
            using G3_IO1 = Field<8, 1>;    // G3_IO1 analog switch enable
            using G2_IO4 = Field<7, 1>;    // G2_IO4 analog switch enable
            using G2_IO3 = Field<6, 1>;    // G2_IO3 analog switch enable
            using G2_IO2 = Field<5, 1>;    // G2_IO2 analog switch enable
            using G2_IO1 = Field<4, 1>;    // G2_IO1 analog switch enable
            using G1_IO4 = Field<3, 1>;    // G1_IO4 analog switch enable
            using G1_IO3 = Field<2, 1>;    // G1_IO3 analog switch enable
            using G1_IO2 = Field<1, 1>;    // G1_IO2 analog switch enable
            using G1_IO1 = Field<0, 1>;    // G1_IO1 analog switch enable
        };

        // I/O sampling control register
        struct IOSCR : public Register<0x40024020> {
            using G6_IO4 = Field<23, 1>;    // G6_IO4 sampling mode
            using G6_IO3 = Field<22, 1>;    // G6_IO3 sampling mode
            using G6_IO2 = Field<21, 1>;    // G6_IO2 sampling mode
            using G6_IO1 = Field<20, 1>;    // G6_IO1 sampling mode
            using G5_IO4 = Field<19, 1>;    // G5_IO4 sampling mode
            using G5_IO3 = Field<18, 1>;    // G5_IO3 sampling mode
            using G5_IO2 = Field<17, 1>;    // G5_IO2 sampling mode
            using G5_IO1 = Field<16, 1>;    // G5_IO1 sampling mode
            using G4_IO4 = Field<15, 1>;    // G4_IO4 sampling mode
            using G4_IO3 = Field<14, 1>;    // G4_IO3 sampling mode
            using G4_IO2 = Field<13, 1>;    // G4_IO2 sampling mode
            using G4_IO1 = Field<12, 1>;    // G4_IO1 sampling mode
            using G3_IO4 = Field<11, 1>;    // G3_IO4 sampling mode
            using G3_IO3 = Field<10, 1>;    // G3_IO3 sampling mode
            using G3_IO2 = Field<9, 1>;    // G3_IO2 sampling mode
            using G3_IO1 = Field<8, 1>;    // G3_IO1 sampling mode
            using G2_IO4 = Field<7, 1>;    // G2_IO4 sampling mode
            using G2_IO3 = Field<6, 1>;    // G2_IO3 sampling mode
            using G2_IO2 = Field<5, 1>;    // G2_IO2 sampling mode
            using G2_IO1 = Field<4, 1>;    // G2_IO1 sampling mode
            using G1_IO4 = Field<3, 1>;    // G1_IO4 sampling mode
            using G1_IO3 = Field<2, 1>;    // G1_IO3 sampling mode
            using G1_IO2 = Field<1, 1>;    // G1_IO2 sampling mode
            using G1_IO1 = Field<0, 1>;    // G1_IO1 sampling mode
        };

        // I/O channel control register
        struct IOCCR : public Register<0x40024028> {
            using G6_IO4 = Field<23, 1>;    // G6_IO4 channel mode
            using G6_IO3 = Field<22, 1>;    // G6_IO3 channel mode
            using G6_IO2 = Field<21, 1>;    // G6_IO2 channel mode
            using G6_IO1 = Field<20, 1>;    // G6_IO1 channel mode
            using G5_IO4 = Field<19, 1>;    // G5_IO4 channel mode
            using G5_IO3 = Field<18, 1>;    // G5_IO3 channel mode
            using G5_IO2 = Field<17, 1>;    // G5_IO2 channel mode
            using G5_IO1 = Field<16, 1>;    // G5_IO1 channel mode
            using G4_IO4 = Field<15, 1>;    // G4_IO4 channel mode
            using G4_IO3 = Field<14, 1>;    // G4_IO3 channel mode
            using G4_IO2 = Field<13, 1>;    // G4_IO2 channel mode
            using G4_IO1 = Field<12, 1>;    // G4_IO1 channel mode
            using G3_IO4 = Field<11, 1>;    // G3_IO4 channel mode
            using G3_IO3 = Field<10, 1>;    // G3_IO3 channel mode
            using G3_IO2 = Field<9, 1>;    // G3_IO2 channel mode
            using G3_IO1 = Field<8, 1>;    // G3_IO1 channel mode
            using G2_IO4 = Field<7, 1>;    // G2_IO4 channel mode
            using G2_IO3 = Field<6, 1>;    // G2_IO3 channel mode
            using G2_IO2 = Field<5, 1>;    // G2_IO2 channel mode
            using G2_IO1 = Field<4, 1>;    // G2_IO1 channel mode
            using G1_IO4 = Field<3, 1>;    // G1_IO4 channel mode
            using G1_IO3 = Field<2, 1>;    // G1_IO3 channel mode
            using G1_IO2 = Field<1, 1>;    // G1_IO2 channel mode
            using G1_IO1 = Field<0, 1>;    // G1_IO1 channel mode
        };

        // I/O group control status register
        struct IOGCSR : public Register<0x40024030> {
            using G8S = Field<23, 1>;    // Analog I/O group x status
            using G7S = Field<22, 1>;    // Analog I/O group x status
            using G6S = Field<21, 1>;    // Analog I/O group x status
            using G5S = Field<20, 1>;    // Analog I/O group x status
            using G4S = Field<19, 1>;    // Analog I/O group x status
            using G3S = Field<18, 1>;    // Analog I/O group x status
            using G2S = Field<17, 1>;    // Analog I/O group x status
            using G1S = Field<16, 1>;    // Analog I/O group x status
            using G8E = Field<7, 1>;    // Analog I/O group x enable
            using G7E = Field<6, 1>;    // Analog I/O group x enable
            using G6E = Field<5, 1>;    // Analog I/O group x enable
            using G5E = Field<4, 1>;    // Analog I/O group x enable
            using G4E = Field<3, 1>;    // Analog I/O group x enable
            using G3E = Field<2, 1>;    // Analog I/O group x enable
            using G2E = Field<1, 1>;    // Analog I/O group x enable
            using G1E = Field<0, 1>;    // Analog I/O group x enable
        };

        // I/O group x counter register
        struct IOG1CR : public RegisterReadOnly<0x40024034> {
            using CNT = Field<0, 14>;    // Counter value
        };

        // I/O group x counter register
        struct IOG2CR : public RegisterReadOnly<0x40024038> {
            using CNT = Field<0, 14>;    // Counter value
        };

        // I/O group x counter register
        struct IOG3CR : public RegisterReadOnly<0x4002403c> {
            using CNT = Field<0, 14>;    // Counter value
        };

        // I/O group x counter register
        struct IOG4CR : public RegisterReadOnly<0x40024040> {
            using CNT = Field<0, 14>;    // Counter value
        };

        // I/O group x counter register
        struct IOG5CR : public RegisterReadOnly<0x40024044> {
            using CNT = Field<0, 14>;    // Counter value
        };

        // I/O group x counter register
        struct IOG6CR : public RegisterReadOnly<0x40024048> {
            using CNT = Field<0, 14>;    // Counter value
        };

    };

    // HDMI-CEC controller
    struct CEC {
        // control register
        struct CR : public Register<0x40007800> {
            using TXEOM = Field<2, 1>;    // Tx End Of Message
            using TXSOM = Field<1, 1>;    // Tx start of message
            using CECEN = Field<0, 1>;    // CEC Enable
        };

        // configuration register
        struct CFGR : public Register<0x40007804> {
            using LBPEGEN = Field<11, 1>;    // Generate Error-Bit on Long Bit Period Error
            using BREGEN = Field<10, 1>;    // Generate error-bit on bit rising error
            using BRESTP = Field<9, 1>;    // Rx-stop on bit rising error
            using RXTOL = Field<8, 1>;    // Rx-Tolerance
            using SFT = Field<5, 3>;    // Signal Free Time
            using LSTN = Field<4, 1>;    // Listen mode
            using OAR = Field<0, 4>;    // Own Address
        };

        // Tx data register
        struct TXDR : public RegisterWriteOnly<0x40007808> {
            using TXD = Field<0, 8>;    // Tx Data register
        };

        // Rx Data Register
        struct RXDR : public RegisterReadOnly<0x4000780c> {
            using Field = Field<0, 8>;    // CEC Rx Data Register
        };

        // Interrupt and Status Register
        struct ISR : public Register<0x40007810> {
            using TXACKE = Field<12, 1>;    // Tx-Missing acknowledge error
            using TXERR = Field<11, 1>;    // Tx-Error
            using TXUDR = Field<10, 1>;    // Tx-Buffer Underrun
            using TXEND = Field<9, 1>;    // End of Transmission
            using TXBR = Field<8, 1>;    // Tx-Byte Request
            using ARBLST = Field<7, 1>;    // Arbitration Lost
            using RXACKE = Field<6, 1>;    // Rx-Missing Acknowledge
            using LBPE = Field<5, 1>;    // Rx-Long Bit Period Error
            using SBPE = Field<4, 1>;    // Rx-Short Bit period error
            using BRE = Field<3, 1>;    // Rx-Bit rising error
            using RXOVR = Field<2, 1>;    // Rx-Overrun
            using RXEND = Field<1, 1>;    // End Of Reception
            using RXBR = Field<0, 1>;    // Rx-Byte Received
        };

        // interrupt enable register
        struct IER : public Register<0x40007814> {
            using TXACKIE = Field<12, 1>;    // Tx-Missing Acknowledge Error Interrupt Enable
            using TXERRIE = Field<11, 1>;    // Tx-Error Interrupt Enable
            using TXUDRIE = Field<10, 1>;    // Tx-Underrun interrupt enable
            using TXENDIE = Field<9, 1>;    // Tx-End of message interrupt enable
            using TXBRIE = Field<8, 1>;    // Tx-Byte Request Interrupt Enable
            using ARBLSTIE = Field<7, 1>;    // Arbitration Lost Interrupt Enable
            using RXACKIE = Field<6, 1>;    // Rx-Missing Acknowledge Error Interrupt Enable
            using LBPEIE = Field<5, 1>;    // Long Bit Period Error Interrupt Enable
            using SBPEIE = Field<4, 1>;    // Short Bit Period Error Interrupt Enable
            using BREIE = Field<3, 1>;    // Bit Rising Error Interrupt Enable
            using RXOVRIE = Field<2, 1>;    // Rx-Buffer Overrun Interrupt Enable
            using RXENDIE = Field<1, 1>;    // End Of Reception Interrupt Enable
            using RXBRIE = Field<0, 1>;    // Rx-Byte Received Interrupt Enable
        };

    };

    // Flash
    struct Flash {
        // Flash access control register
        struct ACR : public Register<0x40022000> {
            using LATENCY = Field<0, 3>;    // LATENCY
            using PRFTBE = Field<4, 1>;    // PRFTBE
            using PRFTBS = Field<5, 1>;    // PRFTBS
        };

        // Flash key register
        struct KEYR : public RegisterWriteOnly<0x40022004> {
            using FKEYR = Field<0, 32>;    // Flash Key
        };

        // Flash option key register
        struct OPTKEYR : public RegisterWriteOnly<0x40022008> {
            using Field = Field<0, 32>;    // Option byte key
        };

        // Flash status register
        struct SR : public Register<0x4002200c> {
            using EOP = Field<5, 1>;    // End of operation
            using WRPRT = Field<4, 1>;    // Write protection error
            using PGERR = Field<2, 1>;    // Programming error
            using BSY = Field<0, 1>;    // Busy
        };

        // Flash control register
        struct CR : public Register<0x40022010> {
            using FORCE_OPTLOAD = Field<13, 1>;    // Force option byte loading
            using EOPIE = Field<12, 1>;    // End of operation interrupt enable
            using ERRIE = Field<10, 1>;    // Error interrupt enable
            using OPTWRE = Field<9, 1>;    // Option bytes write enable
            using LOCK = Field<7, 1>;    // Lock
            using STRT = Field<6, 1>;    // Start
            using OPTER = Field<5, 1>;    // Option byte erase
            using OPTPG = Field<4, 1>;    // Option byte programming
            using MER = Field<2, 1>;    // Mass erase
            using PER = Field<1, 1>;    // Page erase
            using PG = Field<0, 1>;    // Programming
        };

        // Flash address register
        struct AR : public RegisterWriteOnly<0x40022014> {
            using FAR = Field<0, 32>;    // Flash address
        };

        // Option byte register
        struct OBR : public RegisterReadOnly<0x4002201c> {
            using OPTERR = Field<0, 1>;    // Option byte error
            using RDPRT = Field<1, 2>;    // Read protection level status
            using WDG_SW = Field<8, 1>;    // WDG_SW
            using nRST_STOP = Field<9, 1>;    // nRST_STOP
            using nRST_STDBY = Field<10, 1>;    // nRST_STDBY
            using nBOOT0 = Field<11, 1>;    // nBOOT0
            using nBOOT1 = Field<12, 1>;    // BOOT1
            using VDDA_MONITOR = Field<13, 1>;    // VDDA_MONITOR
            using RAM_PARITY_CHECK = Field<14, 0>;    // RAM_PARITY_CHECK
            using BOOT_SEL = Field<15, 1>;    // BOOT_SEL
            using Data0 = Field<16, 8>;    // Data0
            using Data1 = Field<24, 8>;    // Data1
        };

        // Write protection register
        struct WRPR : public RegisterReadOnly<0x40022020> {
            using WRP = Field<0, 32>;    // Write protect
        };

    };

    // Debug support
    struct DBGMCU {
        // MCU Device ID Code Register
        struct IDCODE : public RegisterReadOnly<0x40015800> {
            using DEV_ID = Field<0, 12>;    // Device Identifier
            using DIV_ID = Field<12, 4>;    // Division Identifier
            using REV_ID = Field<16, 16>;    // Revision Identifier
        };

        // Debug MCU Configuration Register
        struct CR : public Register<0x40015804> {
            using DBG_STOP = Field<1, 1>;    // Debug Stop Mode
            using DBG_STANDBY = Field<2, 1>;    // Debug Standby Mode
        };

        // Debug MCU APB1 freeze register
        struct APB1_FZ : public Register<0x40015808> {
            using DBG_TIM2_STOP = Field<0, 1>;    // TIM2 counter stopped when core is halted
            using DBG_TIM3_STOP = Field<1, 1>;    // TIM3 counter stopped when core is halted
            using TIM3_counter_stopped_when_core_is_halted = Field<4, 1>;    // TIM6 counter stopped when core is halted
            using DBG_TIM7_STOP = Field<5, 1>;    // TIM7 counter stopped when core is halted
            using DBG_TIM14_STOP = Field<8, 1>;    // TIM14 counter stopped when core is halted
            using DBG_RTC_STOP = Field<10, 1>;    // Debug RTC stopped when core is halted
            using DBG_WWDG_STOP = Field<11, 1>;    // Debug window watchdog stopped when core is halted
            using DBG_IWDG_STOP = Field<12, 1>;    // Debug independent watchdog stopped when core is halted
            using DBG_I2C1_SMBUS_TIMEOUT = Field<21, 1>;    // SMBUS timeout mode stopped when core is halted
            using DBG_CAN_STOP = Field<25, 1>;    // CAN stopped when core is halted
        };

        // Debug MCU APB2 freeze register
        struct APB2_FZ : public Register<0x4001580c> {
            using DBG_TIM1_STOP = Field<11, 1>;    // TIM1 counter stopped when core is halted
            using DBG_TIM15_STOP = Field<16, 1>;    // TIM15 counter stopped when core is halted
            using DBG_TIM16_STOP = Field<17, 1>;    // TIM16 counter stopped when core is halted
            using DBG_TIM17_STOP = Field<18, 1>;    // TIM17 counter stopped when core is halted
        };

    };

    // Universal serial bus full-speed device interface
    struct USB {
        // endpoint 0 register
        struct EP0R : public Register<0x40005c00> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 1 register
        struct EP1R : public Register<0x40005c04> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 2 register
        struct EP2R : public Register<0x40005c08> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 3 register
        struct EP3R : public Register<0x40005c0c> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 4 register
        struct EP4R : public Register<0x40005c10> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 5 register
        struct EP5R : public Register<0x40005c14> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 6 register
        struct EP6R : public Register<0x40005c18> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // endpoint 7 register
        struct EP7R : public Register<0x40005c1c> {
            using EA = Field<0, 4>;    // Endpoint address
            using STAT_TX = Field<4, 2>;    // Status bits, for transmission transfers
            using DTOG_TX = Field<6, 1>;    // Data Toggle, for transmission transfers
            using CTR_TX = Field<7, 1>;    // Correct Transfer for transmission
            using EP_KIND = Field<8, 1>;    // Endpoint kind
            using EP_TYPE = Field<9, 2>;    // Endpoint type
            using SETUP = Field<11, 1>;    // Setup transaction completed
            using STAT_RX = Field<12, 2>;    // Status bits, for reception transfers
            using DTOG_RX = Field<14, 1>;    // Data Toggle, for reception transfers
            using CTR_RX = Field<15, 1>;    // Correct transfer for reception
        };

        // control register
        struct CNTR : public Register<0x40005c40> {
            using FRES = Field<0, 1>;    // Force USB Reset
            using PDWN = Field<1, 1>;    // Power down
            using LPMODE = Field<2, 1>;    // Low-power mode
            using FSUSP = Field<3, 1>;    // Force suspend
            using RESUME = Field<4, 1>;    // Resume request
            using L1RESUME = Field<5, 1>;    // LPM L1 Resume request
            using L1REQM = Field<7, 1>;    // LPM L1 state request interrupt mask
            using ESOFM = Field<8, 1>;    // Expected start of frame interrupt mask
            using SOFM = Field<9, 1>;    // Start of frame interrupt mask
            using RESETM = Field<10, 1>;    // USB reset interrupt mask
            using SUSPM = Field<11, 1>;    // Suspend mode interrupt mask
            using WKUPM = Field<12, 1>;    // Wakeup interrupt mask
            using ERRM = Field<13, 1>;    // Error interrupt mask
            using PMAOVRM = Field<14, 1>;    // Packet memory area over / underrun interrupt mask
            using CTRM = Field<15, 1>;    // Correct transfer interrupt mask
        };

        // interrupt status register
        struct ISTR : public Register<0x40005c44> {
            using EP_ID = Field<0, 4>;    // Endpoint Identifier
            using DIR = Field<4, 1>;    // Direction of transaction
            using L1REQ = Field<7, 1>;    // LPM L1 state request
            using ESOF = Field<8, 1>;    // Expected start frame
            using SOF = Field<9, 1>;    // start of frame
            using RESET = Field<10, 1>;    // reset request
            using SUSP = Field<11, 1>;    // Suspend mode request
            using WKUP = Field<12, 1>;    // Wakeup
            using ERR = Field<13, 1>;    // Error
            using PMAOVR = Field<14, 1>;    // Packet memory area over / underrun
            using CTR = Field<15, 1>;    // Correct transfer
        };

        // frame number register
        struct FNR : public RegisterReadOnly<0x40005c48> {
            using FN = Field<0, 11>;    // Frame number
            using LSOF = Field<11, 2>;    // Lost SOF
            using LCK = Field<13, 1>;    // Locked
            using RXDM = Field<14, 1>;    // Receive data - line status
            using RXDP = Field<15, 1>;    // Receive data + line status
        };

        // device address
        struct DADDR : public Register<0x40005c4c> {
            using ADD = Field<0, 7>;    // Device address
            using EF = Field<7, 1>;    // Enable function
        };

        // Buffer table address
        struct BTABLE : public Register<0x40005c50> {
            using Field = Field<3, 13>;    // Buffer table
        };

        // LPM control and status register
        struct LPMCSR : public Register<0x40005c54> {
            using LPMEN = Field<0, 1>;    // LPM support enable
            using LPMACK = Field<1, 1>;    // LPM Token acknowledge enable
            using REMWAKE = Field<3, 1>;    // bRemoteWake value
            using BESL = Field<4, 4>;    // BESL value
        };

        // Battery charging detector
        struct BCDR : public Register<0x40005c58> {
            using BCDEN = Field<0, 1>;    // Battery charging detector (BCD) enable
            using DCDEN = Field<1, 1>;    // Data contact detection (DCD) mode enable
            using PDEN = Field<2, 1>;    // Primary detection (PD) mode enable
            using SDEN = Field<3, 1>;    // Secondary detection (SD) mode enable
            using DCDET = Field<4, 1>;    // Data contact detection (DCD) status
            using PDET = Field<5, 1>;    // Primary detection (PD) status
            using SDET = Field<6, 1>;    // Secondary detection (SD) status
            using PS2DET = Field<7, 1>;    // DM pull-up detection status
            using DPPU = Field<15, 1>;    // DP pull-up control
        };

    };

    // Clock recovery system
    struct CRS {
        // control register
        struct CR : public Register<0x40006c00> {
            using TRIM = Field<8, 6>;    // HSI48 oscillator smooth trimming
            using SWSYNC = Field<7, 1>;    // Generate software SYNC event
            using AUTOTRIMEN = Field<6, 1>;    // Automatic trimming enable
            using CEN = Field<5, 1>;    // Frequency error counter enable
            using ESYNCIE = Field<3, 1>;    // Expected SYNC interrupt enable
            using ERRIE = Field<2, 1>;    // Synchronization or trimming error interrupt enable
            using SYNCWARNIE = Field<1, 1>;    // SYNC warning interrupt enable
            using SYNCOKIE = Field<0, 1>;    // SYNC event OK interrupt enable
        };

        // configuration register
        struct CFGR : public Register<0x40006c04> {
            using SYNCPOL = Field<31, 1>;    // SYNC polarity selection
            using SYNCSRC = Field<28, 2>;    // SYNC signal source selection
            using SYNCDIV = Field<24, 3>;    // SYNC divider
            using FELIM = Field<16, 8>;    // Frequency error limit
            using RELOAD = Field<0, 16>;    // Counter reload value
        };

        // interrupt and status register
        struct ISR : public RegisterReadOnly<0x40006c08> {
            using FECAP = Field<16, 16>;    // Frequency error capture
            using FEDIR = Field<15, 1>;    // Frequency error direction
            using TRIMOVF = Field<10, 1>;    // Trimming overflow or underflow
            using SYNCMISS = Field<9, 1>;    // SYNC missed
            using SYNCERR = Field<8, 1>;    // SYNC error
            using ESYNCF = Field<3, 1>;    // Expected SYNC flag
            using ERRF = Field<2, 1>;    // Error flag
            using SYNCWARNF = Field<1, 1>;    // SYNC warning flag
            using SYNCOKF = Field<0, 1>;    // SYNC event OK flag
        };

        // interrupt flag clear register
        struct ICR : public Register<0x40006c0c> {
            using ESYNCC = Field<3, 1>;    // Expected SYNC clear flag
            using ERRC = Field<2, 1>;    // Error clear flag
            using SYNCWARNC = Field<1, 1>;    // SYNC warning clear flag
            using SYNCOKC = Field<0, 1>;    // SYNC event OK clear flag
        };

    };

    // Controller area network
    struct CAN {
        // CAN_MCR
        struct CAN_MCR : public Register<0x40006400> {
            using DBF = Field<16, 1>;    // DBF
            using RESET = Field<15, 1>;    // RESET
            using TTCM = Field<7, 1>;    // TTCM
            using ABOM = Field<6, 1>;    // ABOM
            using AWUM = Field<5, 1>;    // AWUM
            using NART = Field<4, 1>;    // NART
            using RFLM = Field<3, 1>;    // RFLM
            using TXFP = Field<2, 1>;    // TXFP
            using SLEEP = Field<1, 1>;    // SLEEP
            using INRQ = Field<0, 1>;    // INRQ
        };

        // CAN_MSR
        struct CAN_MSR : public Register<0x40006404> {
            using RX = Field<11, 1>;    // RX
            using SAMP = Field<10, 1>;    // SAMP
            using RXM = Field<9, 1>;    // RXM
            using TXM = Field<8, 1>;    // TXM
            using SLAKI = Field<4, 1>;    // SLAKI
            using WKUI = Field<3, 1>;    // WKUI
            using ERRI = Field<2, 1>;    // ERRI
            using SLAK = Field<1, 1>;    // SLAK
            using INAK = Field<0, 1>;    // INAK
        };

        // CAN_TSR
        struct CAN_TSR : public Register<0x40006408> {
            using LOW2 = Field<31, 1>;    // Lowest priority flag for mailbox 2
            using LOW1 = Field<30, 1>;    // Lowest priority flag for mailbox 1
            using LOW0 = Field<29, 1>;    // Lowest priority flag for mailbox 0
            using TME2 = Field<28, 1>;    // Lowest priority flag for mailbox 2
            using TME1 = Field<27, 1>;    // Lowest priority flag for mailbox 1
            using TME0 = Field<26, 1>;    // Lowest priority flag for mailbox 0
            using CODE = Field<24, 2>;    // CODE
            using ABRQ2 = Field<23, 1>;    // ABRQ2
            using TERR2 = Field<19, 1>;    // TERR2
            using ALST2 = Field<18, 1>;    // ALST2
            using TXOK2 = Field<17, 1>;    // TXOK2
            using RQCP2 = Field<16, 1>;    // RQCP2
            using ABRQ1 = Field<15, 1>;    // ABRQ1
            using TERR1 = Field<11, 1>;    // TERR1
            using ALST1 = Field<10, 1>;    // ALST1
            using TXOK1 = Field<9, 1>;    // TXOK1
            using RQCP1 = Field<8, 1>;    // RQCP1
            using ABRQ0 = Field<7, 1>;    // ABRQ0
            using TERR0 = Field<3, 1>;    // TERR0
            using ALST0 = Field<2, 1>;    // ALST0
            using TXOK0 = Field<1, 1>;    // TXOK0
            using RQCP0 = Field<0, 1>;    // RQCP0
        };

        // CAN_RF0R
        struct CAN_RF0R : public Register<0x4000640c> {
            using RFOM0 = Field<5, 1>;    // RFOM0
            using FOVR0 = Field<4, 1>;    // FOVR0
            using FULL0 = Field<3, 1>;    // FULL0
            using FMP0 = Field<0, 2>;    // FMP0
        };

        // CAN_RF1R
        struct CAN_RF1R : public Register<0x40006410> {
            using RFOM1 = Field<5, 1>;    // RFOM1
            using FOVR1 = Field<4, 1>;    // FOVR1
            using FULL1 = Field<3, 1>;    // FULL1
            using FMP1 = Field<0, 2>;    // FMP1
        };

        // CAN_IER
        struct CAN_IER : public Register<0x40006414> {
            using SLKIE = Field<17, 1>;    // SLKIE
            using WKUIE = Field<16, 1>;    // WKUIE
            using ERRIE = Field<15, 1>;    // ERRIE
            using LECIE = Field<11, 1>;    // LECIE
            using BOFIE = Field<10, 1>;    // BOFIE
            using EPVIE = Field<9, 1>;    // EPVIE
            using EWGIE = Field<8, 1>;    // EWGIE
            using FOVIE1 = Field<6, 1>;    // FOVIE1
            using FFIE1 = Field<5, 1>;    // FFIE1
            using FMPIE1 = Field<4, 1>;    // FMPIE1
            using FOVIE0 = Field<3, 1>;    // FOVIE0
            using FFIE0 = Field<2, 1>;    // FFIE0
            using FMPIE0 = Field<1, 1>;    // FMPIE0
            using TMEIE = Field<0, 1>;    // TMEIE
        };

        // CAN_ESR
        struct CAN_ESR : public Register<0x40006418> {
            using REC = Field<24, 8>;    // REC
            using TEC = Field<16, 8>;    // TEC
            using LEC = Field<4, 3>;    // LEC
            using BOFF = Field<2, 1>;    // BOFF
            using EPVF = Field<1, 1>;    // EPVF
            using EWGF = Field<0, 1>;    // EWGF
        };

        // CAN BTR
        struct CAN_BTR : public Register<0x4000641c> {
            using SILM = Field<31, 1>;    // SILM
            using LBKM = Field<30, 1>;    // LBKM
            using SJW = Field<24, 2>;    // SJW
            using TS2 = Field<20, 3>;    // TS2
            using TS1 = Field<16, 4>;    // TS1
            using BRP = Field<0, 10>;    // BRP
        };

        // CAN_TI0R
        struct CAN_TI0R : public Register<0x40006580> {
            using STID = Field<21, 11>;    // STID
            using EXID = Field<3, 18>;    // EXID
            using IDE = Field<2, 1>;    // IDE
            using RTR = Field<1, 1>;    // RTR
            using TXRQ = Field<0, 1>;    // TXRQ
        };

        // CAN_TDT0R
        struct CAN_TDT0R : public Register<0x40006584> {
            using TIME = Field<16, 16>;    // TIME
            using TGT = Field<8, 1>;    // TGT
            using DLC = Field<0, 4>;    // DLC
        };

        // CAN_TDL0R
        struct CAN_TDL0R : public Register<0x40006588> {
            using DATA3 = Field<24, 8>;    // DATA3
            using DATA2 = Field<16, 8>;    // DATA2
            using DATA1 = Field<8, 8>;    // DATA1
            using DATA0 = Field<0, 8>;    // DATA0
        };

        // CAN_TDH0R
        struct CAN_TDH0R : public Register<0x4000658c> {
            using DATA7 = Field<24, 8>;    // DATA7
            using DATA6 = Field<16, 8>;    // DATA6
            using DATA5 = Field<8, 8>;    // DATA5
            using DATA4 = Field<0, 8>;    // DATA4
        };

        // CAN_TI1R
        struct CAN_TI1R : public Register<0x40006590> {
            using STID = Field<21, 11>;    // STID
            using EXID = Field<3, 18>;    // EXID
            using IDE = Field<2, 1>;    // IDE
            using RTR = Field<1, 1>;    // RTR
            using TXRQ = Field<0, 1>;    // TXRQ
        };

        // CAN_TDT1R
        struct CAN_TDT1R : public Register<0x40006594> {
            using TIME = Field<16, 16>;    // TIME
            using TGT = Field<8, 1>;    // TGT
            using DLC = Field<0, 4>;    // DLC
        };

        // CAN_TDL1R
        struct CAN_TDL1R : public Register<0x40006598> {
            using DATA3 = Field<24, 8>;    // DATA3
            using DATA2 = Field<16, 8>;    // DATA2
            using DATA1 = Field<8, 8>;    // DATA1
            using DATA0 = Field<0, 8>;    // DATA0
        };

        // CAN_TDH1R
        struct CAN_TDH1R : public Register<0x4000659c> {
            using DATA7 = Field<24, 8>;    // DATA7
            using DATA6 = Field<16, 8>;    // DATA6
            using DATA5 = Field<8, 8>;    // DATA5
            using DATA4 = Field<0, 8>;    // DATA4
        };

        // CAN_TI2R
        struct CAN_TI2R : public Register<0x400065a0> {
            using STID = Field<21, 11>;    // STID
            using EXID = Field<3, 18>;    // EXID
            using IDE = Field<2, 1>;    // IDE
            using RTR = Field<1, 1>;    // RTR
            using TXRQ = Field<0, 1>;    // TXRQ
        };

        // CAN_TDT2R
        struct CAN_TDT2R : public Register<0x400065a4> {
            using TIME = Field<16, 16>;    // TIME
            using TGT = Field<8, 1>;    // TGT
            using DLC = Field<0, 4>;    // DLC
        };

        // CAN_TDL2R
        struct CAN_TDL2R : public Register<0x400065a8> {
            using DATA3 = Field<24, 8>;    // DATA3
            using DATA2 = Field<16, 8>;    // DATA2
            using DATA1 = Field<8, 8>;    // DATA1
            using DATA0 = Field<0, 8>;    // DATA0
        };

        // CAN_TDH2R
        struct CAN_TDH2R : public Register<0x400065ac> {
            using DATA7 = Field<24, 8>;    // DATA7
            using DATA6 = Field<16, 8>;    // DATA6
            using DATA5 = Field<8, 8>;    // DATA5
            using DATA4 = Field<0, 8>;    // DATA4
        };

        // CAN_RI0R
        struct CAN_RI0R : public RegisterReadOnly<0x400065b0> {
            using STID = Field<21, 11>;    // STID
            using EXID = Field<3, 18>;    // EXID
            using IDE = Field<2, 1>;    // IDE
            using RTR = Field<1, 1>;    // RTR
        };

        // CAN_RDT0R
        struct CAN_RDT0R : public RegisterReadOnly<0x400065b4> {
            using TIME = Field<16, 16>;    // TIME
            using FMI = Field<8, 8>;    // FMI
            using DLC = Field<0, 4>;    // DLC
        };

        // CAN_RDL0R
        struct CAN_RDL0R : public RegisterReadOnly<0x400065b8> {
            using DATA3 = Field<24, 8>;    // DATA3
            using DATA2 = Field<16, 8>;    // DATA2
            using DATA1 = Field<8, 8>;    // DATA1
            using DATA0 = Field<0, 8>;    // DATA0
        };

        // CAN_RDH0R
        struct CAN_RDH0R : public RegisterReadOnly<0x400065bc> {
            using DATA7 = Field<24, 8>;    // DATA7
            using DATA6 = Field<16, 8>;    // DATA6
            using DATA5 = Field<8, 8>;    // DATA5
            using DATA4 = Field<0, 8>;    // DATA4
        };

        // CAN_RI1R
        struct CAN_RI1R : public RegisterReadOnly<0x400065c0> {
            using STID = Field<21, 11>;    // STID
            using EXID = Field<3, 18>;    // EXID
            using IDE = Field<2, 1>;    // IDE
            using RTR = Field<1, 1>;    // RTR
        };

        // CAN_RDT1R
        struct CAN_RDT1R : public RegisterReadOnly<0x400065c4> {
            using TIME = Field<16, 16>;    // TIME
            using FMI = Field<8, 8>;    // FMI
            using DLC = Field<0, 4>;    // DLC
        };

        // CAN_RDL1R
        struct CAN_RDL1R : public RegisterReadOnly<0x400065c8> {
            using DATA3 = Field<24, 8>;    // DATA3
            using DATA2 = Field<16, 8>;    // DATA2
            using DATA1 = Field<8, 8>;    // DATA1
            using DATA0 = Field<0, 8>;    // DATA0
        };

        // CAN_RDH1R
        struct CAN_RDH1R : public RegisterReadOnly<0x400065cc> {
            using DATA7 = Field<24, 8>;    // DATA7
            using DATA6 = Field<16, 8>;    // DATA6
            using DATA5 = Field<8, 8>;    // DATA5
            using DATA4 = Field<0, 8>;    // DATA4
        };

        // CAN_FMR
        struct CAN_FMR : public Register<0x40006600> {
            using CAN2SB = Field<8, 6>;    // CAN2SB
            using FINIT = Field<0, 1>;    // FINIT
        };

        // CAN_FM1R
        struct CAN_FM1R : public Register<0x40006604> {
            using FBM0 = Field<0, 1>;    // Filter mode
            using FBM1 = Field<1, 1>;    // Filter mode
            using FBM2 = Field<2, 1>;    // Filter mode
            using FBM3 = Field<3, 1>;    // Filter mode
            using FBM4 = Field<4, 1>;    // Filter mode
            using FBM5 = Field<5, 1>;    // Filter mode
            using FBM6 = Field<6, 1>;    // Filter mode
            using FBM7 = Field<7, 1>;    // Filter mode
            using FBM8 = Field<8, 1>;    // Filter mode
            using FBM9 = Field<9, 1>;    // Filter mode
            using FBM10 = Field<10, 1>;    // Filter mode
            using FBM11 = Field<11, 1>;    // Filter mode
            using FBM12 = Field<12, 1>;    // Filter mode
            using FBM13 = Field<13, 1>;    // Filter mode
            using FBM14 = Field<14, 1>;    // Filter mode
            using FBM15 = Field<15, 1>;    // Filter mode
            using FBM16 = Field<16, 1>;    // Filter mode
            using FBM17 = Field<17, 1>;    // Filter mode
            using FBM18 = Field<18, 1>;    // Filter mode
            using FBM19 = Field<19, 1>;    // Filter mode
            using FBM20 = Field<20, 1>;    // Filter mode
            using FBM21 = Field<21, 1>;    // Filter mode
            using FBM22 = Field<22, 1>;    // Filter mode
            using FBM23 = Field<23, 1>;    // Filter mode
            using FBM24 = Field<24, 1>;    // Filter mode
            using FBM25 = Field<25, 1>;    // Filter mode
            using FBM26 = Field<26, 1>;    // Filter mode
            using FBM27 = Field<27, 1>;    // Filter mode
        };

        // CAN_FS1R
        struct CAN_FS1R : public Register<0x4000660c> {
            using FSC0 = Field<0, 1>;    // Filter scale configuration
            using FSC1 = Field<1, 1>;    // Filter scale configuration
            using FSC2 = Field<2, 1>;    // Filter scale configuration
            using FSC3 = Field<3, 1>;    // Filter scale configuration
            using FSC4 = Field<4, 1>;    // Filter scale configuration
            using FSC5 = Field<5, 1>;    // Filter scale configuration
            using FSC6 = Field<6, 1>;    // Filter scale configuration
            using FSC7 = Field<7, 1>;    // Filter scale configuration
            using FSC8 = Field<8, 1>;    // Filter scale configuration
            using FSC9 = Field<9, 1>;    // Filter scale configuration
            using FSC10 = Field<10, 1>;    // Filter scale configuration
            using FSC11 = Field<11, 1>;    // Filter scale configuration
            using FSC12 = Field<12, 1>;    // Filter scale configuration
            using FSC13 = Field<13, 1>;    // Filter scale configuration
            using FSC14 = Field<14, 1>;    // Filter scale configuration
            using FSC15 = Field<15, 1>;    // Filter scale configuration
            using FSC16 = Field<16, 1>;    // Filter scale configuration
            using FSC17 = Field<17, 1>;    // Filter scale configuration
            using FSC18 = Field<18, 1>;    // Filter scale configuration
            using FSC19 = Field<19, 1>;    // Filter scale configuration
            using FSC20 = Field<20, 1>;    // Filter scale configuration
            using FSC21 = Field<21, 1>;    // Filter scale configuration
            using FSC22 = Field<22, 1>;    // Filter scale configuration
            using FSC23 = Field<23, 1>;    // Filter scale configuration
            using FSC24 = Field<24, 1>;    // Filter scale configuration
            using FSC25 = Field<25, 1>;    // Filter scale configuration
            using FSC26 = Field<26, 1>;    // Filter scale configuration
            using FSC27 = Field<27, 1>;    // Filter scale configuration
        };

        // CAN_FFA1R
        struct CAN_FFA1R : public Register<0x40006614> {
            using FFA0 = Field<0, 1>;    // Filter FIFO assignment for filter 0
            using FFA1 = Field<1, 1>;    // Filter FIFO assignment for filter 1
            using FFA2 = Field<2, 1>;    // Filter FIFO assignment for filter 2
            using FFA3 = Field<3, 1>;    // Filter FIFO assignment for filter 3
            using FFA4 = Field<4, 1>;    // Filter FIFO assignment for filter 4
            using FFA5 = Field<5, 1>;    // Filter FIFO assignment for filter 5
            using FFA6 = Field<6, 1>;    // Filter FIFO assignment for filter 6
            using FFA7 = Field<7, 1>;    // Filter FIFO assignment for filter 7
            using FFA8 = Field<8, 1>;    // Filter FIFO assignment for filter 8
            using FFA9 = Field<9, 1>;    // Filter FIFO assignment for filter 9
            using FFA10 = Field<10, 1>;    // Filter FIFO assignment for filter 10
            using FFA11 = Field<11, 1>;    // Filter FIFO assignment for filter 11
            using FFA12 = Field<12, 1>;    // Filter FIFO assignment for filter 12
            using FFA13 = Field<13, 1>;    // Filter FIFO assignment for filter 13
            using FFA14 = Field<14, 1>;    // Filter FIFO assignment for filter 14
            using FFA15 = Field<15, 1>;    // Filter FIFO assignment for filter 15
            using FFA16 = Field<16, 1>;    // Filter FIFO assignment for filter 16
            using FFA17 = Field<17, 1>;    // Filter FIFO assignment for filter 17
            using FFA18 = Field<18, 1>;    // Filter FIFO assignment for filter 18
            using FFA19 = Field<19, 1>;    // Filter FIFO assignment for filter 19
            using FFA20 = Field<20, 1>;    // Filter FIFO assignment for filter 20
            using FFA21 = Field<21, 1>;    // Filter FIFO assignment for filter 21
            using FFA22 = Field<22, 1>;    // Filter FIFO assignment for filter 22
            using FFA23 = Field<23, 1>;    // Filter FIFO assignment for filter 23
            using FFA24 = Field<24, 1>;    // Filter FIFO assignment for filter 24
            using FFA25 = Field<25, 1>;    // Filter FIFO assignment for filter 25
            using FFA26 = Field<26, 1>;    // Filter FIFO assignment for filter 26
            using FFA27 = Field<27, 1>;    // Filter FIFO assignment for filter 27
        };

        // CAN_FA1R
        struct CAN_FA1R : public Register<0x4000661c> {
            using FACT0 = Field<0, 1>;    // Filter active
            using FACT1 = Field<1, 1>;    // Filter active
            using FACT2 = Field<2, 1>;    // Filter active
            using FACT3 = Field<3, 1>;    // Filter active
            using FACT4 = Field<4, 1>;    // Filter active
            using FACT5 = Field<5, 1>;    // Filter active
            using FACT6 = Field<6, 1>;    // Filter active
            using FACT7 = Field<7, 1>;    // Filter active
            using FACT8 = Field<8, 1>;    // Filter active
            using FACT9 = Field<9, 1>;    // Filter active
            using FACT10 = Field<10, 1>;    // Filter active
            using FACT11 = Field<11, 1>;    // Filter active
            using FACT12 = Field<12, 1>;    // Filter active
            using FACT13 = Field<13, 1>;    // Filter active
            using FACT14 = Field<14, 1>;    // Filter active
            using FACT15 = Field<15, 1>;    // Filter active
            using FACT16 = Field<16, 1>;    // Filter active
            using FACT17 = Field<17, 1>;    // Filter active
            using FACT18 = Field<18, 1>;    // Filter active
            using FACT19 = Field<19, 1>;    // Filter active
            using FACT20 = Field<20, 1>;    // Filter active
            using FACT21 = Field<21, 1>;    // Filter active
            using FACT22 = Field<22, 1>;    // Filter active
            using FACT23 = Field<23, 1>;    // Filter active
            using FACT24 = Field<24, 1>;    // Filter active
            using FACT25 = Field<25, 1>;    // Filter active
            using FACT26 = Field<26, 1>;    // Filter active
            using FACT27 = Field<27, 1>;    // Filter active
        };

        // Filter bank 0 register 1
        struct F0R1 : public Register<0x40006640> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 0 register 2
        struct F0R2 : public Register<0x40006644> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 1 register 1
        struct F1R1 : public Register<0x40006648> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 1 register 2
        struct F1R2 : public Register<0x4000664c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 2 register 1
        struct F2R1 : public Register<0x40006650> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 2 register 2
        struct F2R2 : public Register<0x40006654> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 3 register 1
        struct F3R1 : public Register<0x40006658> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 3 register 2
        struct F3R2 : public Register<0x4000665c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 4 register 1
        struct F4R1 : public Register<0x40006660> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 4 register 2
        struct F4R2 : public Register<0x40006664> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 5 register 1
        struct F5R1 : public Register<0x40006668> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 5 register 2
        struct F5R2 : public Register<0x4000666c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 6 register 1
        struct F6R1 : public Register<0x40006670> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 6 register 2
        struct F6R2 : public Register<0x40006674> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 7 register 1
        struct F7R1 : public Register<0x40006678> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 7 register 2
        struct F7R2 : public Register<0x4000667c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 8 register 1
        struct F8R1 : public Register<0x40006680> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 8 register 2
        struct F8R2 : public Register<0x40006684> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 9 register 1
        struct F9R1 : public Register<0x40006688> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 9 register 2
        struct F9R2 : public Register<0x4000668c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 10 register 1
        struct F10R1 : public Register<0x40006690> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 10 register 2
        struct F10R2 : public Register<0x40006694> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 11 register 1
        struct F11R1 : public Register<0x40006698> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 11 register 2
        struct F11R2 : public Register<0x4000669c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 4 register 1
        struct F12R1 : public Register<0x400066a0> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 12 register 2
        struct F12R2 : public Register<0x400066a4> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 13 register 1
        struct F13R1 : public Register<0x400066a8> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 13 register 2
        struct F13R2 : public Register<0x400066ac> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 14 register 1
        struct F14R1 : public Register<0x400066b0> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 14 register 2
        struct F14R2 : public Register<0x400066b4> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 15 register 1
        struct F15R1 : public Register<0x400066b8> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 15 register 2
        struct F15R2 : public Register<0x400066bc> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 16 register 1
        struct F16R1 : public Register<0x400066c0> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 16 register 2
        struct F16R2 : public Register<0x400066c4> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 17 register 1
        struct F17R1 : public Register<0x400066c8> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 17 register 2
        struct F17R2 : public Register<0x400066cc> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 18 register 1
        struct F18R1 : public Register<0x400066d0> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 18 register 2
        struct F18R2 : public Register<0x400066d4> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 19 register 1
        struct F19R1 : public Register<0x400066d8> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 19 register 2
        struct F19R2 : public Register<0x400066dc> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 20 register 1
        struct F20R1 : public Register<0x400066e0> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 20 register 2
        struct F20R2 : public Register<0x400066e4> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 21 register 1
        struct F21R1 : public Register<0x400066e8> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 21 register 2
        struct F21R2 : public Register<0x400066ec> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 22 register 1
        struct F22R1 : public Register<0x400066f0> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 22 register 2
        struct F22R2 : public Register<0x400066f4> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 23 register 1
        struct F23R1 : public Register<0x400066f8> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 23 register 2
        struct F23R2 : public Register<0x400066fc> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 24 register 1
        struct F24R1 : public Register<0x40006700> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 24 register 2
        struct F24R2 : public Register<0x40006704> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 25 register 1
        struct F25R1 : public Register<0x40006708> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 25 register 2
        struct F25R2 : public Register<0x4000670c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 26 register 1
        struct F26R1 : public Register<0x40006710> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 26 register 2
        struct F26R2 : public Register<0x40006714> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 27 register 1
        struct F27R1 : public Register<0x40006718> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

        // Filter bank 27 register 2
        struct F27R2 : public Register<0x4000671c> {
            using FB0 = Field<0, 1>;    // Filter bits
            using FB1 = Field<1, 1>;    // Filter bits
            using FB2 = Field<2, 1>;    // Filter bits
            using FB3 = Field<3, 1>;    // Filter bits
            using FB4 = Field<4, 1>;    // Filter bits
            using FB5 = Field<5, 1>;    // Filter bits
            using FB6 = Field<6, 1>;    // Filter bits
            using FB7 = Field<7, 1>;    // Filter bits
            using FB8 = Field<8, 1>;    // Filter bits
            using FB9 = Field<9, 1>;    // Filter bits
            using FB10 = Field<10, 1>;    // Filter bits
            using FB11 = Field<11, 1>;    // Filter bits
            using FB12 = Field<12, 1>;    // Filter bits
            using FB13 = Field<13, 1>;    // Filter bits
            using FB14 = Field<14, 1>;    // Filter bits
            using FB15 = Field<15, 1>;    // Filter bits
            using FB16 = Field<16, 1>;    // Filter bits
            using FB17 = Field<17, 1>;    // Filter bits
            using FB18 = Field<18, 1>;    // Filter bits
            using FB19 = Field<19, 1>;    // Filter bits
            using FB20 = Field<20, 1>;    // Filter bits
            using FB21 = Field<21, 1>;    // Filter bits
            using FB22 = Field<22, 1>;    // Filter bits
            using FB23 = Field<23, 1>;    // Filter bits
            using FB24 = Field<24, 1>;    // Filter bits
            using FB25 = Field<25, 1>;    // Filter bits
            using FB26 = Field<26, 1>;    // Filter bits
            using FB27 = Field<27, 1>;    // Filter bits
            using FB28 = Field<28, 1>;    // Filter bits
            using FB29 = Field<29, 1>;    // Filter bits
            using FB30 = Field<30, 1>;    // Filter bits
            using FB31 = Field<31, 1>;    // Filter bits
        };

    };

    // Digital-to-analog converter
    struct DAC {
        // control register
        struct CR : public Register<0x40007400> {
            using EN1 = Field<0, 1>;    // DAC channel1 enable
            using BOFF1 = Field<1, 1>;    // DAC channel1 output buffer disable
            using TEN1 = Field<2, 1>;    // DAC channel1 trigger enable
            using TSEL1 = Field<3, 3>;    // DAC channel1 trigger selection
            using WAVE1 = Field<6, 2>;    // DAC channel1 noise/triangle wave generation enable
            using MAMP1 = Field<8, 4>;    // DAC channel1 mask/amplitude selector
            using DMAEN1 = Field<12, 1>;    // DAC channel1 DMA enable
            using DMAUDRIE1 = Field<13, 1>;    // DAC channel1 DMA Underrun Interrupt enable
            using EN2 = Field<16, 1>;    // DAC channel2 enable
            using BOFF2 = Field<17, 1>;    // DAC channel2 output buffer disable
            using TEN2 = Field<18, 1>;    // DAC channel2 trigger enable
            using TSEL2 = Field<19, 3>;    // DAC channel2 trigger selection
            using WAVE2 = Field<22, 2>;    // DAC channel2 noise/triangle wave generation enable
            using MAMP2 = Field<24, 4>;    // DAC channel2 mask/amplitude selector
            using DMAEN2 = Field<28, 1>;    // DAC channel2 DMA enable
            using DMAUDRIE2 = Field<29, 1>;    // DAC channel2 DMA underrun interrupt enable
        };

        // software trigger register
        struct SWTRIGR : public RegisterWriteOnly<0x40007404> {
            using SWTRIG1 = Field<0, 1>;    // DAC channel1 software trigger
            using SWTRIG2 = Field<1, 1>;    // DAC channel2 software trigger
        };

        // channel1 12-bit right-aligned data holding register
        struct DHR12R1 : public Register<0x40007408> {
            using DACC1DHR = Field<0, 12>;    // DAC channel1 12-bit right-aligned data
        };

        // channel1 12-bit left aligned data holding register
        struct DHR12L1 : public Register<0x4000740c> {
            using DACC1DHR = Field<4, 12>;    // DAC channel1 12-bit left-aligned data
        };

        // channel1 8-bit right aligned data holding register
        struct DHR8R1 : public Register<0x40007410> {
            using DACC1DHR = Field<0, 8>;    // DAC channel1 8-bit right-aligned data
        };

        // channel1 data output register
        struct DOR1 : public RegisterReadOnly<0x4000742c> {
            using DACC1DOR = Field<0, 12>;    // DAC channel1 data output
        };

        // status register
        struct SR : public Register<0x40007434> {
            using DMAUDR2 = Field<29, 1>;    // DAC channel2 DMA underrun flag
            using DMAUDR1 = Field<13, 1>;    // DAC channel1 DMA underrun flag
        };

        // DAC channel2 12-bit right-aligned data holding register
        struct DHR12R2 : public Register<0x40007414> {
            using DACC2DHR = Field<0, 12>;    // DAC channel2 12-bit right-aligned data
        };

        // DAC channel2 12-bit left-aligned data holding register
        struct DHR12L2 : public Register<0x40007418> {
            using DACC2DHR = Field<4, 12>;    // DAC channel2 12-bit left-aligned data
        };

        // DAC channel2 8-bit right-aligned data holding register
        struct DHR8R2 : public Register<0x4000741c> {
            using DACC2DHR = Field<0, 8>;    // DAC channel2 8-bit right-aligned data
        };

        // DHR12RD
        struct DHR12RD : public Register<0x40007420> {
            using DACC1DHR = Field<0, 12>;    // DAC channel1 12-bit right-aligned data
            using DACC2DHR = Field<16, 12>;    // DAC channel2 12-bit right-aligned data
        };

        // Dual DAC 12-bit left-aligned data holding register
        struct DHR12LD : public Register<0x40007424> {
            using DACC1DHR = Field<4, 12>;    // DAC channel1 12-bit left-aligned data
            using DACC2DHR = Field<20, 12>;    // DAC channel2 12-bit left-aligned data
        };

        // Dual DAC 8-bit right-aligned data holding register
        struct DHR8RD : public Register<0x40007428> {
            using DACC2DHR = Field<8, 8>;    // DAC channel2 8-bit right-aligned data
            using DACC1DHR = Field<0, 8>;    // DAC channel1 8-bit right-aligned data
        };

        // DAC channel2 data output register
        struct DOR2 : public RegisterReadOnly<0x40007430> {
            using DACC2DOR = Field<0, 12>;    // DAC channel2 data output
        };

    };

    // System control block
    struct SCB {
        // CPUID base register
        struct CPUID : public RegisterReadOnly<0xe000ed00> {
            using Revision = Field<0, 4>;    // Revision number
            using PartNo = Field<4, 12>;    // Part number of the processor
            using Constant = Field<16, 4>;    // Reads as 0xF
            using Variant = Field<20, 4>;    // Variant number
            using Implementer = Field<24, 8>;    // Implementer code
        };

        // Interrupt control and state register
        struct ICSR : public Register<0xe000ed04> {
            using VECTACTIVE = Field<0, 6>;    // Active vector
            using VECTPENDING = Field<12, 6>;    // Pending vector
            using ISRPENDING = Field<22, 1>;    // Interrupt pending flag
            using PENDSTCLR = Field<25, 1>;    // SysTick exception clear-pending bit
            using PENDSTSET = Field<26, 1>;    // SysTick exception set-pending bit
            using PENDSVCLR = Field<27, 1>;    // PendSV clear-pending bit
            using PENDSVSET = Field<28, 1>;    // PendSV set-pending bit
            using NMIPENDSET = Field<31, 1>;    // NMI set-pending bit.
        };

        // Application interrupt and reset control register
        struct AIRCR : public Register<0xe000ed0c> {
            using VECTCLRACTIVE = Field<1, 1>;    // VECTCLRACTIVE
            using SYSRESETREQ = Field<2, 1>;    // SYSRESETREQ
            using ENDIANESS = Field<15, 1>;    // ENDIANESS
            using VECTKEYSTAT = Field<16, 16>;    // Register key
        };

        // System control register
        struct SCR : public Register<0xe000ed10> {
            using SLEEPONEXIT = Field<1, 1>;    // SLEEPONEXIT
            using SLEEPDEEP = Field<2, 1>;    // SLEEPDEEP
            using SEVEONPEND = Field<4, 1>;    // Send Event on Pending bit
        };

        // Configuration and control register
        struct CCR : public Register<0xe000ed14> {
            using UNALIGN__TRP = Field<3, 1>;    // UNALIGN_ TRP
            using STKALIGN = Field<9, 1>;    // STKALIGN
        };

        // System handler priority registers
        struct SHPR2 : public Register<0xe000ed1c> {
            using PRI_11 = Field<24, 8>;    // Priority of system handler 11
        };

        // System handler priority registers
        struct SHPR3 : public Register<0xe000ed20> {
            using PRI_14 = Field<16, 8>;    // Priority of system handler 14
            using PRI_15 = Field<24, 8>;    // Priority of system handler 15
        };

    };

    // SysTick timer
    struct STK {
        // SysTick control and status register
        struct CSR : public Register<0xe000e010> {
            using ENABLE = Field<0, 1>;    // Counter enable
            using TICKINT = Field<1, 1>;    // SysTick exception request enable
            using CLKSOURCE = Field<2, 1>;    // Clock source selection
            using COUNTFLAG = Field<16, 1>;    // COUNTFLAG
        };

        // SysTick reload value register
        struct RVR : public Register<0xe000e014> {
            using RELOAD = Field<0, 24>;    // RELOAD value
        };

        // SysTick current value register
        struct CVR : public Register<0xe000e018> {
            using CURRENT = Field<0, 24>;    // Current counter value
        };

        // SysTick calibration value register
        struct CALIB : public Register<0xe000e01c> {
            using TENMS = Field<0, 24>;    // Calibration value
            using SKEW = Field<30, 1>;    // SKEW flag: Indicates whether the TENMS value is exact
            using NOREF = Field<31, 1>;    // NOREF flag. Reads as zero
        };

    };

    static std::uint32_t const numInterrupts = 32;

    enum class Interrupts: std::uint32_t {
        WWDG = 0,
        PVD = 1,
        RTC = 2,
        FLASH = 3,
        RCC_CRS = 4,
        EXTI0_1 = 5,
        EXTI2_3 = 6,
        EXTI4_15 = 7,
        TSC = 8,
        DMA1_CH1 = 9,
        DMA1_CH2_3_DMA2_CH1_2 = 10,
        DMA1_CH4_5_6_7_DMA2_CH3_4_5 = 11,
        ADC_COMP = 12,
        TIM1_BRK_UP_TRG_COM = 13,
        TIM1_CC = 14,
        TIM2 = 15,
        TIM3 = 16,
        TIM6_DAC = 17,
        TIM7 = 18,
        TIM14 = 19,
        TIM15 = 20,
        TIM16 = 21,
        TIM17 = 22,
        I2C1 = 23,
        I2C2 = 24,
        SPI1 = 25,
        SPI2 = 26,
        USART1 = 27,
        USART2 = 28,
        USART3_4_5_6_7_8 = 29,
        CEC_CAN = 30,
        USB = 31,
    };

};
