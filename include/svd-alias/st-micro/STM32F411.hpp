// This is a file generated by svd-alias.

#pragma once

#include "svd-alias/bit-field.hpp"
#include "svd-alias/register.hpp"

struct STM32F411 {
    // ADC common registers
    struct ADC_Common {
        // ADC Common status register
        struct CSR : public RegisterReadOnly<0x40012300> {
            using OVR3 = Field<21, 1>;    // Overrun flag of ADC3
            using STRT3 = Field<20, 1>;    // Regular channel Start flag of ADC 3
            using JSTRT3 = Field<19, 1>;    // Injected channel Start flag of ADC 3
            using JEOC3 = Field<18, 1>;    // Injected channel end of conversion of ADC 3
            using EOC3 = Field<17, 1>;    // End of conversion of ADC 3
            using AWD3 = Field<16, 1>;    // Analog watchdog flag of ADC 3
            using OVR2 = Field<13, 1>;    // Overrun flag of ADC 2
            using STRT2 = Field<12, 1>;    // Regular channel Start flag of ADC 2
            using JSTRT2 = Field<11, 1>;    // Injected channel Start flag of ADC 2
            using JEOC2 = Field<10, 1>;    // Injected channel end of conversion of ADC 2
            using EOC2 = Field<9, 1>;    // End of conversion of ADC 2
            using AWD2 = Field<8, 1>;    // Analog watchdog flag of ADC 2
            using OVR1 = Field<5, 1>;    // Overrun flag of ADC 1
            using STRT1 = Field<4, 1>;    // Regular channel Start flag of ADC 1
            using JSTRT1 = Field<3, 1>;    // Injected channel Start flag of ADC 1
            using JEOC1 = Field<2, 1>;    // Injected channel end of conversion of ADC 1
            using EOC1 = Field<1, 1>;    // End of conversion of ADC 1
            using AWD1 = Field<0, 1>;    // Analog watchdog flag of ADC 1
        };

        // ADC common control register
        struct CCR : public Register<0x40012304> {
            using TSVREFE = Field<23, 1>;    // Temperature sensor and VREFINT enable
            using VBATE = Field<22, 1>;    // VBAT enable
            using ADCPRE = Field<16, 2>;    // ADC prescaler
            using DMA = Field<14, 2>;    // Direct memory access mode for multi ADC mode
            using DDS = Field<13, 1>;    // DMA disable selection for multi-ADC mode
            using DELAY = Field<8, 4>;    // Delay between 2 sampling phases
        };

    };

    // Analog-to-digital converter
    struct ADC1 {
        // status register
        struct SR : public Register<0x40012000> {
            using OVR = Field<5, 1>;    // Overrun
            using STRT = Field<4, 1>;    // Regular channel start flag
            using JSTRT = Field<3, 1>;    // Injected channel start flag
            using JEOC = Field<2, 1>;    // Injected channel end of conversion
            using EOC = Field<1, 1>;    // Regular channel end of conversion
            using AWD = Field<0, 1>;    // Analog watchdog flag
        };

        // control register 1
        struct CR1 : public Register<0x40012004> {
            using OVRIE = Field<26, 1>;    // Overrun interrupt enable
            using RES = Field<24, 2>;    // Resolution
            using AWDEN = Field<23, 1>;    // Analog watchdog enable on regular channels
            using JAWDEN = Field<22, 1>;    // Analog watchdog enable on injected channels
            using DISCNUM = Field<13, 3>;    // Discontinuous mode channel count
            using JDISCEN = Field<12, 1>;    // Discontinuous mode on injected channels
            using DISCEN = Field<11, 1>;    // Discontinuous mode on regular channels
            using JAUTO = Field<10, 1>;    // Automatic injected group conversion
            using AWDSGL = Field<9, 1>;    // Enable the watchdog on a single channel in scan mode
            using SCAN = Field<8, 1>;    // Scan mode
            using JEOCIE = Field<7, 1>;    // Interrupt enable for injected channels
            using AWDIE = Field<6, 1>;    // Analog watchdog interrupt enable
            using EOCIE = Field<5, 1>;    // Interrupt enable for EOC
            using AWDCH = Field<0, 5>;    // Analog watchdog channel select bits
        };

        // control register 2
        struct CR2 : public Register<0x40012008> {
            using SWSTART = Field<30, 1>;    // Start conversion of regular channels
            using EXTEN = Field<28, 2>;    // External trigger enable for regular channels
            using EXTSEL = Field<24, 4>;    // External event select for regular group
            using JSWSTART = Field<22, 1>;    // Start conversion of injected channels
            using JEXTEN = Field<20, 2>;    // External trigger enable for injected channels
            using JEXTSEL = Field<16, 4>;    // External event select for injected group
            using ALIGN = Field<11, 1>;    // Data alignment
            using EOCS = Field<10, 1>;    // End of conversion selection
            using DDS = Field<9, 1>;    // DMA disable selection (for single ADC mode)
            using DMA = Field<8, 1>;    // Direct memory access mode (for single ADC mode)
            using CONT = Field<1, 1>;    // Continuous conversion
            using ADON = Field<0, 1>;    // A/D Converter ON / OFF
        };

        // sample time register 1
        struct SMPR1 : public Register<0x4001200c> {
            using SMPx_x = Field<0, 32>;    // Sample time bits
        };

        // sample time register 2
        struct SMPR2 : public Register<0x40012010> {
            using SMPx_x = Field<0, 32>;    // Sample time bits
        };

        // injected channel data offset register x
        struct JOFR1 : public Register<0x40012014> {
            using JOFFSET1 = Field<0, 12>;    // Data offset for injected channel x
        };

        // injected channel data offset register x
        struct JOFR2 : public Register<0x40012018> {
            using JOFFSET2 = Field<0, 12>;    // Data offset for injected channel x
        };

        // injected channel data offset register x
        struct JOFR3 : public Register<0x4001201c> {
            using JOFFSET3 = Field<0, 12>;    // Data offset for injected channel x
        };

        // injected channel data offset register x
        struct JOFR4 : public Register<0x40012020> {
            using JOFFSET4 = Field<0, 12>;    // Data offset for injected channel x
        };

        // watchdog higher threshold register
        struct HTR : public Register<0x40012024> {
            using HT = Field<0, 12>;    // Analog watchdog higher threshold
        };

        // watchdog lower threshold register
        struct LTR : public Register<0x40012028> {
            using LT = Field<0, 12>;    // Analog watchdog lower threshold
        };

        // regular sequence register 1
        struct SQR1 : public Register<0x4001202c> {
            using L = Field<20, 4>;    // Regular channel sequence length
            using SQ16 = Field<15, 5>;    // 16th conversion in regular sequence
            using SQ15 = Field<10, 5>;    // 15th conversion in regular sequence
            using SQ14 = Field<5, 5>;    // 14th conversion in regular sequence
            using SQ13 = Field<0, 5>;    // 13th conversion in regular sequence
        };

        // regular sequence register 2
        struct SQR2 : public Register<0x40012030> {
            using SQ12 = Field<25, 5>;    // 12th conversion in regular sequence
            using SQ11 = Field<20, 5>;    // 11th conversion in regular sequence
            using SQ10 = Field<15, 5>;    // 10th conversion in regular sequence
            using SQ9 = Field<10, 5>;    // 9th conversion in regular sequence
            using SQ8 = Field<5, 5>;    // 8th conversion in regular sequence
            using SQ7 = Field<0, 5>;    // 7th conversion in regular sequence
        };

        // regular sequence register 3
        struct SQR3 : public Register<0x40012034> {
            using SQ6 = Field<25, 5>;    // 6th conversion in regular sequence
            using SQ5 = Field<20, 5>;    // 5th conversion in regular sequence
            using SQ4 = Field<15, 5>;    // 4th conversion in regular sequence
            using SQ3 = Field<10, 5>;    // 3rd conversion in regular sequence
            using SQ2 = Field<5, 5>;    // 2nd conversion in regular sequence
            using SQ1 = Field<0, 5>;    // 1st conversion in regular sequence
        };

        // injected sequence register
        struct JSQR : public Register<0x40012038> {
            using JL = Field<20, 2>;    // Injected sequence length
            using JSQ4 = Field<15, 5>;    // 4th conversion in injected sequence
            using JSQ3 = Field<10, 5>;    // 3rd conversion in injected sequence
            using JSQ2 = Field<5, 5>;    // 2nd conversion in injected sequence
            using JSQ1 = Field<0, 5>;    // 1st conversion in injected sequence
        };

        // injected data register x
        struct JDR1 : public RegisterReadOnly<0x4001203c> {
            using JDATA = Field<0, 16>;    // Injected data
        };

        // injected data register x
        struct JDR2 : public RegisterReadOnly<0x40012040> {
            using JDATA = Field<0, 16>;    // Injected data
        };

        // injected data register x
        struct JDR3 : public RegisterReadOnly<0x40012044> {
            using JDATA = Field<0, 16>;    // Injected data
        };

        // injected data register x
        struct JDR4 : public RegisterReadOnly<0x40012048> {
            using JDATA = Field<0, 16>;    // Injected data
        };

        // regular data register
        struct DR : public RegisterReadOnly<0x4001204c> {
            using DATA = Field<0, 16>;    // Regular data
        };

    };

    // Cryptographic processor
    struct CRC {
        // Data register
        struct DR : public Register<0x40023000> {
            using Field = Field<0, 32>;    // Data Register
        };

        // Independent Data register
        struct IDR : public Register<0x40023004> {
            using Field = Field<0, 8>;    // Independent Data register
        };

        // Control register
        struct CR : public RegisterWriteOnly<0x40023008> {
            using Field = Field<0, 1>;    // Control regidter
        };

    };

    // Debug support
    struct DBG {
        // IDCODE
        struct DBGMCU_IDCODE : public RegisterReadOnly<0xe0042000> {
            using DEV_ID = Field<0, 12>;    // DEV_ID
            using REV_ID = Field<16, 16>;    // REV_ID
        };

        // Control Register
        struct DBGMCU_CR : public Register<0xe0042004> {
            using DBG_SLEEP = Field<0, 1>;    // DBG_SLEEP
            using DBG_STOP = Field<1, 1>;    // DBG_STOP
            using DBG_STANDBY = Field<2, 1>;    // DBG_STANDBY
            using TRACE_IOEN = Field<5, 1>;    // TRACE_IOEN
            using TRACE_MODE = Field<6, 2>;    // TRACE_MODE
        };

        // Debug MCU APB1 Freeze registe
        struct DBGMCU_APB1_FZ : public Register<0xe0042008> {
            using DBG_TIM2_STOP = Field<0, 1>;    // DBG_TIM2_STOP
            using DBG_TIM3_STOP = Field<1, 1>;    // DBG_TIM3 _STOP
            using DBG_TIM4_STOP = Field<2, 1>;    // DBG_TIM4_STOP
            using DBG_TIM5_STOP = Field<3, 1>;    // DBG_TIM5_STOP
            using DBG_RTC_Stop = Field<10, 1>;    // RTC stopped when Core is halted
            using DBG_WWDG_STOP = Field<11, 1>;    // DBG_WWDG_STOP
            using DBG_IWDEG_STOP = Field<12, 1>;    // DBG_IWDEG_STOP
            using DBG_I2C1_SMBUS_TIMEOUT = Field<21, 1>;    // DBG_J2C1_SMBUS_TIMEOUT
            using DBG_I2C2_SMBUS_TIMEOUT = Field<22, 1>;    // DBG_J2C2_SMBUS_TIMEOUT
            using DBG_I2C3SMBUS_TIMEOUT = Field<23, 1>;    // DBG_J2C3SMBUS_TIMEOUT
        };

        // Debug MCU APB2 Freeze registe
        struct DBGMCU_APB2_FZ : public Register<0xe004200c> {
            using DBG_TIM1_STOP = Field<0, 1>;    // TIM1 counter stopped when core is halted
            using DBG_TIM9_STOP = Field<16, 1>;    // TIM9 counter stopped when core is halted
            using DBG_TIM10_STOP = Field<17, 1>;    // TIM10 counter stopped when core is halted
            using DBG_TIM11_STOP = Field<18, 1>;    // TIM11 counter stopped when core is halted
        };

    };

    // External interrupt/event controller
    struct EXTI {
        // Interrupt mask register (EXTI_IMR)
        struct IMR : public Register<0x40013c00> {
            using MR0 = Field<0, 1>;    // Interrupt Mask on line 0
            using MR1 = Field<1, 1>;    // Interrupt Mask on line 1
            using MR2 = Field<2, 1>;    // Interrupt Mask on line 2
            using MR3 = Field<3, 1>;    // Interrupt Mask on line 3
            using MR4 = Field<4, 1>;    // Interrupt Mask on line 4
            using MR5 = Field<5, 1>;    // Interrupt Mask on line 5
            using MR6 = Field<6, 1>;    // Interrupt Mask on line 6
            using MR7 = Field<7, 1>;    // Interrupt Mask on line 7
            using MR8 = Field<8, 1>;    // Interrupt Mask on line 8
            using MR9 = Field<9, 1>;    // Interrupt Mask on line 9
            using MR10 = Field<10, 1>;    // Interrupt Mask on line 10
            using MR11 = Field<11, 1>;    // Interrupt Mask on line 11
            using MR12 = Field<12, 1>;    // Interrupt Mask on line 12
            using MR13 = Field<13, 1>;    // Interrupt Mask on line 13
            using MR14 = Field<14, 1>;    // Interrupt Mask on line 14
            using MR15 = Field<15, 1>;    // Interrupt Mask on line 15
            using MR16 = Field<16, 1>;    // Interrupt Mask on line 16
            using MR17 = Field<17, 1>;    // Interrupt Mask on line 17
            using MR18 = Field<18, 1>;    // Interrupt Mask on line 18
            using MR19 = Field<19, 1>;    // Interrupt Mask on line 19
            using MR20 = Field<20, 1>;    // Interrupt Mask on line 20
            using MR21 = Field<21, 1>;    // Interrupt Mask on line 21
            using MR22 = Field<22, 1>;    // Interrupt Mask on line 22
        };

        // Event mask register (EXTI_EMR)
        struct EMR : public Register<0x40013c04> {
            using MR0 = Field<0, 1>;    // Event Mask on line 0
            using MR1 = Field<1, 1>;    // Event Mask on line 1
            using MR2 = Field<2, 1>;    // Event Mask on line 2
            using MR3 = Field<3, 1>;    // Event Mask on line 3
            using MR4 = Field<4, 1>;    // Event Mask on line 4
            using MR5 = Field<5, 1>;    // Event Mask on line 5
            using MR6 = Field<6, 1>;    // Event Mask on line 6
            using MR7 = Field<7, 1>;    // Event Mask on line 7
            using MR8 = Field<8, 1>;    // Event Mask on line 8
            using MR9 = Field<9, 1>;    // Event Mask on line 9
            using MR10 = Field<10, 1>;    // Event Mask on line 10
            using MR11 = Field<11, 1>;    // Event Mask on line 11
            using MR12 = Field<12, 1>;    // Event Mask on line 12
            using MR13 = Field<13, 1>;    // Event Mask on line 13
            using MR14 = Field<14, 1>;    // Event Mask on line 14
            using MR15 = Field<15, 1>;    // Event Mask on line 15
            using MR16 = Field<16, 1>;    // Event Mask on line 16
            using MR17 = Field<17, 1>;    // Event Mask on line 17
            using MR18 = Field<18, 1>;    // Event Mask on line 18
            using MR19 = Field<19, 1>;    // Event Mask on line 19
            using MR20 = Field<20, 1>;    // Event Mask on line 20
            using MR21 = Field<21, 1>;    // Event Mask on line 21
            using MR22 = Field<22, 1>;    // Event Mask on line 22
        };

        // Rising Trigger selection register (EXTI_RTSR)
        struct RTSR : public Register<0x40013c08> {
            using TR0 = Field<0, 1>;    // Rising trigger event configuration of line 0
            using TR1 = Field<1, 1>;    // Rising trigger event configuration of line 1
            using TR2 = Field<2, 1>;    // Rising trigger event configuration of line 2
            using TR3 = Field<3, 1>;    // Rising trigger event configuration of line 3
            using TR4 = Field<4, 1>;    // Rising trigger event configuration of line 4
            using TR5 = Field<5, 1>;    // Rising trigger event configuration of line 5
            using TR6 = Field<6, 1>;    // Rising trigger event configuration of line 6
            using TR7 = Field<7, 1>;    // Rising trigger event configuration of line 7
            using TR8 = Field<8, 1>;    // Rising trigger event configuration of line 8
            using TR9 = Field<9, 1>;    // Rising trigger event configuration of line 9
            using TR10 = Field<10, 1>;    // Rising trigger event configuration of line 10
            using TR11 = Field<11, 1>;    // Rising trigger event configuration of line 11
            using TR12 = Field<12, 1>;    // Rising trigger event configuration of line 12
            using TR13 = Field<13, 1>;    // Rising trigger event configuration of line 13
            using TR14 = Field<14, 1>;    // Rising trigger event configuration of line 14
            using TR15 = Field<15, 1>;    // Rising trigger event configuration of line 15
            using TR16 = Field<16, 1>;    // Rising trigger event configuration of line 16
            using TR17 = Field<17, 1>;    // Rising trigger event configuration of line 17
            using TR18 = Field<18, 1>;    // Rising trigger event configuration of line 18
            using TR19 = Field<19, 1>;    // Rising trigger event configuration of line 19
            using TR20 = Field<20, 1>;    // Rising trigger event configuration of line 20
            using TR21 = Field<21, 1>;    // Rising trigger event configuration of line 21
            using TR22 = Field<22, 1>;    // Rising trigger event configuration of line 22
        };

        // Falling Trigger selection register (EXTI_FTSR)
        struct FTSR : public Register<0x40013c0c> {
            using TR0 = Field<0, 1>;    // Falling trigger event configuration of line 0
            using TR1 = Field<1, 1>;    // Falling trigger event configuration of line 1
            using TR2 = Field<2, 1>;    // Falling trigger event configuration of line 2
            using TR3 = Field<3, 1>;    // Falling trigger event configuration of line 3
            using TR4 = Field<4, 1>;    // Falling trigger event configuration of line 4
            using TR5 = Field<5, 1>;    // Falling trigger event configuration of line 5
            using TR6 = Field<6, 1>;    // Falling trigger event configuration of line 6
            using TR7 = Field<7, 1>;    // Falling trigger event configuration of line 7
            using TR8 = Field<8, 1>;    // Falling trigger event configuration of line 8
            using TR9 = Field<9, 1>;    // Falling trigger event configuration of line 9
            using TR10 = Field<10, 1>;    // Falling trigger event configuration of line 10
            using TR11 = Field<11, 1>;    // Falling trigger event configuration of line 11
            using TR12 = Field<12, 1>;    // Falling trigger event configuration of line 12
            using TR13 = Field<13, 1>;    // Falling trigger event configuration of line 13
            using TR14 = Field<14, 1>;    // Falling trigger event configuration of line 14
            using TR15 = Field<15, 1>;    // Falling trigger event configuration of line 15
            using TR16 = Field<16, 1>;    // Falling trigger event configuration of line 16
            using TR17 = Field<17, 1>;    // Falling trigger event configuration of line 17
            using TR18 = Field<18, 1>;    // Falling trigger event configuration of line 18
            using TR19 = Field<19, 1>;    // Falling trigger event configuration of line 19
            using TR20 = Field<20, 1>;    // Falling trigger event configuration of line 20
            using TR21 = Field<21, 1>;    // Falling trigger event configuration of line 21
            using TR22 = Field<22, 1>;    // Falling trigger event configuration of line 22
        };

        // Software interrupt event register (EXTI_SWIER)
        struct SWIER : public Register<0x40013c10> {
            using SWIER0 = Field<0, 1>;    // Software Interrupt on line 0
            using SWIER1 = Field<1, 1>;    // Software Interrupt on line 1
            using SWIER2 = Field<2, 1>;    // Software Interrupt on line 2
            using SWIER3 = Field<3, 1>;    // Software Interrupt on line 3
            using SWIER4 = Field<4, 1>;    // Software Interrupt on line 4
            using SWIER5 = Field<5, 1>;    // Software Interrupt on line 5
            using SWIER6 = Field<6, 1>;    // Software Interrupt on line 6
            using SWIER7 = Field<7, 1>;    // Software Interrupt on line 7
            using SWIER8 = Field<8, 1>;    // Software Interrupt on line 8
            using SWIER9 = Field<9, 1>;    // Software Interrupt on line 9
            using SWIER10 = Field<10, 1>;    // Software Interrupt on line 10
            using SWIER11 = Field<11, 1>;    // Software Interrupt on line 11
            using SWIER12 = Field<12, 1>;    // Software Interrupt on line 12
            using SWIER13 = Field<13, 1>;    // Software Interrupt on line 13
            using SWIER14 = Field<14, 1>;    // Software Interrupt on line 14
            using SWIER15 = Field<15, 1>;    // Software Interrupt on line 15
            using SWIER16 = Field<16, 1>;    // Software Interrupt on line 16
            using SWIER17 = Field<17, 1>;    // Software Interrupt on line 17
            using SWIER18 = Field<18, 1>;    // Software Interrupt on line 18
            using SWIER19 = Field<19, 1>;    // Software Interrupt on line 19
            using SWIER20 = Field<20, 1>;    // Software Interrupt on line 20
            using SWIER21 = Field<21, 1>;    // Software Interrupt on line 21
            using SWIER22 = Field<22, 1>;    // Software Interrupt on line 22
        };

        // Pending register (EXTI_PR)
        struct PR : public Register<0x40013c14> {
            using PR0 = Field<0, 1>;    // Pending bit 0
            using PR1 = Field<1, 1>;    // Pending bit 1
            using PR2 = Field<2, 1>;    // Pending bit 2
            using PR3 = Field<3, 1>;    // Pending bit 3
            using PR4 = Field<4, 1>;    // Pending bit 4
            using PR5 = Field<5, 1>;    // Pending bit 5
            using PR6 = Field<6, 1>;    // Pending bit 6
            using PR7 = Field<7, 1>;    // Pending bit 7
            using PR8 = Field<8, 1>;    // Pending bit 8
            using PR9 = Field<9, 1>;    // Pending bit 9
            using PR10 = Field<10, 1>;    // Pending bit 10
            using PR11 = Field<11, 1>;    // Pending bit 11
            using PR12 = Field<12, 1>;    // Pending bit 12
            using PR13 = Field<13, 1>;    // Pending bit 13
            using PR14 = Field<14, 1>;    // Pending bit 14
            using PR15 = Field<15, 1>;    // Pending bit 15
            using PR16 = Field<16, 1>;    // Pending bit 16
            using PR17 = Field<17, 1>;    // Pending bit 17
            using PR18 = Field<18, 1>;    // Pending bit 18
            using PR19 = Field<19, 1>;    // Pending bit 19
            using PR20 = Field<20, 1>;    // Pending bit 20
            using PR21 = Field<21, 1>;    // Pending bit 21
            using PR22 = Field<22, 1>;    // Pending bit 22
        };

    };

    // FLASH
    struct FLASH {
        // Flash access control register
        struct ACR : public Register<0x40023c00> {
            using LATENCY = Field<0, 3>;    // Latency
            using PRFTEN = Field<8, 1>;    // Prefetch enable
            using ICEN = Field<9, 1>;    // Instruction cache enable
            using DCEN = Field<10, 1>;    // Data cache enable
            using ICRST = Field<11, 1>;    // Instruction cache reset
            using DCRST = Field<12, 1>;    // Data cache reset
        };

        // Flash key register
        struct KEYR : public RegisterWriteOnly<0x40023c04> {
            using KEY = Field<0, 32>;    // FPEC key
        };

        // Flash option key register
        struct OPTKEYR : public RegisterWriteOnly<0x40023c08> {
            using OPTKEY = Field<0, 32>;    // Option byte key
        };

        // Status register
        struct SR : public Register<0x40023c0c> {
            using EOP = Field<0, 1>;    // End of operation
            using OPERR = Field<1, 1>;    // Operation error
            using WRPERR = Field<4, 1>;    // Write protection error
            using PGAERR = Field<5, 1>;    // Programming alignment error
            using PGPERR = Field<6, 1>;    // Programming parallelism error
            using PGSERR = Field<7, 1>;    // Programming sequence error
            using BSY = Field<16, 1>;    // Busy
        };

        // Control register
        struct CR : public Register<0x40023c10> {
            using PG = Field<0, 1>;    // Programming
            using SER = Field<1, 1>;    // Sector Erase
            using MER = Field<2, 1>;    // Mass Erase
            using SNB = Field<3, 4>;    // Sector number
            using PSIZE = Field<8, 2>;    // Program size
            using STRT = Field<16, 1>;    // Start
            using EOPIE = Field<24, 1>;    // End of operation interrupt enable
            using ERRIE = Field<25, 1>;    // Error interrupt enable
            using LOCK = Field<31, 1>;    // Lock
        };

        // Flash option control register
        struct OPTCR : public Register<0x40023c14> {
            using OPTLOCK = Field<0, 1>;    // Option lock
            using OPTSTRT = Field<1, 1>;    // Option start
            using BOR_LEV = Field<2, 2>;    // BOR reset Level
            using WDG_SW = Field<5, 1>;    // WDG_SW User option bytes
            using nRST_STOP = Field<6, 1>;    // nRST_STOP User option bytes
            using nRST_STDBY = Field<7, 1>;    // nRST_STDBY User option bytes
            using RDP = Field<8, 8>;    // Read protect
            using nWRP = Field<16, 12>;    // Not write protect
        };

    };

    // Independent watchdog
    struct IWDG {
        // Key register
        struct KR : public RegisterWriteOnly<0x40003000> {
            using KEY = Field<0, 16>;    // Key value
        };

        // Prescaler register
        struct PR : public Register<0x40003004> {
            using Field = Field<0, 3>;    // Prescaler divider
        };

        // Reload register
        struct RLR : public Register<0x40003008> {
            using RL = Field<0, 12>;    // Watchdog counter reload value
        };

        // Status register
        struct SR : public RegisterReadOnly<0x4000300c> {
            using RVU = Field<1, 1>;    // Watchdog counter reload value update
            using PVU = Field<0, 1>;    // Watchdog prescaler value update
        };

    };

    // USB on the go full speed
    struct OTG_FS_DEVICE {
        // OTG_FS device configuration register (OTG_FS_DCFG)
        struct FS_DCFG : public Register<0x50000800> {
            using DSPD = Field<0, 2>;    // Device speed
            using NZLSOHSK = Field<2, 1>;    // Non-zero-length status OUT handshake
            using DAD = Field<4, 7>;    // Device address
            using PFIVL = Field<11, 2>;    // Periodic frame interval
        };

        // OTG_FS device control register (OTG_FS_DCTL)
        struct FS_DCTL : public Register<0x50000804> {
            using RWUSIG = Field<0, 1>;    // Remote wakeup signaling
            using SDIS = Field<1, 1>;    // Soft disconnect
            using GINSTS = Field<2, 1>;    // Global IN NAK status
            using GONSTS = Field<3, 1>;    // Global OUT NAK status
            using TCTL = Field<4, 3>;    // Test control
            using SGINAK = Field<7, 1>;    // Set global IN NAK
            using CGINAK = Field<8, 1>;    // Clear global IN NAK
            using SGONAK = Field<9, 1>;    // Set global OUT NAK
            using CGONAK = Field<10, 1>;    // Clear global OUT NAK
            using POPRGDNE = Field<11, 1>;    // Power-on programming done
        };

        // OTG_FS device status register (OTG_FS_DSTS)
        struct FS_DSTS : public RegisterReadOnly<0x50000808> {
            using SUSPSTS = Field<0, 1>;    // Suspend status
            using ENUMSPD = Field<1, 2>;    // Enumerated speed
            using EERR = Field<3, 1>;    // Erratic error
            using FNSOF = Field<8, 14>;    // Frame number of the received SOF
        };

        // OTG_FS device IN endpoint common interrupt mask register (OTG_FS_DIEPMSK)
        struct FS_DIEPMSK : public Register<0x50000810> {
            using XFRCM = Field<0, 1>;    // Transfer completed interrupt mask
            using EPDM = Field<1, 1>;    // Endpoint disabled interrupt mask
            using TOM = Field<3, 1>;    // Timeout condition mask (Non-isochronous endpoints)
            using ITTXFEMSK = Field<4, 1>;    // IN token received when TxFIFO empty mask
            using INEPNMM = Field<5, 1>;    // IN token received with EP mismatch mask
            using INEPNEM = Field<6, 1>;    // IN endpoint NAK effective mask
        };

        // OTG_FS device OUT endpoint common interrupt mask register (OTG_FS_DOEPMSK)
        struct FS_DOEPMSK : public Register<0x50000814> {
            using XFRCM = Field<0, 1>;    // Transfer completed interrupt mask
            using EPDM = Field<1, 1>;    // Endpoint disabled interrupt mask
            using STUPM = Field<3, 1>;    // SETUP phase done mask
            using OTEPDM = Field<4, 1>;    // OUT token received when endpoint disabled mask
        };

        // OTG_FS device all endpoints interrupt register (OTG_FS_DAINT)
        struct FS_DAINT : public RegisterReadOnly<0x50000818> {
            using IEPINT = Field<0, 16>;    // IN endpoint interrupt bits
            using OEPINT = Field<16, 16>;    // OUT endpoint interrupt bits
        };

        // OTG_FS all endpoints interrupt mask register (OTG_FS_DAINTMSK)
        struct FS_DAINTMSK : public Register<0x5000081c> {
            using IEPM = Field<0, 16>;    // IN EP interrupt mask bits
            using OEPINT = Field<16, 16>;    // OUT endpoint interrupt bits
        };

        // OTG_FS device VBUS discharge time register
        struct DVBUSDIS : public Register<0x50000828> {
            using VBUSDT = Field<0, 16>;    // Device VBUS discharge time
        };

        // OTG_FS device VBUS pulsing time register
        struct DVBUSPULSE : public Register<0x5000082c> {
            using DVBUSP = Field<0, 12>;    // Device VBUS pulsing time
        };

        // OTG_FS device IN endpoint FIFO empty interrupt mask register
        struct DIEPEMPMSK : public Register<0x50000834> {
            using INEPTXFEM = Field<0, 16>;    // IN EP Tx FIFO empty interrupt mask bits
        };

        // OTG_FS device control IN endpoint 0 control register (OTG_FS_DIEPCTL0)
        struct FS_DIEPCTL0 : public Register<0x50000900> {
            using MPSIZ = Field<0, 2>;    // Maximum packet size
            using USBAEP = Field<15, 1>;    // USB active endpoint
            using NAKSTS = Field<17, 1>;    // NAK status
            using EPTYP = Field<18, 2>;    // Endpoint type
            using STALL = Field<21, 1>;    // STALL handshake
            using TXFNUM = Field<22, 4>;    // TxFIFO number
            using CNAK = Field<26, 1>;    // Clear NAK
            using SNAK = Field<27, 1>;    // Set NAK
            using EPDIS = Field<30, 1>;    // Endpoint disable
            using EPENA = Field<31, 1>;    // Endpoint enable
        };

        // OTG device endpoint-1 control register
        struct DIEPCTL1 : public Register<0x50000920> {
            using EPENA = Field<31, 1>;    // EPENA
            using EPDIS = Field<30, 1>;    // EPDIS
            using SODDFRM_SD1PID = Field<29, 1>;    // SODDFRM/SD1PID
            using SD0PID_SEVNFRM = Field<28, 1>;    // SD0PID/SEVNFRM
            using SNAK = Field<27, 1>;    // SNAK
            using CNAK = Field<26, 1>;    // CNAK
            using TXFNUM = Field<22, 4>;    // TXFNUM
            using Stall = Field<21, 1>;    // Stall
            using EPTYP = Field<18, 2>;    // EPTYP
            using NAKSTS = Field<17, 1>;    // NAKSTS
            using EONUM_DPID = Field<16, 1>;    // EONUM/DPID
            using USBAEP = Field<15, 1>;    // USBAEP
            using MPSIZ = Field<0, 11>;    // MPSIZ
        };

        // OTG device endpoint-2 control register
        struct DIEPCTL2 : public Register<0x50000940> {
            using EPENA = Field<31, 1>;    // EPENA
            using EPDIS = Field<30, 1>;    // EPDIS
            using SODDFRM = Field<29, 1>;    // SODDFRM
            using SD0PID_SEVNFRM = Field<28, 1>;    // SD0PID/SEVNFRM
            using SNAK = Field<27, 1>;    // SNAK
            using CNAK = Field<26, 1>;    // CNAK
            using TXFNUM = Field<22, 4>;    // TXFNUM
            using Stall = Field<21, 1>;    // Stall
            using EPTYP = Field<18, 2>;    // EPTYP
            using NAKSTS = Field<17, 1>;    // NAKSTS
            using EONUM_DPID = Field<16, 1>;    // EONUM/DPID
            using USBAEP = Field<15, 1>;    // USBAEP
            using MPSIZ = Field<0, 11>;    // MPSIZ
        };

        // OTG device endpoint-3 control register
        struct DIEPCTL3 : public Register<0x50000960> {
            using EPENA = Field<31, 1>;    // EPENA
            using EPDIS = Field<30, 1>;    // EPDIS
            using SODDFRM = Field<29, 1>;    // SODDFRM
            using SD0PID_SEVNFRM = Field<28, 1>;    // SD0PID/SEVNFRM
            using SNAK = Field<27, 1>;    // SNAK
            using CNAK = Field<26, 1>;    // CNAK
            using TXFNUM = Field<22, 4>;    // TXFNUM
            using Stall = Field<21, 1>;    // Stall
            using EPTYP = Field<18, 2>;    // EPTYP
            using NAKSTS = Field<17, 1>;    // NAKSTS
            using EONUM_DPID = Field<16, 1>;    // EONUM/DPID
            using USBAEP = Field<15, 1>;    // USBAEP
            using MPSIZ = Field<0, 11>;    // MPSIZ
        };

        // device endpoint-0 control register
        struct DOEPCTL0 : public Register<0x50000b00> {
            using EPENA = Field<31, 1>;    // EPENA
            using EPDIS = Field<30, 1>;    // EPDIS
            using SNAK = Field<27, 1>;    // SNAK
            using CNAK = Field<26, 1>;    // CNAK
            using Stall = Field<21, 1>;    // Stall
            using SNPM = Field<20, 1>;    // SNPM
            using EPTYP = Field<18, 2>;    // EPTYP
            using NAKSTS = Field<17, 1>;    // NAKSTS
            using USBAEP = Field<15, 1>;    // USBAEP
            using MPSIZ = Field<0, 2>;    // MPSIZ
        };

        // device endpoint-1 control register
        struct DOEPCTL1 : public Register<0x50000b20> {
            using EPENA = Field<31, 1>;    // EPENA
            using EPDIS = Field<30, 1>;    // EPDIS
            using SODDFRM = Field<29, 1>;    // SODDFRM
            using SD0PID_SEVNFRM = Field<28, 1>;    // SD0PID/SEVNFRM
            using SNAK = Field<27, 1>;    // SNAK
            using CNAK = Field<26, 1>;    // CNAK
            using Stall = Field<21, 1>;    // Stall
            using SNPM = Field<20, 1>;    // SNPM
            using EPTYP = Field<18, 2>;    // EPTYP
            using NAKSTS = Field<17, 1>;    // NAKSTS
            using EONUM_DPID = Field<16, 1>;    // EONUM/DPID
            using USBAEP = Field<15, 1>;    // USBAEP
            using MPSIZ = Field<0, 11>;    // MPSIZ
        };

        // device endpoint-2 control register
        struct DOEPCTL2 : public Register<0x50000b40> {
            using EPENA = Field<31, 1>;    // EPENA
            using EPDIS = Field<30, 1>;    // EPDIS
            using SODDFRM = Field<29, 1>;    // SODDFRM
            using SD0PID_SEVNFRM = Field<28, 1>;    // SD0PID/SEVNFRM
            using SNAK = Field<27, 1>;    // SNAK
            using CNAK = Field<26, 1>;    // CNAK
            using Stall = Field<21, 1>;    // Stall
            using SNPM = Field<20, 1>;    // SNPM
            using EPTYP = Field<18, 2>;    // EPTYP
            using NAKSTS = Field<17, 1>;    // NAKSTS
            using EONUM_DPID = Field<16, 1>;    // EONUM/DPID
            using USBAEP = Field<15, 1>;    // USBAEP
            using MPSIZ = Field<0, 11>;    // MPSIZ
        };

        // device endpoint-3 control register
        struct DOEPCTL3 : public Register<0x50000b60> {
            using EPENA = Field<31, 1>;    // EPENA
            using EPDIS = Field<30, 1>;    // EPDIS
            using SODDFRM = Field<29, 1>;    // SODDFRM
            using SD0PID_SEVNFRM = Field<28, 1>;    // SD0PID/SEVNFRM
            using SNAK = Field<27, 1>;    // SNAK
            using CNAK = Field<26, 1>;    // CNAK
            using Stall = Field<21, 1>;    // Stall
            using SNPM = Field<20, 1>;    // SNPM
            using EPTYP = Field<18, 2>;    // EPTYP
            using NAKSTS = Field<17, 1>;    // NAKSTS
            using EONUM_DPID = Field<16, 1>;    // EONUM/DPID
            using USBAEP = Field<15, 1>;    // USBAEP
            using MPSIZ = Field<0, 11>;    // MPSIZ
        };

        // device endpoint-x interrupt register
        struct DIEPINT0 : public Register<0x50000908> {
            using TXFE = Field<7, 1>;    // TXFE
            using INEPNE = Field<6, 1>;    // INEPNE
            using ITTXFE = Field<4, 1>;    // ITTXFE
            using TOC = Field<3, 1>;    // TOC
            using EPDISD = Field<1, 1>;    // EPDISD
            using XFRC = Field<0, 1>;    // XFRC
        };

        // device endpoint-1 interrupt register
        struct DIEPINT1 : public Register<0x50000928> {
            using TXFE = Field<7, 1>;    // TXFE
            using INEPNE = Field<6, 1>;    // INEPNE
            using ITTXFE = Field<4, 1>;    // ITTXFE
            using TOC = Field<3, 1>;    // TOC
            using EPDISD = Field<1, 1>;    // EPDISD
            using XFRC = Field<0, 1>;    // XFRC
        };

        // device endpoint-2 interrupt register
        struct DIEPINT2 : public Register<0x50000948> {
            using TXFE = Field<7, 1>;    // TXFE
            using INEPNE = Field<6, 1>;    // INEPNE
            using ITTXFE = Field<4, 1>;    // ITTXFE
            using TOC = Field<3, 1>;    // TOC
            using EPDISD = Field<1, 1>;    // EPDISD
            using XFRC = Field<0, 1>;    // XFRC
        };

        // device endpoint-3 interrupt register
        struct DIEPINT3 : public Register<0x50000968> {
            using TXFE = Field<7, 1>;    // TXFE
            using INEPNE = Field<6, 1>;    // INEPNE
            using ITTXFE = Field<4, 1>;    // ITTXFE
            using TOC = Field<3, 1>;    // TOC
            using EPDISD = Field<1, 1>;    // EPDISD
            using XFRC = Field<0, 1>;    // XFRC
        };

        // device endpoint-0 interrupt register
        struct DOEPINT0 : public Register<0x50000b08> {
            using B2BSTUP = Field<6, 1>;    // B2BSTUP
            using OTEPDIS = Field<4, 1>;    // OTEPDIS
            using STUP = Field<3, 1>;    // STUP
            using EPDISD = Field<1, 1>;    // EPDISD
            using XFRC = Field<0, 1>;    // XFRC
        };

        // device endpoint-1 interrupt register
        struct DOEPINT1 : public Register<0x50000b28> {
            using B2BSTUP = Field<6, 1>;    // B2BSTUP
            using OTEPDIS = Field<4, 1>;    // OTEPDIS
            using STUP = Field<3, 1>;    // STUP
            using EPDISD = Field<1, 1>;    // EPDISD
            using XFRC = Field<0, 1>;    // XFRC
        };

        // device endpoint-2 interrupt register
        struct DOEPINT2 : public Register<0x50000b48> {
            using B2BSTUP = Field<6, 1>;    // B2BSTUP
            using OTEPDIS = Field<4, 1>;    // OTEPDIS
            using STUP = Field<3, 1>;    // STUP
            using EPDISD = Field<1, 1>;    // EPDISD
            using XFRC = Field<0, 1>;    // XFRC
        };

        // device endpoint-3 interrupt register
        struct DOEPINT3 : public Register<0x50000b68> {
            using B2BSTUP = Field<6, 1>;    // B2BSTUP
            using OTEPDIS = Field<4, 1>;    // OTEPDIS
            using STUP = Field<3, 1>;    // STUP
            using EPDISD = Field<1, 1>;    // EPDISD
            using XFRC = Field<0, 1>;    // XFRC
        };

        // device endpoint-0 transfer size register
        struct DIEPTSIZ0 : public Register<0x50000910> {
            using PKTCNT = Field<19, 2>;    // Packet count
            using XFRSIZ = Field<0, 7>;    // Transfer size
        };

        // device OUT endpoint-0 transfer size register
        struct DOEPTSIZ0 : public Register<0x50000b10> {
            using STUPCNT = Field<29, 2>;    // SETUP packet count
            using PKTCNT = Field<19, 1>;    // Packet count
            using XFRSIZ = Field<0, 7>;    // Transfer size
        };

        // device endpoint-1 transfer size register
        struct DIEPTSIZ1 : public Register<0x50000930> {
            using MCNT = Field<29, 2>;    // Multi count
            using PKTCNT = Field<19, 10>;    // Packet count
            using XFRSIZ = Field<0, 19>;    // Transfer size
        };

        // device endpoint-2 transfer size register
        struct DIEPTSIZ2 : public Register<0x50000950> {
            using MCNT = Field<29, 2>;    // Multi count
            using PKTCNT = Field<19, 10>;    // Packet count
            using XFRSIZ = Field<0, 19>;    // Transfer size
        };

        // device endpoint-3 transfer size register
        struct DIEPTSIZ3 : public Register<0x50000970> {
            using MCNT = Field<29, 2>;    // Multi count
            using PKTCNT = Field<19, 10>;    // Packet count
            using XFRSIZ = Field<0, 19>;    // Transfer size
        };

        // OTG_FS device IN endpoint transmit FIFO status register
        struct DTXFSTS0 : public RegisterReadOnly<0x50000918> {
            using INEPTFSAV = Field<0, 16>;    // IN endpoint TxFIFO space available
        };

        // OTG_FS device IN endpoint transmit FIFO status register
        struct DTXFSTS1 : public RegisterReadOnly<0x50000938> {
            using INEPTFSAV = Field<0, 16>;    // IN endpoint TxFIFO space available
        };

        // OTG_FS device IN endpoint transmit FIFO status register
        struct DTXFSTS2 : public RegisterReadOnly<0x50000958> {
            using INEPTFSAV = Field<0, 16>;    // IN endpoint TxFIFO space available
        };

        // OTG_FS device IN endpoint transmit FIFO status register
        struct DTXFSTS3 : public RegisterReadOnly<0x50000978> {
            using INEPTFSAV = Field<0, 16>;    // IN endpoint TxFIFO space available
        };

        // device OUT endpoint-1 transfer size register
        struct DOEPTSIZ1 : public Register<0x50000b30> {
            using RXDPID_STUPCNT = Field<29, 2>;    // Received data PID/SETUP packet count
            using PKTCNT = Field<19, 10>;    // Packet count
            using XFRSIZ = Field<0, 19>;    // Transfer size
        };

        // device OUT endpoint-2 transfer size register
        struct DOEPTSIZ2 : public Register<0x50000b50> {
            using RXDPID_STUPCNT = Field<29, 2>;    // Received data PID/SETUP packet count
            using PKTCNT = Field<19, 10>;    // Packet count
            using XFRSIZ = Field<0, 19>;    // Transfer size
        };

        // device OUT endpoint-3 transfer size register
        struct DOEPTSIZ3 : public Register<0x50000b70> {
            using RXDPID_STUPCNT = Field<29, 2>;    // Received data PID/SETUP packet count
            using PKTCNT = Field<19, 10>;    // Packet count
            using XFRSIZ = Field<0, 19>;    // Transfer size
        };

    };

    // USB on the go full speed
    struct OTG_FS_GLOBAL {
        // OTG_FS control and status register (OTG_FS_GOTGCTL)
        struct FS_GOTGCTL : public Register<0x50000000> {
            using SRQSCS = Field<0, 1>;    // Session request success
            using SRQ = Field<1, 1>;    // Session request
            using HNGSCS = Field<8, 1>;    // Host negotiation success
            using HNPRQ = Field<9, 1>;    // HNP request
            using HSHNPEN = Field<10, 1>;    // Host set HNP enable
            using DHNPEN = Field<11, 1>;    // Device HNP enabled
            using CIDSTS = Field<16, 1>;    // Connector ID status
            using DBCT = Field<17, 1>;    // Long/short debounce time
            using ASVLD = Field<18, 1>;    // A-session valid
            using BSVLD = Field<19, 1>;    // B-session valid
        };

        // OTG_FS interrupt register (OTG_FS_GOTGINT)
        struct FS_GOTGINT : public Register<0x50000004> {
            using SEDET = Field<2, 1>;    // Session end detected
            using SRSSCHG = Field<8, 1>;    // Session request success status change
            using HNSSCHG = Field<9, 1>;    // Host negotiation success status change
            using HNGDET = Field<17, 1>;    // Host negotiation detected
            using ADTOCHG = Field<18, 1>;    // A-device timeout change
            using DBCDNE = Field<19, 1>;    // Debounce done
        };

        // OTG_FS AHB configuration register (OTG_FS_GAHBCFG)
        struct FS_GAHBCFG : public Register<0x50000008> {
            using GINT = Field<0, 1>;    // Global interrupt mask
            using TXFELVL = Field<7, 1>;    // TxFIFO empty level
            using PTXFELVL = Field<8, 1>;    // Periodic TxFIFO empty level
        };

        // OTG_FS USB configuration register (OTG_FS_GUSBCFG)
        struct FS_GUSBCFG : public Register<0x5000000c> {
            using TOCAL = Field<0, 3>;    // FS timeout calibration
            using PHYSEL = Field<6, 1>;    // Full Speed serial transceiver select
            using SRPCAP = Field<8, 1>;    // SRP-capable
            using HNPCAP = Field<9, 1>;    // HNP-capable
            using TRDT = Field<10, 4>;    // USB turnaround time
            using FHMOD = Field<29, 1>;    // Force host mode
            using FDMOD = Field<30, 1>;    // Force device mode
            using CTXPKT = Field<31, 1>;    // Corrupt Tx packet
        };

        // OTG_FS reset register (OTG_FS_GRSTCTL)
        struct FS_GRSTCTL : public Register<0x50000010> {
            using CSRST = Field<0, 1>;    // Core soft reset
            using HSRST = Field<1, 1>;    // HCLK soft reset
            using FCRST = Field<2, 1>;    // Host frame counter reset
            using RXFFLSH = Field<4, 1>;    // RxFIFO flush
            using TXFFLSH = Field<5, 1>;    // TxFIFO flush
            using TXFNUM = Field<6, 5>;    // TxFIFO number
            using AHBIDL = Field<31, 1>;    // AHB master idle
        };

        // OTG_FS core interrupt register (OTG_FS_GINTSTS)
        struct FS_GINTSTS : public Register<0x50000014> {
            using CMOD = Field<0, 1>;    // Current mode of operation
            using MMIS = Field<1, 1>;    // Mode mismatch interrupt
            using OTGINT = Field<2, 1>;    // OTG interrupt
            using SOF = Field<3, 1>;    // Start of frame
            using RXFLVL = Field<4, 1>;    // RxFIFO non-empty
            using NPTXFE = Field<5, 1>;    // Non-periodic TxFIFO empty
            using GINAKEFF = Field<6, 1>;    // Global IN non-periodic NAK effective
            using GOUTNAKEFF = Field<7, 1>;    // Global OUT NAK effective
            using ESUSP = Field<10, 1>;    // Early suspend
            using USBSUSP = Field<11, 1>;    // USB suspend
            using USBRST = Field<12, 1>;    // USB reset
            using ENUMDNE = Field<13, 1>;    // Enumeration done
            using ISOODRP = Field<14, 1>;    // Isochronous OUT packet dropped interrupt
            using EOPF = Field<15, 1>;    // End of periodic frame interrupt
            using IEPINT = Field<18, 1>;    // IN endpoint interrupt
            using OEPINT = Field<19, 1>;    // OUT endpoint interrupt
            using IISOIXFR = Field<20, 1>;    // Incomplete isochronous IN transfer
            using IPXFR_INCOMPISOOUT = Field<21, 1>;    // Incomplete periodic transfer(Host mode)/Incomplete isochronous OUT transfer(Device mode)
            using HPRTINT = Field<24, 1>;    // Host port interrupt
            using HCINT = Field<25, 1>;    // Host channels interrupt
            using PTXFE = Field<26, 1>;    // Periodic TxFIFO empty
            using CIDSCHG = Field<28, 1>;    // Connector ID status change
            using DISCINT = Field<29, 1>;    // Disconnect detected interrupt
            using SRQINT = Field<30, 1>;    // Session request/new session detected interrupt
            using WKUPINT = Field<31, 1>;    // Resume/remote wakeup detected interrupt
        };

        // OTG_FS interrupt mask register (OTG_FS_GINTMSK)
        struct FS_GINTMSK : public Register<0x50000018> {
            using MMISM = Field<1, 1>;    // Mode mismatch interrupt mask
            using OTGINT = Field<2, 1>;    // OTG interrupt mask
            using SOFM = Field<3, 1>;    // Start of frame mask
            using RXFLVLM = Field<4, 1>;    // Receive FIFO non-empty mask
            using NPTXFEM = Field<5, 1>;    // Non-periodic TxFIFO empty mask
            using GINAKEFFM = Field<6, 1>;    // Global non-periodic IN NAK effective mask
            using GONAKEFFM = Field<7, 1>;    // Global OUT NAK effective mask
            using ESUSPM = Field<10, 1>;    // Early suspend mask
            using USBSUSPM = Field<11, 1>;    // USB suspend mask
            using USBRST = Field<12, 1>;    // USB reset mask
            using ENUMDNEM = Field<13, 1>;    // Enumeration done mask
            using ISOODRPM = Field<14, 1>;    // Isochronous OUT packet dropped interrupt mask
            using EOPFM = Field<15, 1>;    // End of periodic frame interrupt mask
            using EPMISM = Field<17, 1>;    // Endpoint mismatch interrupt mask
            using IEPINT = Field<18, 1>;    // IN endpoints interrupt mask
            using OEPINT = Field<19, 1>;    // OUT endpoints interrupt mask
            using IISOIXFRM = Field<20, 1>;    // Incomplete isochronous IN transfer mask
            using IPXFRM_IISOOXFRM = Field<21, 1>;    // Incomplete periodic transfer mask(Host mode)/Incomplete isochronous OUT transfer mask(Device mode)
            using PRTIM = Field<24, 1>;    // Host port interrupt mask
            using HCIM = Field<25, 1>;    // Host channels interrupt mask
            using PTXFEM = Field<26, 1>;    // Periodic TxFIFO empty mask
            using CIDSCHGM = Field<28, 1>;    // Connector ID status change mask
            using DISCINT = Field<29, 1>;    // Disconnect detected interrupt mask
            using SRQIM = Field<30, 1>;    // Session request/new session detected interrupt mask
            using WUIM = Field<31, 1>;    // Resume/remote wakeup detected interrupt mask
        };

        // OTG_FS Receive status debug read(Device mode)
        struct FS_GRXSTSR_Device : public RegisterReadOnly<0x5000001c> {
            using EPNUM = Field<0, 4>;    // Endpoint number
            using BCNT = Field<4, 11>;    // Byte count
            using DPID = Field<15, 2>;    // Data PID
            using PKTSTS = Field<17, 4>;    // Packet status
            using FRMNUM = Field<21, 4>;    // Frame number
        };

        // OTG_FS Receive status debug read(Host mode)
        struct FS_GRXSTSR_Host : public RegisterReadOnly<0x5000001c> {
            using EPNUM = Field<0, 4>;    // Endpoint number
            using BCNT = Field<4, 11>;    // Byte count
            using DPID = Field<15, 2>;    // Data PID
            using PKTSTS = Field<17, 4>;    // Packet status
            using FRMNUM = Field<21, 4>;    // Frame number
        };

        // OTG_FS Receive FIFO size register (OTG_FS_GRXFSIZ)
        struct FS_GRXFSIZ : public Register<0x50000024> {
            using RXFD = Field<0, 16>;    // RxFIFO depth
        };

        // OTG_FS non-periodic transmit FIFO size register (Device mode)
        struct FS_GNPTXFSIZ_Device : public Register<0x50000028> {
            using TX0FSA = Field<0, 16>;    // Endpoint 0 transmit RAM start address
            using TX0FD = Field<16, 16>;    // Endpoint 0 TxFIFO depth
        };

        // OTG_FS non-periodic transmit FIFO size register (Host mode)
        struct FS_GNPTXFSIZ_Host : public Register<0x50000028> {
            using NPTXFSA = Field<0, 16>;    // Non-periodic transmit RAM start address
            using NPTXFD = Field<16, 16>;    // Non-periodic TxFIFO depth
        };

        // OTG_FS non-periodic transmit FIFO/queue status register (OTG_FS_GNPTXSTS)
        struct FS_GNPTXSTS : public RegisterReadOnly<0x5000002c> {
            using NPTXFSAV = Field<0, 16>;    // Non-periodic TxFIFO space available
            using NPTQXSAV = Field<16, 8>;    // Non-periodic transmit request queue space available
            using NPTXQTOP = Field<24, 7>;    // Top of the non-periodic transmit request queue
        };

        // OTG_FS general core configuration register (OTG_FS_GCCFG)
        struct FS_GCCFG : public Register<0x50000038> {
            using PWRDWN = Field<16, 1>;    // Power down
            using VBUSASEN = Field<18, 1>;    // Enable the VBUS sensing device
            using VBUSBSEN = Field<19, 1>;    // Enable the VBUS sensing device
            using SOFOUTEN = Field<20, 1>;    // SOF output enable
        };

        // core ID register
        struct FS_CID : public Register<0x5000003c> {
            using PRODUCT_ID = Field<0, 32>;    // Product ID field
        };

        // OTG_FS Host periodic transmit FIFO size register (OTG_FS_HPTXFSIZ)
        struct FS_HPTXFSIZ : public Register<0x50000100> {
            using PTXSA = Field<0, 16>;    // Host periodic TxFIFO start address
            using PTXFSIZ = Field<16, 16>;    // Host periodic TxFIFO depth
        };

        // OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF2)
        struct FS_DIEPTXF1 : public Register<0x50000104> {
            using INEPTXSA = Field<0, 16>;    // IN endpoint FIFO2 transmit RAM start address
            using INEPTXFD = Field<16, 16>;    // IN endpoint TxFIFO depth
        };

        // OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF3)
        struct FS_DIEPTXF2 : public Register<0x50000108> {
            using INEPTXSA = Field<0, 16>;    // IN endpoint FIFO3 transmit RAM start address
            using INEPTXFD = Field<16, 16>;    // IN endpoint TxFIFO depth
        };

        // OTG_FS device IN endpoint transmit FIFO size register (OTG_FS_DIEPTXF4)
        struct FS_DIEPTXF3 : public Register<0x5000010c> {
            using INEPTXSA = Field<0, 16>;    // IN endpoint FIFO4 transmit RAM start address
            using INEPTXFD = Field<16, 16>;    // IN endpoint TxFIFO depth
        };

    };

    // USB on the go full speed
    struct OTG_FS_HOST {
        // OTG_FS host configuration register (OTG_FS_HCFG)
        struct FS_HCFG : public Register<0x50000400> {
            using FSLSPCS = Field<0, 2>;    // FS/LS PHY clock select
            using FSLSS = Field<2, 1>;    // FS- and LS-only support
        };

        // OTG_FS Host frame interval register
        struct HFIR : public Register<0x50000404> {
            using FRIVL = Field<0, 16>;    // Frame interval
        };

        // OTG_FS host frame number/frame time remaining register (OTG_FS_HFNUM)
        struct FS_HFNUM : public RegisterReadOnly<0x50000408> {
            using FRNUM = Field<0, 16>;    // Frame number
            using FTREM = Field<16, 16>;    // Frame time remaining
        };

        // OTG_FS_Host periodic transmit FIFO/queue status register (OTG_FS_HPTXSTS)
        struct FS_HPTXSTS : public Register<0x50000410> {
            using PTXFSAVL = Field<0, 16>;    // Periodic transmit data FIFO space available
            using PTXQSAV = Field<16, 8>;    // Periodic transmit request queue space available
            using PTXQTOP = Field<24, 8>;    // Top of the periodic transmit request queue
        };

        // OTG_FS Host all channels interrupt register
        struct HAINT : public RegisterReadOnly<0x50000414> {
            using Field = Field<0, 16>;    // Channel interrupts
        };

        // OTG_FS host all channels interrupt mask register
        struct HAINTMSK : public Register<0x50000418> {
            using HAINTM = Field<0, 16>;    // Channel interrupt mask
        };

        // OTG_FS host port control and status register (OTG_FS_HPRT)
        struct FS_HPRT : public Register<0x50000440> {
            using PCSTS = Field<0, 1>;    // Port connect status
            using PCDET = Field<1, 1>;    // Port connect detected
            using PENA = Field<2, 1>;    // Port enable
            using PENCHNG = Field<3, 1>;    // Port enable/disable change
            using POCA = Field<4, 1>;    // Port overcurrent active
            using POCCHNG = Field<5, 1>;    // Port overcurrent change
            using PRES = Field<6, 1>;    // Port resume
            using PSUSP = Field<7, 1>;    // Port suspend
            using PRST = Field<8, 1>;    // Port reset
            using PLSTS = Field<10, 2>;    // Port line status
            using PPWR = Field<12, 1>;    // Port power
            using PTCTL = Field<13, 4>;    // Port test control
            using PSPD = Field<17, 2>;    // Port speed
        };

        // OTG_FS host channel-0 characteristics register (OTG_FS_HCCHAR0)
        struct FS_HCCHAR0 : public Register<0x50000500> {
            using MPSIZ = Field<0, 11>;    // Maximum packet size
            using EPNUM = Field<11, 4>;    // Endpoint number
            using EPDIR = Field<15, 1>;    // Endpoint direction
            using LSDEV = Field<17, 1>;    // Low-speed device
            using EPTYP = Field<18, 2>;    // Endpoint type
            using MCNT = Field<20, 2>;    // Multicount
            using DAD = Field<22, 7>;    // Device address
            using ODDFRM = Field<29, 1>;    // Odd frame
            using CHDIS = Field<30, 1>;    // Channel disable
            using CHENA = Field<31, 1>;    // Channel enable
        };

        // OTG_FS host channel-1 characteristics register (OTG_FS_HCCHAR1)
        struct FS_HCCHAR1 : public Register<0x50000520> {
            using MPSIZ = Field<0, 11>;    // Maximum packet size
            using EPNUM = Field<11, 4>;    // Endpoint number
            using EPDIR = Field<15, 1>;    // Endpoint direction
            using LSDEV = Field<17, 1>;    // Low-speed device
            using EPTYP = Field<18, 2>;    // Endpoint type
            using MCNT = Field<20, 2>;    // Multicount
            using DAD = Field<22, 7>;    // Device address
            using ODDFRM = Field<29, 1>;    // Odd frame
            using CHDIS = Field<30, 1>;    // Channel disable
            using CHENA = Field<31, 1>;    // Channel enable
        };

        // OTG_FS host channel-2 characteristics register (OTG_FS_HCCHAR2)
        struct FS_HCCHAR2 : public Register<0x50000540> {
            using MPSIZ = Field<0, 11>;    // Maximum packet size
            using EPNUM = Field<11, 4>;    // Endpoint number
            using EPDIR = Field<15, 1>;    // Endpoint direction
            using LSDEV = Field<17, 1>;    // Low-speed device
            using EPTYP = Field<18, 2>;    // Endpoint type
            using MCNT = Field<20, 2>;    // Multicount
            using DAD = Field<22, 7>;    // Device address
            using ODDFRM = Field<29, 1>;    // Odd frame
            using CHDIS = Field<30, 1>;    // Channel disable
            using CHENA = Field<31, 1>;    // Channel enable
        };

        // OTG_FS host channel-3 characteristics register (OTG_FS_HCCHAR3)
        struct FS_HCCHAR3 : public Register<0x50000560> {
            using MPSIZ = Field<0, 11>;    // Maximum packet size
            using EPNUM = Field<11, 4>;    // Endpoint number
            using EPDIR = Field<15, 1>;    // Endpoint direction
            using LSDEV = Field<17, 1>;    // Low-speed device
            using EPTYP = Field<18, 2>;    // Endpoint type
            using MCNT = Field<20, 2>;    // Multicount
            using DAD = Field<22, 7>;    // Device address
            using ODDFRM = Field<29, 1>;    // Odd frame
            using CHDIS = Field<30, 1>;    // Channel disable
            using CHENA = Field<31, 1>;    // Channel enable
        };

        // OTG_FS host channel-4 characteristics register (OTG_FS_HCCHAR4)
        struct FS_HCCHAR4 : public Register<0x50000580> {
            using MPSIZ = Field<0, 11>;    // Maximum packet size
            using EPNUM = Field<11, 4>;    // Endpoint number
            using EPDIR = Field<15, 1>;    // Endpoint direction
            using LSDEV = Field<17, 1>;    // Low-speed device
            using EPTYP = Field<18, 2>;    // Endpoint type
            using MCNT = Field<20, 2>;    // Multicount
            using DAD = Field<22, 7>;    // Device address
            using ODDFRM = Field<29, 1>;    // Odd frame
            using CHDIS = Field<30, 1>;    // Channel disable
            using CHENA = Field<31, 1>;    // Channel enable
        };

        // OTG_FS host channel-5 characteristics register (OTG_FS_HCCHAR5)
        struct FS_HCCHAR5 : public Register<0x500005a0> {
            using MPSIZ = Field<0, 11>;    // Maximum packet size
            using EPNUM = Field<11, 4>;    // Endpoint number
            using EPDIR = Field<15, 1>;    // Endpoint direction
            using LSDEV = Field<17, 1>;    // Low-speed device
            using EPTYP = Field<18, 2>;    // Endpoint type
            using MCNT = Field<20, 2>;    // Multicount
            using DAD = Field<22, 7>;    // Device address
            using ODDFRM = Field<29, 1>;    // Odd frame
            using CHDIS = Field<30, 1>;    // Channel disable
            using CHENA = Field<31, 1>;    // Channel enable
        };

        // OTG_FS host channel-6 characteristics register (OTG_FS_HCCHAR6)
        struct FS_HCCHAR6 : public Register<0x500005c0> {
            using MPSIZ = Field<0, 11>;    // Maximum packet size
            using EPNUM = Field<11, 4>;    // Endpoint number
            using EPDIR = Field<15, 1>;    // Endpoint direction
            using LSDEV = Field<17, 1>;    // Low-speed device
            using EPTYP = Field<18, 2>;    // Endpoint type
            using MCNT = Field<20, 2>;    // Multicount
            using DAD = Field<22, 7>;    // Device address
            using ODDFRM = Field<29, 1>;    // Odd frame
            using CHDIS = Field<30, 1>;    // Channel disable
            using CHENA = Field<31, 1>;    // Channel enable
        };

        // OTG_FS host channel-7 characteristics register (OTG_FS_HCCHAR7)
        struct FS_HCCHAR7 : public Register<0x500005e0> {
            using MPSIZ = Field<0, 11>;    // Maximum packet size
            using EPNUM = Field<11, 4>;    // Endpoint number
            using EPDIR = Field<15, 1>;    // Endpoint direction
            using LSDEV = Field<17, 1>;    // Low-speed device
            using EPTYP = Field<18, 2>;    // Endpoint type
            using MCNT = Field<20, 2>;    // Multicount
            using DAD = Field<22, 7>;    // Device address
            using ODDFRM = Field<29, 1>;    // Odd frame
            using CHDIS = Field<30, 1>;    // Channel disable
            using CHENA = Field<31, 1>;    // Channel enable
        };

        // OTG_FS host channel-0 interrupt register (OTG_FS_HCINT0)
        struct FS_HCINT0 : public Register<0x50000508> {
            using XFRC = Field<0, 1>;    // Transfer completed
            using CHH = Field<1, 1>;    // Channel halted
            using STALL = Field<3, 1>;    // STALL response received interrupt
            using NAK = Field<4, 1>;    // NAK response received interrupt
            using ACK = Field<5, 1>;    // ACK response received/transmitted interrupt
            using TXERR = Field<7, 1>;    // Transaction error
            using BBERR = Field<8, 1>;    // Babble error
            using FRMOR = Field<9, 1>;    // Frame overrun
            using DTERR = Field<10, 1>;    // Data toggle error
        };

        // OTG_FS host channel-1 interrupt register (OTG_FS_HCINT1)
        struct FS_HCINT1 : public Register<0x50000528> {
            using XFRC = Field<0, 1>;    // Transfer completed
            using CHH = Field<1, 1>;    // Channel halted
            using STALL = Field<3, 1>;    // STALL response received interrupt
            using NAK = Field<4, 1>;    // NAK response received interrupt
            using ACK = Field<5, 1>;    // ACK response received/transmitted interrupt
            using TXERR = Field<7, 1>;    // Transaction error
            using BBERR = Field<8, 1>;    // Babble error
            using FRMOR = Field<9, 1>;    // Frame overrun
            using DTERR = Field<10, 1>;    // Data toggle error
        };

        // OTG_FS host channel-2 interrupt register (OTG_FS_HCINT2)
        struct FS_HCINT2 : public Register<0x50000548> {
            using XFRC = Field<0, 1>;    // Transfer completed
            using CHH = Field<1, 1>;    // Channel halted
            using STALL = Field<3, 1>;    // STALL response received interrupt
            using NAK = Field<4, 1>;    // NAK response received interrupt
            using ACK = Field<5, 1>;    // ACK response received/transmitted interrupt
            using TXERR = Field<7, 1>;    // Transaction error
            using BBERR = Field<8, 1>;    // Babble error
            using FRMOR = Field<9, 1>;    // Frame overrun
            using DTERR = Field<10, 1>;    // Data toggle error
        };

        // OTG_FS host channel-3 interrupt register (OTG_FS_HCINT3)
        struct FS_HCINT3 : public Register<0x50000568> {
            using XFRC = Field<0, 1>;    // Transfer completed
            using CHH = Field<1, 1>;    // Channel halted
            using STALL = Field<3, 1>;    // STALL response received interrupt
            using NAK = Field<4, 1>;    // NAK response received interrupt
            using ACK = Field<5, 1>;    // ACK response received/transmitted interrupt
            using TXERR = Field<7, 1>;    // Transaction error
            using BBERR = Field<8, 1>;    // Babble error
            using FRMOR = Field<9, 1>;    // Frame overrun
            using DTERR = Field<10, 1>;    // Data toggle error
        };

        // OTG_FS host channel-4 interrupt register (OTG_FS_HCINT4)
        struct FS_HCINT4 : public Register<0x50000588> {
            using XFRC = Field<0, 1>;    // Transfer completed
            using CHH = Field<1, 1>;    // Channel halted
            using STALL = Field<3, 1>;    // STALL response received interrupt
            using NAK = Field<4, 1>;    // NAK response received interrupt
            using ACK = Field<5, 1>;    // ACK response received/transmitted interrupt
            using TXERR = Field<7, 1>;    // Transaction error
            using BBERR = Field<8, 1>;    // Babble error
            using FRMOR = Field<9, 1>;    // Frame overrun
            using DTERR = Field<10, 1>;    // Data toggle error
        };

        // OTG_FS host channel-5 interrupt register (OTG_FS_HCINT5)
        struct FS_HCINT5 : public Register<0x500005a8> {
            using XFRC = Field<0, 1>;    // Transfer completed
            using CHH = Field<1, 1>;    // Channel halted
            using STALL = Field<3, 1>;    // STALL response received interrupt
            using NAK = Field<4, 1>;    // NAK response received interrupt
            using ACK = Field<5, 1>;    // ACK response received/transmitted interrupt
            using TXERR = Field<7, 1>;    // Transaction error
            using BBERR = Field<8, 1>;    // Babble error
            using FRMOR = Field<9, 1>;    // Frame overrun
            using DTERR = Field<10, 1>;    // Data toggle error
        };

        // OTG_FS host channel-6 interrupt register (OTG_FS_HCINT6)
        struct FS_HCINT6 : public Register<0x500005c8> {
            using XFRC = Field<0, 1>;    // Transfer completed
            using CHH = Field<1, 1>;    // Channel halted
            using STALL = Field<3, 1>;    // STALL response received interrupt
            using NAK = Field<4, 1>;    // NAK response received interrupt
            using ACK = Field<5, 1>;    // ACK response received/transmitted interrupt
            using TXERR = Field<7, 1>;    // Transaction error
            using BBERR = Field<8, 1>;    // Babble error
            using FRMOR = Field<9, 1>;    // Frame overrun
            using DTERR = Field<10, 1>;    // Data toggle error
        };

        // OTG_FS host channel-7 interrupt register (OTG_FS_HCINT7)
        struct FS_HCINT7 : public Register<0x500005e8> {
            using XFRC = Field<0, 1>;    // Transfer completed
            using CHH = Field<1, 1>;    // Channel halted
            using STALL = Field<3, 1>;    // STALL response received interrupt
            using NAK = Field<4, 1>;    // NAK response received interrupt
            using ACK = Field<5, 1>;    // ACK response received/transmitted interrupt
            using TXERR = Field<7, 1>;    // Transaction error
            using BBERR = Field<8, 1>;    // Babble error
            using FRMOR = Field<9, 1>;    // Frame overrun
            using DTERR = Field<10, 1>;    // Data toggle error
        };

        // OTG_FS host channel-0 mask register (OTG_FS_HCINTMSK0)
        struct FS_HCINTMSK0 : public Register<0x5000050c> {
            using XFRCM = Field<0, 1>;    // Transfer completed mask
            using CHHM = Field<1, 1>;    // Channel halted mask
            using STALLM = Field<3, 1>;    // STALL response received interrupt mask
            using NAKM = Field<4, 1>;    // NAK response received interrupt mask
            using ACKM = Field<5, 1>;    // ACK response received/transmitted interrupt mask
            using NYET = Field<6, 1>;    // response received interrupt mask
            using TXERRM = Field<7, 1>;    // Transaction error mask
            using BBERRM = Field<8, 1>;    // Babble error mask
            using FRMORM = Field<9, 1>;    // Frame overrun mask
            using DTERRM = Field<10, 1>;    // Data toggle error mask
        };

        // OTG_FS host channel-1 mask register (OTG_FS_HCINTMSK1)
        struct FS_HCINTMSK1 : public Register<0x5000052c> {
            using XFRCM = Field<0, 1>;    // Transfer completed mask
            using CHHM = Field<1, 1>;    // Channel halted mask
            using STALLM = Field<3, 1>;    // STALL response received interrupt mask
            using NAKM = Field<4, 1>;    // NAK response received interrupt mask
            using ACKM = Field<5, 1>;    // ACK response received/transmitted interrupt mask
            using NYET = Field<6, 1>;    // response received interrupt mask
            using TXERRM = Field<7, 1>;    // Transaction error mask
            using BBERRM = Field<8, 1>;    // Babble error mask
            using FRMORM = Field<9, 1>;    // Frame overrun mask
            using DTERRM = Field<10, 1>;    // Data toggle error mask
        };

        // OTG_FS host channel-2 mask register (OTG_FS_HCINTMSK2)
        struct FS_HCINTMSK2 : public Register<0x5000054c> {
            using XFRCM = Field<0, 1>;    // Transfer completed mask
            using CHHM = Field<1, 1>;    // Channel halted mask
            using STALLM = Field<3, 1>;    // STALL response received interrupt mask
            using NAKM = Field<4, 1>;    // NAK response received interrupt mask
            using ACKM = Field<5, 1>;    // ACK response received/transmitted interrupt mask
            using NYET = Field<6, 1>;    // response received interrupt mask
            using TXERRM = Field<7, 1>;    // Transaction error mask
            using BBERRM = Field<8, 1>;    // Babble error mask
            using FRMORM = Field<9, 1>;    // Frame overrun mask
            using DTERRM = Field<10, 1>;    // Data toggle error mask
        };

        // OTG_FS host channel-3 mask register (OTG_FS_HCINTMSK3)
        struct FS_HCINTMSK3 : public Register<0x5000056c> {
            using XFRCM = Field<0, 1>;    // Transfer completed mask
            using CHHM = Field<1, 1>;    // Channel halted mask
            using STALLM = Field<3, 1>;    // STALL response received interrupt mask
            using NAKM = Field<4, 1>;    // NAK response received interrupt mask
            using ACKM = Field<5, 1>;    // ACK response received/transmitted interrupt mask
            using NYET = Field<6, 1>;    // response received interrupt mask
            using TXERRM = Field<7, 1>;    // Transaction error mask
            using BBERRM = Field<8, 1>;    // Babble error mask
            using FRMORM = Field<9, 1>;    // Frame overrun mask
            using DTERRM = Field<10, 1>;    // Data toggle error mask
        };

        // OTG_FS host channel-4 mask register (OTG_FS_HCINTMSK4)
        struct FS_HCINTMSK4 : public Register<0x5000058c> {
            using XFRCM = Field<0, 1>;    // Transfer completed mask
            using CHHM = Field<1, 1>;    // Channel halted mask
            using STALLM = Field<3, 1>;    // STALL response received interrupt mask
            using NAKM = Field<4, 1>;    // NAK response received interrupt mask
            using ACKM = Field<5, 1>;    // ACK response received/transmitted interrupt mask
            using NYET = Field<6, 1>;    // response received interrupt mask
            using TXERRM = Field<7, 1>;    // Transaction error mask
            using BBERRM = Field<8, 1>;    // Babble error mask
            using FRMORM = Field<9, 1>;    // Frame overrun mask
            using DTERRM = Field<10, 1>;    // Data toggle error mask
        };

        // OTG_FS host channel-5 mask register (OTG_FS_HCINTMSK5)
        struct FS_HCINTMSK5 : public Register<0x500005ac> {
            using XFRCM = Field<0, 1>;    // Transfer completed mask
            using CHHM = Field<1, 1>;    // Channel halted mask
            using STALLM = Field<3, 1>;    // STALL response received interrupt mask
            using NAKM = Field<4, 1>;    // NAK response received interrupt mask
            using ACKM = Field<5, 1>;    // ACK response received/transmitted interrupt mask
            using NYET = Field<6, 1>;    // response received interrupt mask
            using TXERRM = Field<7, 1>;    // Transaction error mask
            using BBERRM = Field<8, 1>;    // Babble error mask
            using FRMORM = Field<9, 1>;    // Frame overrun mask
            using DTERRM = Field<10, 1>;    // Data toggle error mask
        };

        // OTG_FS host channel-6 mask register (OTG_FS_HCINTMSK6)
        struct FS_HCINTMSK6 : public Register<0x500005cc> {
            using XFRCM = Field<0, 1>;    // Transfer completed mask
            using CHHM = Field<1, 1>;    // Channel halted mask
            using STALLM = Field<3, 1>;    // STALL response received interrupt mask
            using NAKM = Field<4, 1>;    // NAK response received interrupt mask
            using ACKM = Field<5, 1>;    // ACK response received/transmitted interrupt mask
            using NYET = Field<6, 1>;    // response received interrupt mask
            using TXERRM = Field<7, 1>;    // Transaction error mask
            using BBERRM = Field<8, 1>;    // Babble error mask
            using FRMORM = Field<9, 1>;    // Frame overrun mask
            using DTERRM = Field<10, 1>;    // Data toggle error mask
        };

        // OTG_FS host channel-7 mask register (OTG_FS_HCINTMSK7)
        struct FS_HCINTMSK7 : public Register<0x500005ec> {
            using XFRCM = Field<0, 1>;    // Transfer completed mask
            using CHHM = Field<1, 1>;    // Channel halted mask
            using STALLM = Field<3, 1>;    // STALL response received interrupt mask
            using NAKM = Field<4, 1>;    // NAK response received interrupt mask
            using ACKM = Field<5, 1>;    // ACK response received/transmitted interrupt mask
            using NYET = Field<6, 1>;    // response received interrupt mask
            using TXERRM = Field<7, 1>;    // Transaction error mask
            using BBERRM = Field<8, 1>;    // Babble error mask
            using FRMORM = Field<9, 1>;    // Frame overrun mask
            using DTERRM = Field<10, 1>;    // Data toggle error mask
        };

        // OTG_FS host channel-0 transfer size register
        struct FS_HCTSIZ0 : public Register<0x50000510> {
            using XFRSIZ = Field<0, 19>;    // Transfer size
            using PKTCNT = Field<19, 10>;    // Packet count
            using DPID = Field<29, 2>;    // Data PID
        };

        // OTG_FS host channel-1 transfer size register
        struct FS_HCTSIZ1 : public Register<0x50000530> {
            using XFRSIZ = Field<0, 19>;    // Transfer size
            using PKTCNT = Field<19, 10>;    // Packet count
            using DPID = Field<29, 2>;    // Data PID
        };

        // OTG_FS host channel-2 transfer size register
        struct FS_HCTSIZ2 : public Register<0x50000550> {
            using XFRSIZ = Field<0, 19>;    // Transfer size
            using PKTCNT = Field<19, 10>;    // Packet count
            using DPID = Field<29, 2>;    // Data PID
        };

        // OTG_FS host channel-3 transfer size register
        struct FS_HCTSIZ3 : public Register<0x50000570> {
            using XFRSIZ = Field<0, 19>;    // Transfer size
            using PKTCNT = Field<19, 10>;    // Packet count
            using DPID = Field<29, 2>;    // Data PID
        };

        // OTG_FS host channel-x transfer size register
        struct FS_HCTSIZ4 : public Register<0x50000590> {
            using XFRSIZ = Field<0, 19>;    // Transfer size
            using PKTCNT = Field<19, 10>;    // Packet count
            using DPID = Field<29, 2>;    // Data PID
        };

        // OTG_FS host channel-5 transfer size register
        struct FS_HCTSIZ5 : public Register<0x500005b0> {
            using XFRSIZ = Field<0, 19>;    // Transfer size
            using PKTCNT = Field<19, 10>;    // Packet count
            using DPID = Field<29, 2>;    // Data PID
        };

        // OTG_FS host channel-6 transfer size register
        struct FS_HCTSIZ6 : public Register<0x500005d0> {
            using XFRSIZ = Field<0, 19>;    // Transfer size
            using PKTCNT = Field<19, 10>;    // Packet count
            using DPID = Field<29, 2>;    // Data PID
        };

        // OTG_FS host channel-7 transfer size register
        struct FS_HCTSIZ7 : public Register<0x500005f0> {
            using XFRSIZ = Field<0, 19>;    // Transfer size
            using PKTCNT = Field<19, 10>;    // Packet count
            using DPID = Field<29, 2>;    // Data PID
        };

    };

    // USB on the go full speed
    struct OTG_FS_PWRCLK {
        // OTG_FS power and clock gating control register
        struct FS_PCGCCTL : public Register<0x50000e00> {
            using STPPCLK = Field<0, 1>;    // Stop PHY clock
            using GATEHCLK = Field<1, 1>;    // Gate HCLK
            using PHYSUSP = Field<4, 1>;    // PHY Suspended
        };

    };

    // Power control
    struct PWR {
        // power control register
        struct CR : public Register<0x40007000> {
            using VOS = Field<14, 2>;    // Regulator voltage scaling output selection
            using ADCDC1 = Field<13, 1>;    // ADCDC1
            using FPDS = Field<9, 1>;    // Flash power down in Stop mode
            using DBP = Field<8, 1>;    // Disable backup domain write protection
            using PLS = Field<5, 3>;    // PVD level selection
            using PVDE = Field<4, 1>;    // Power voltage detector enable
            using CSBF = Field<3, 1>;    // Clear standby flag
            using CWUF = Field<2, 1>;    // Clear wakeup flag
            using PDDS = Field<1, 1>;    // Power down deepsleep
            using LPDS = Field<0, 1>;    // Low-power deep sleep
        };

        // power control/status register
        struct CSR : public Register<0x40007004> {
            using WUF = Field<0, 1>;    // Wakeup flag
            using SBF = Field<1, 1>;    // Standby flag
            using PVDO = Field<2, 1>;    // PVD output
            using BRR = Field<3, 1>;    // Backup regulator ready
            using EWUP = Field<8, 1>;    // Enable WKUP pin
            using BRE = Field<9, 1>;    // Backup regulator enable
            using VOSRDY = Field<14, 1>;    // Regulator voltage scaling output selection ready bit
        };

    };

    // Reset and clock control
    struct RCC {
        // clock control register
        struct CR : public Register<0x40023800> {
            using PLLI2SRDY = Field<27, 1>;    // PLLI2S clock ready flag
            using PLLI2SON = Field<26, 1>;    // PLLI2S enable
            using PLLRDY = Field<25, 1>;    // Main PLL (PLL) clock ready flag
            using PLLON = Field<24, 1>;    // Main PLL (PLL) enable
            using CSSON = Field<19, 1>;    // Clock security system enable
            using HSEBYP = Field<18, 1>;    // HSE clock bypass
            using HSERDY = Field<17, 1>;    // HSE clock ready flag
            using HSEON = Field<16, 1>;    // HSE clock enable
            using HSICAL = Field<8, 8>;    // Internal high-speed clock calibration
            using HSITRIM = Field<3, 5>;    // Internal high-speed clock trimming
            using HSIRDY = Field<1, 1>;    // Internal high-speed clock ready flag
            using HSION = Field<0, 1>;    // Internal high-speed clock enable
        };

        // PLL configuration register
        struct PLLCFGR : public Register<0x40023804> {
            using PLLQ3 = Field<27, 1>;    // Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
            using PLLQ2 = Field<26, 1>;    // Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
            using PLLQ1 = Field<25, 1>;    // Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
            using PLLQ0 = Field<24, 1>;    // Main PLL (PLL) division factor for USB OTG FS, SDIO and random number generator clocks
            using PLLSRC = Field<22, 1>;    // Main PLL(PLL) and audio PLL (PLLI2S) entry clock source
            using PLLP1 = Field<17, 1>;    // Main PLL (PLL) division factor for main system clock
            using PLLP0 = Field<16, 1>;    // Main PLL (PLL) division factor for main system clock
            using PLLN8 = Field<14, 1>;    // Main PLL (PLL) multiplication factor for VCO
            using PLLN7 = Field<13, 1>;    // Main PLL (PLL) multiplication factor for VCO
            using PLLN6 = Field<12, 1>;    // Main PLL (PLL) multiplication factor for VCO
            using PLLN5 = Field<11, 1>;    // Main PLL (PLL) multiplication factor for VCO
            using PLLN4 = Field<10, 1>;    // Main PLL (PLL) multiplication factor for VCO
            using PLLN3 = Field<9, 1>;    // Main PLL (PLL) multiplication factor for VCO
            using PLLN2 = Field<8, 1>;    // Main PLL (PLL) multiplication factor for VCO
            using PLLN1 = Field<7, 1>;    // Main PLL (PLL) multiplication factor for VCO
            using PLLN0 = Field<6, 1>;    // Main PLL (PLL) multiplication factor for VCO
            using PLLM5 = Field<5, 1>;    // Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
            using PLLM4 = Field<4, 1>;    // Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
            using PLLM3 = Field<3, 1>;    // Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
            using PLLM2 = Field<2, 1>;    // Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
            using PLLM1 = Field<1, 1>;    // Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
            using PLLM0 = Field<0, 1>;    // Division factor for the main PLL (PLL) and audio PLL (PLLI2S) input clock
        };

        // clock configuration register
        struct CFGR : public Register<0x40023808> {
            using MCO2 = Field<30, 2>;    // Microcontroller clock output 2
            using MCO2PRE = Field<27, 3>;    // MCO2 prescaler
            using MCO1PRE = Field<24, 3>;    // MCO1 prescaler
            using I2SSRC = Field<23, 1>;    // I2S clock selection
            using MCO1 = Field<21, 2>;    // Microcontroller clock output 1
            using RTCPRE = Field<16, 5>;    // HSE division factor for RTC clock
            using PPRE2 = Field<13, 3>;    // APB high-speed prescaler (APB2)
            using PPRE1 = Field<10, 3>;    // APB Low speed prescaler (APB1)
            using HPRE = Field<4, 4>;    // AHB prescaler
            using SWS1 = Field<3, 1>;    // System clock switch status
            using SWS0 = Field<2, 1>;    // System clock switch status
            using SW1 = Field<1, 1>;    // System clock switch
            using SW0 = Field<0, 1>;    // System clock switch
        };

        // clock interrupt register
        struct CIR : public Register<0x4002380c> {
            using CSSC = Field<23, 1>;    // Clock security system interrupt clear
            using PLLI2SRDYC = Field<21, 1>;    // PLLI2S ready interrupt clear
            using PLLRDYC = Field<20, 1>;    // Main PLL(PLL) ready interrupt clear
            using HSERDYC = Field<19, 1>;    // HSE ready interrupt clear
            using HSIRDYC = Field<18, 1>;    // HSI ready interrupt clear
            using LSERDYC = Field<17, 1>;    // LSE ready interrupt clear
            using LSIRDYC = Field<16, 1>;    // LSI ready interrupt clear
            using PLLI2SRDYIE = Field<13, 1>;    // PLLI2S ready interrupt enable
            using PLLRDYIE = Field<12, 1>;    // Main PLL (PLL) ready interrupt enable
            using HSERDYIE = Field<11, 1>;    // HSE ready interrupt enable
            using HSIRDYIE = Field<10, 1>;    // HSI ready interrupt enable
            using LSERDYIE = Field<9, 1>;    // LSE ready interrupt enable
            using LSIRDYIE = Field<8, 1>;    // LSI ready interrupt enable
            using CSSF = Field<7, 1>;    // Clock security system interrupt flag
            using PLLI2SRDYF = Field<5, 1>;    // PLLI2S ready interrupt flag
            using PLLRDYF = Field<4, 1>;    // Main PLL (PLL) ready interrupt flag
            using HSERDYF = Field<3, 1>;    // HSE ready interrupt flag
            using HSIRDYF = Field<2, 1>;    // HSI ready interrupt flag
            using LSERDYF = Field<1, 1>;    // LSE ready interrupt flag
            using LSIRDYF = Field<0, 1>;    // LSI ready interrupt flag
        };

        // AHB1 peripheral reset register
        struct AHB1RSTR : public Register<0x40023810> {
            using DMA2RST = Field<22, 1>;    // DMA2 reset
            using DMA1RST = Field<21, 1>;    // DMA2 reset
            using CRCRST = Field<12, 1>;    // CRC reset
            using GPIOHRST = Field<7, 1>;    // IO port H reset
            using GPIOERST = Field<4, 1>;    // IO port E reset
            using GPIODRST = Field<3, 1>;    // IO port D reset
            using GPIOCRST = Field<2, 1>;    // IO port C reset
            using GPIOBRST = Field<1, 1>;    // IO port B reset
            using GPIOARST = Field<0, 1>;    // IO port A reset
        };

        // AHB2 peripheral reset register
        struct AHB2RSTR : public Register<0x40023814> {
            using OTGFSRST = Field<7, 1>;    // USB OTG FS module reset
        };

        // APB1 peripheral reset register
        struct APB1RSTR : public Register<0x40023820> {
            using PWRRST = Field<28, 1>;    // Power interface reset
            using I2C3RST = Field<23, 1>;    // I2C3 reset
            using I2C2RST = Field<22, 1>;    // I2C 2 reset
            using I2C1RST = Field<21, 1>;    // I2C 1 reset
            using UART2RST = Field<17, 1>;    // USART 2 reset
            using SPI3RST = Field<15, 1>;    // SPI 3 reset
            using SPI2RST = Field<14, 1>;    // SPI 2 reset
            using WWDGRST = Field<11, 1>;    // Window watchdog reset
            using TIM5RST = Field<3, 1>;    // TIM5 reset
            using TIM4RST = Field<2, 1>;    // TIM4 reset
            using TIM3RST = Field<1, 1>;    // TIM3 reset
            using TIM2RST = Field<0, 1>;    // TIM2 reset
        };

        // APB2 peripheral reset register
        struct APB2RSTR : public Register<0x40023824> {
            using TIM11RST = Field<18, 1>;    // TIM11 reset
            using TIM10RST = Field<17, 1>;    // TIM10 reset
            using TIM9RST = Field<16, 1>;    // TIM9 reset
            using SYSCFGRST = Field<14, 1>;    // System configuration controller reset
            using SPI1RST = Field<12, 1>;    // SPI 1 reset
            using SDIORST = Field<11, 1>;    // SDIO reset
            using ADCRST = Field<8, 1>;    // ADC interface reset (common to all ADCs)
            using USART6RST = Field<5, 1>;    // USART6 reset
            using USART1RST = Field<4, 1>;    // USART1 reset
            using TIM1RST = Field<0, 1>;    // TIM1 reset
        };

        // AHB1 peripheral clock register
        struct AHB1ENR : public Register<0x40023830> {
            using DMA2EN = Field<22, 1>;    // DMA2 clock enable
            using DMA1EN = Field<21, 1>;    // DMA1 clock enable
            using CRCEN = Field<12, 1>;    // CRC clock enable
            using GPIOHEN = Field<7, 1>;    // IO port H clock enable
            using GPIOEEN = Field<4, 1>;    // IO port E clock enable
            using GPIODEN = Field<3, 1>;    // IO port D clock enable
            using GPIOCEN = Field<2, 1>;    // IO port C clock enable
            using GPIOBEN = Field<1, 1>;    // IO port B clock enable
            using GPIOAEN = Field<0, 1>;    // IO port A clock enable
        };

        // AHB2 peripheral clock enable register
        struct AHB2ENR : public Register<0x40023834> {
            using OTGFSEN = Field<7, 1>;    // USB OTG FS clock enable
        };

        // APB1 peripheral clock enable register
        struct APB1ENR : public Register<0x40023840> {
            using PWREN = Field<28, 1>;    // Power interface clock enable
            using I2C3EN = Field<23, 1>;    // I2C3 clock enable
            using I2C2EN = Field<22, 1>;    // I2C2 clock enable
            using I2C1EN = Field<21, 1>;    // I2C1 clock enable
            using USART2EN = Field<17, 1>;    // USART 2 clock enable
            using SPI3EN = Field<15, 1>;    // SPI3 clock enable
            using SPI2EN = Field<14, 1>;    // SPI2 clock enable
            using WWDGEN = Field<11, 1>;    // Window watchdog clock enable
            using TIM5EN = Field<3, 1>;    // TIM5 clock enable
            using TIM4EN = Field<2, 1>;    // TIM4 clock enable
            using TIM3EN = Field<1, 1>;    // TIM3 clock enable
            using TIM2EN = Field<0, 1>;    // TIM2 clock enable
        };

        // APB2 peripheral clock enable register
        struct APB2ENR : public Register<0x40023844> {
            using TIM1EN = Field<0, 1>;    // TIM1 clock enable
            using USART1EN = Field<4, 1>;    // USART1 clock enable
            using USART6EN = Field<5, 1>;    // USART6 clock enable
            using ADC1EN = Field<8, 1>;    // ADC1 clock enable
            using SDIOEN = Field<11, 1>;    // SDIO clock enable
            using SPI1EN = Field<12, 1>;    // SPI1 clock enable
            using SPI4EN = Field<13, 1>;    // SPI4 clock enable
            using SYSCFGEN = Field<14, 1>;    // System configuration controller clock enable
            using TIM9EN = Field<16, 1>;    // TIM9 clock enable
            using TIM10EN = Field<17, 1>;    // TIM10 clock enable
            using TIM11EN = Field<18, 1>;    // TIM11 clock enable
        };

        // AHB1 peripheral clock enable in low power mode register
        struct AHB1LPENR : public Register<0x40023850> {
            using DMA2LPEN = Field<22, 1>;    // DMA2 clock enable during Sleep mode
            using DMA1LPEN = Field<21, 1>;    // DMA1 clock enable during Sleep mode
            using SRAM1LPEN = Field<16, 1>;    // SRAM 1interface clock enable during Sleep mode
            using FLITFLPEN = Field<15, 1>;    // Flash interface clock enable during Sleep mode
            using CRCLPEN = Field<12, 1>;    // CRC clock enable during Sleep mode
            using GPIOHLPEN = Field<7, 1>;    // IO port H clock enable during Sleep mode
            using GPIOELPEN = Field<4, 1>;    // IO port E clock enable during Sleep mode
            using GPIODLPEN = Field<3, 1>;    // IO port D clock enable during Sleep mode
            using GPIOCLPEN = Field<2, 1>;    // IO port C clock enable during Sleep mode
            using GPIOBLPEN = Field<1, 1>;    // IO port B clock enable during Sleep mode
            using GPIOALPEN = Field<0, 1>;    // IO port A clock enable during sleep mode
        };

        // AHB2 peripheral clock enable in low power mode register
        struct AHB2LPENR : public Register<0x40023854> {
            using OTGFSLPEN = Field<7, 1>;    // USB OTG FS clock enable during Sleep mode
        };

        // APB1 peripheral clock enable in low power mode register
        struct APB1LPENR : public Register<0x40023860> {
            using PWRLPEN = Field<28, 1>;    // Power interface clock enable during Sleep mode
            using I2C3LPEN = Field<23, 1>;    // I2C3 clock enable during Sleep mode
            using I2C2LPEN = Field<22, 1>;    // I2C2 clock enable during Sleep mode
            using I2C1LPEN = Field<21, 1>;    // I2C1 clock enable during Sleep mode
            using USART2LPEN = Field<17, 1>;    // USART2 clock enable during Sleep mode
            using SPI3LPEN = Field<15, 1>;    // SPI3 clock enable during Sleep mode
            using SPI2LPEN = Field<14, 1>;    // SPI2 clock enable during Sleep mode
            using WWDGLPEN = Field<11, 1>;    // Window watchdog clock enable during Sleep mode
            using TIM5LPEN = Field<3, 1>;    // TIM5 clock enable during Sleep mode
            using TIM4LPEN = Field<2, 1>;    // TIM4 clock enable during Sleep mode
            using TIM3LPEN = Field<1, 1>;    // TIM3 clock enable during Sleep mode
            using TIM2LPEN = Field<0, 1>;    // TIM2 clock enable during Sleep mode
        };

        // APB2 peripheral clock enabled in low power mode register
        struct APB2LPENR : public Register<0x40023864> {
            using TIM1LPEN = Field<0, 1>;    // TIM1 clock enable during Sleep mode
            using USART1LPEN = Field<4, 1>;    // USART1 clock enable during Sleep mode
            using USART6LPEN = Field<5, 1>;    // USART6 clock enable during Sleep mode
            using ADC1LPEN = Field<8, 1>;    // ADC1 clock enable during Sleep mode
            using SDIOLPEN = Field<11, 1>;    // SDIO clock enable during Sleep mode
            using SPI1LPEN = Field<12, 1>;    // SPI 1 clock enable during Sleep mode
            using SPI4LPEN = Field<13, 1>;    // SPI4 clock enable during Sleep mode
            using SYSCFGLPEN = Field<14, 1>;    // System configuration controller clock enable during Sleep mode
            using TIM9LPEN = Field<16, 1>;    // TIM9 clock enable during sleep mode
            using TIM10LPEN = Field<17, 1>;    // TIM10 clock enable during Sleep mode
            using TIM11LPEN = Field<18, 1>;    // TIM11 clock enable during Sleep mode
        };

        // Backup domain control register
        struct BDCR : public Register<0x40023870> {
            using BDRST = Field<16, 1>;    // Backup domain software reset
            using RTCEN = Field<15, 1>;    // RTC clock enable
            using RTCSEL1 = Field<9, 1>;    // RTC clock source selection
            using RTCSEL0 = Field<8, 1>;    // RTC clock source selection
            using LSEBYP = Field<2, 1>;    // External low-speed oscillator bypass
            using LSERDY = Field<1, 1>;    // External low-speed oscillator ready
            using LSEON = Field<0, 1>;    // External low-speed oscillator enable
        };

        // clock control & status register
        struct CSR : public Register<0x40023874> {
            using LPWRRSTF = Field<31, 1>;    // Low-power reset flag
            using WWDGRSTF = Field<30, 1>;    // Window watchdog reset flag
            using WDGRSTF = Field<29, 1>;    // Independent watchdog reset flag
            using SFTRSTF = Field<28, 1>;    // Software reset flag
            using PORRSTF = Field<27, 1>;    // POR/PDR reset flag
            using PADRSTF = Field<26, 1>;    // PIN reset flag
            using BORRSTF = Field<25, 1>;    // BOR reset flag
            using RMVF = Field<24, 1>;    // Remove reset flag
            using LSIRDY = Field<1, 1>;    // Internal low-speed oscillator ready
            using LSION = Field<0, 1>;    // Internal low-speed oscillator enable
        };

        // spread spectrum clock generation register
        struct SSCGR : public Register<0x40023880> {
            using SSCGEN = Field<31, 1>;    // Spread spectrum modulation enable
            using SPREADSEL = Field<30, 1>;    // Spread Select
            using INCSTEP = Field<13, 15>;    // Incrementation step
            using MODPER = Field<0, 13>;    // Modulation period
        };

        // PLLI2S configuration register
        struct PLLI2SCFGR : public Register<0x40023884> {
            using PLLI2SRx = Field<28, 3>;    // PLLI2S division factor for I2S clocks
            using PLLI2SNx = Field<6, 9>;    // PLLI2S multiplication factor for VCO
        };

    };

    // Real-time clock
    struct RTC {
        // time register
        struct TR : public Register<0x40002800> {
            using PM = Field<22, 1>;    // AM/PM notation
            using HT = Field<20, 2>;    // Hour tens in BCD format
            using HU = Field<16, 4>;    // Hour units in BCD format
            using MNT = Field<12, 3>;    // Minute tens in BCD format
            using MNU = Field<8, 4>;    // Minute units in BCD format
            using ST = Field<4, 3>;    // Second tens in BCD format
            using SU = Field<0, 4>;    // Second units in BCD format
        };

        // date register
        struct DR : public Register<0x40002804> {
            using YT = Field<20, 4>;    // Year tens in BCD format
            using YU = Field<16, 4>;    // Year units in BCD format
            using WDU = Field<13, 3>;    // Week day units
            using MT = Field<12, 1>;    // Month tens in BCD format
            using MU = Field<8, 4>;    // Month units in BCD format
            using DT = Field<4, 2>;    // Date tens in BCD format
            using DU = Field<0, 4>;    // Date units in BCD format
        };

        // control register
        struct CR : public Register<0x40002808> {
            using COE = Field<23, 1>;    // Calibration output enable
            using OSEL = Field<21, 2>;    // Output selection
            using POL = Field<20, 1>;    // Output polarity
            using COSEL = Field<19, 1>;    // Calibration Output selection
            using BKP = Field<18, 1>;    // Backup
            using SUB1H = Field<17, 1>;    // Subtract 1 hour (winter time change)
            using ADD1H = Field<16, 1>;    // Add 1 hour (summer time change)
            using TSIE = Field<15, 1>;    // Time-stamp interrupt enable
            using WUTIE = Field<14, 1>;    // Wakeup timer interrupt enable
            using ALRBIE = Field<13, 1>;    // Alarm B interrupt enable
            using ALRAIE = Field<12, 1>;    // Alarm A interrupt enable
            using TSE = Field<11, 1>;    // Time stamp enable
            using WUTE = Field<10, 1>;    // Wakeup timer enable
            using ALRBE = Field<9, 1>;    // Alarm B enable
            using ALRAE = Field<8, 1>;    // Alarm A enable
            using DCE = Field<7, 1>;    // Coarse digital calibration enable
            using FMT = Field<6, 1>;    // Hour format
            using BYPSHAD = Field<5, 1>;    // Bypass the shadow registers
            using REFCKON = Field<4, 1>;    // Reference clock detection enable (50 or 60 Hz)
            using TSEDGE = Field<3, 1>;    // Time-stamp event active edge
            using WCKSEL = Field<0, 3>;    // Wakeup clock selection
        };

        // initialization and status register
        struct ISR : public Register<0x4000280c> {
            using ALRAWF = Field<0, 1>;    // Alarm A write flag
            using ALRBWF = Field<1, 1>;    // Alarm B write flag
            using WUTWF = Field<2, 1>;    // Wakeup timer write flag
            using SHPF = Field<3, 1>;    // Shift operation pending
            using INITS = Field<4, 1>;    // Initialization status flag
            using RSF = Field<5, 1>;    // Registers synchronization flag
            using INITF = Field<6, 1>;    // Initialization flag
            using INIT = Field<7, 1>;    // Initialization mode
            using ALRAF = Field<8, 1>;    // Alarm A flag
            using ALRBF = Field<9, 1>;    // Alarm B flag
            using WUTF = Field<10, 1>;    // Wakeup timer flag
            using TSF = Field<11, 1>;    // Time-stamp flag
            using TSOVF = Field<12, 1>;    // Time-stamp overflow flag
            using TAMP1F = Field<13, 1>;    // Tamper detection flag
            using TAMP2F = Field<14, 1>;    // TAMPER2 detection flag
            using RECALPF = Field<16, 1>;    // Recalibration pending Flag
        };

        // prescaler register
        struct PRER : public Register<0x40002810> {
            using PREDIV_A = Field<16, 7>;    // Asynchronous prescaler factor
            using PREDIV_S = Field<0, 15>;    // Synchronous prescaler factor
        };

        // wakeup timer register
        struct WUTR : public Register<0x40002814> {
            using WUT = Field<0, 16>;    // Wakeup auto-reload value bits
        };

        // calibration register
        struct CALIBR : public Register<0x40002818> {
            using DCS = Field<7, 1>;    // Digital calibration sign
            using DC = Field<0, 5>;    // Digital calibration
        };

        // alarm A register
        struct ALRMAR : public Register<0x4000281c> {
            using MSK4 = Field<31, 1>;    // Alarm A date mask
            using WDSEL = Field<30, 1>;    // Week day selection
            using DT = Field<28, 2>;    // Date tens in BCD format
            using DU = Field<24, 4>;    // Date units or day in BCD format
            using MSK3 = Field<23, 1>;    // Alarm A hours mask
            using PM = Field<22, 1>;    // AM/PM notation
            using HT = Field<20, 2>;    // Hour tens in BCD format
            using HU = Field<16, 4>;    // Hour units in BCD format
            using MSK2 = Field<15, 1>;    // Alarm A minutes mask
            using MNT = Field<12, 3>;    // Minute tens in BCD format
            using MNU = Field<8, 4>;    // Minute units in BCD format
            using MSK1 = Field<7, 1>;    // Alarm A seconds mask
            using ST = Field<4, 3>;    // Second tens in BCD format
            using SU = Field<0, 4>;    // Second units in BCD format
        };

        // alarm B register
        struct ALRMBR : public Register<0x40002820> {
            using MSK4 = Field<31, 1>;    // Alarm B date mask
            using WDSEL = Field<30, 1>;    // Week day selection
            using DT = Field<28, 2>;    // Date tens in BCD format
            using DU = Field<24, 4>;    // Date units or day in BCD format
            using MSK3 = Field<23, 1>;    // Alarm B hours mask
            using PM = Field<22, 1>;    // AM/PM notation
            using HT = Field<20, 2>;    // Hour tens in BCD format
            using HU = Field<16, 4>;    // Hour units in BCD format
            using MSK2 = Field<15, 1>;    // Alarm B minutes mask
            using MNT = Field<12, 3>;    // Minute tens in BCD format
            using MNU = Field<8, 4>;    // Minute units in BCD format
            using MSK1 = Field<7, 1>;    // Alarm B seconds mask
            using ST = Field<4, 3>;    // Second tens in BCD format
            using SU = Field<0, 4>;    // Second units in BCD format
        };

        // write protection register
        struct WPR : public RegisterWriteOnly<0x40002824> {
            using KEY = Field<0, 8>;    // Write protection key
        };

        // sub second register
        struct SSR : public RegisterReadOnly<0x40002828> {
            using SS = Field<0, 16>;    // Sub second value
        };

        // shift control register
        struct SHIFTR : public RegisterWriteOnly<0x4000282c> {
            using ADD1S = Field<31, 1>;    // Add one second
            using SUBFS = Field<0, 15>;    // Subtract a fraction of a second
        };

        // time stamp time register
        struct TSTR : public RegisterReadOnly<0x40002830> {
            using PM = Field<22, 1>;    // AM/PM notation
            using HT = Field<20, 2>;    // Hour tens in BCD format
            using HU = Field<16, 4>;    // Hour units in BCD format
            using MNT = Field<12, 3>;    // Minute tens in BCD format
            using MNU = Field<8, 4>;    // Minute units in BCD format
            using ST = Field<4, 3>;    // Second tens in BCD format
            using SU = Field<0, 4>;    // Second units in BCD format
        };

        // time stamp date register
        struct TSDR : public RegisterReadOnly<0x40002834> {
            using WDU = Field<13, 3>;    // Week day units
            using MT = Field<12, 1>;    // Month tens in BCD format
            using MU = Field<8, 4>;    // Month units in BCD format
            using DT = Field<4, 2>;    // Date tens in BCD format
            using DU = Field<0, 4>;    // Date units in BCD format
        };

        // timestamp sub second register
        struct TSSSR : public RegisterReadOnly<0x40002838> {
            using SS = Field<0, 16>;    // Sub second value
        };

        // calibration register
        struct CALR : public Register<0x4000283c> {
            using CALP = Field<15, 1>;    // Increase frequency of RTC by 488.5 ppm
            using CALW8 = Field<14, 1>;    // Use an 8-second calibration cycle period
            using CALW16 = Field<13, 1>;    // Use a 16-second calibration cycle period
            using CALM = Field<0, 9>;    // Calibration minus
        };

        // tamper and alternate function configuration register
        struct TAFCR : public Register<0x40002840> {
            using ALARMOUTTYPE = Field<18, 1>;    // AFO_ALARM output type
            using TSINSEL = Field<17, 1>;    // TIMESTAMP mapping
            using TAMP1INSEL = Field<16, 1>;    // TAMPER1 mapping
            using TAMPPUDIS = Field<15, 1>;    // TAMPER pull-up disable
            using TAMPPRCH = Field<13, 2>;    // Tamper precharge duration
            using TAMPFLT = Field<11, 2>;    // Tamper filter count
            using TAMPFREQ = Field<8, 3>;    // Tamper sampling frequency
            using TAMPTS = Field<7, 1>;    // Activate timestamp on tamper detection event
            using TAMP2TRG = Field<4, 1>;    // Active level for tamper 2
            using TAMP2E = Field<3, 1>;    // Tamper 2 detection enable
            using TAMPIE = Field<2, 1>;    // Tamper interrupt enable
            using TAMP1TRG = Field<1, 1>;    // Active level for tamper 1
            using TAMP1E = Field<0, 1>;    // Tamper 1 detection enable
        };

        // alarm A sub second register
        struct ALRMASSR : public Register<0x40002844> {
            using MASKSS = Field<24, 4>;    // Mask the most-significant bits starting at this bit
            using SS = Field<0, 15>;    // Sub seconds value
        };

        // alarm B sub second register
        struct ALRMBSSR : public Register<0x40002848> {
            using MASKSS = Field<24, 4>;    // Mask the most-significant bits starting at this bit
            using SS = Field<0, 15>;    // Sub seconds value
        };

        // backup register
        struct BKP0R : public Register<0x40002850> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP1R : public Register<0x40002854> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP2R : public Register<0x40002858> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP3R : public Register<0x4000285c> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP4R : public Register<0x40002860> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP5R : public Register<0x40002864> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP6R : public Register<0x40002868> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP7R : public Register<0x4000286c> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP8R : public Register<0x40002870> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP9R : public Register<0x40002874> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP10R : public Register<0x40002878> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP11R : public Register<0x4000287c> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP12R : public Register<0x40002880> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP13R : public Register<0x40002884> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP14R : public Register<0x40002888> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP15R : public Register<0x4000288c> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP16R : public Register<0x40002890> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP17R : public Register<0x40002894> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP18R : public Register<0x40002898> {
            using BKP = Field<0, 32>;    // BKP
        };

        // backup register
        struct BKP19R : public Register<0x4000289c> {
            using BKP = Field<0, 32>;    // BKP
        };

    };

    // Secure digital input/output interface
    struct SDIO {
        // power control register
        struct POWER : public Register<0x40012c00> {
            using PWRCTRL = Field<0, 2>;    // PWRCTRL
        };

        // SDI clock control register
        struct CLKCR : public Register<0x40012c04> {
            using HWFC_EN = Field<14, 1>;    // HW Flow Control enable
            using NEGEDGE = Field<13, 1>;    // SDIO_CK dephasing selection bit
            using WIDBUS = Field<11, 2>;    // Wide bus mode enable bit
            using BYPASS = Field<10, 1>;    // Clock divider bypass enable bit
            using PWRSAV = Field<9, 1>;    // Power saving configuration bit
            using CLKEN = Field<8, 1>;    // Clock enable bit
            using CLKDIV = Field<0, 8>;    // Clock divide factor
        };

        // argument register
        struct ARG : public Register<0x40012c08> {
            using CMDARG = Field<0, 32>;    // Command argument
        };

        // command register
        struct CMD : public Register<0x40012c0c> {
            using CE_ATACMD = Field<14, 1>;    // CE-ATA command
            using nIEN = Field<13, 1>;    // not Interrupt Enable
            using ENCMDcompl = Field<12, 1>;    // Enable CMD completion
            using SDIOSuspend = Field<11, 1>;    // SD I/O suspend command
            using CPSMEN = Field<10, 1>;    // Command path state machine (CPSM) Enable bit
            using WAITPEND = Field<9, 1>;    // CPSM Waits for ends of data transfer (CmdPend internal signal).
            using WAITINT = Field<8, 1>;    // CPSM waits for interrupt request
            using WAITRESP = Field<6, 2>;    // Wait for response bits
            using CMDINDEX = Field<0, 6>;    // Command index
        };

        // command response register
        struct RESPCMD : public RegisterReadOnly<0x40012c10> {
            using Field = Field<0, 6>;    // Response command index
        };

        // response 1..4 register
        struct RESP1 : public RegisterReadOnly<0x40012c14> {
            using CARDSTATUS1 = Field<0, 32>;    // Card Status
        };

        // response 1..4 register
        struct RESP2 : public RegisterReadOnly<0x40012c18> {
            using CARDSTATUS2 = Field<0, 32>;    // Card Status
        };

        // response 1..4 register
        struct RESP3 : public RegisterReadOnly<0x40012c1c> {
            using CARDSTATUS3 = Field<0, 32>;    // Card Status
        };

        // response 1..4 register
        struct RESP4 : public RegisterReadOnly<0x40012c20> {
            using CARDSTATUS4 = Field<0, 32>;    // Card Status
        };

        // data timer register
        struct DTIMER : public Register<0x40012c24> {
            using DATATIME = Field<0, 32>;    // Data timeout period
        };

        // data length register
        struct DLEN : public Register<0x40012c28> {
            using DATALENGTH = Field<0, 25>;    // Data length value
        };

        // data control register
        struct DCTRL : public Register<0x40012c2c> {
            using SDIOEN = Field<11, 1>;    // SD I/O enable functions
            using RWMOD = Field<10, 1>;    // Read wait mode
            using RWSTOP = Field<9, 1>;    // Read wait stop
            using RWSTART = Field<8, 1>;    // Read wait start
            using DBLOCKSIZE = Field<4, 4>;    // Data block size
            using DMAEN = Field<3, 1>;    // DMA enable bit
            using DTMODE = Field<2, 1>;    // Data transfer mode selection 1: Stream or SDIO multibyte data transfer.
            using DTDIR = Field<1, 1>;    // Data transfer direction selection
            using DTEN = Field<0, 1>;    // DTEN
        };

        // data counter register
        struct DCOUNT : public RegisterReadOnly<0x40012c30> {
            using DATACOUNT = Field<0, 25>;    // Data count value
        };

        // status register
        struct STA : public RegisterReadOnly<0x40012c34> {
            using CEATAEND = Field<23, 1>;    // CE-ATA command completion signal received for CMD61
            using SDIOIT = Field<22, 1>;    // SDIO interrupt received
            using RXDAVL = Field<21, 1>;    // Data available in receive FIFO
            using TXDAVL = Field<20, 1>;    // Data available in transmit FIFO
            using RXFIFOE = Field<19, 1>;    // Receive FIFO empty
            using TXFIFOE = Field<18, 1>;    // Transmit FIFO empty
            using RXFIFOF = Field<17, 1>;    // Receive FIFO full
            using TXFIFOF = Field<16, 1>;    // Transmit FIFO full
            using RXFIFOHF = Field<15, 1>;    // Receive FIFO half full: there are at least 8 words in the FIFO
            using TXFIFOHE = Field<14, 1>;    // Transmit FIFO half empty: at least 8 words can be written into the FIFO
            using RXACT = Field<13, 1>;    // Data receive in progress
            using TXACT = Field<12, 1>;    // Data transmit in progress
            using CMDACT = Field<11, 1>;    // Command transfer in progress
            using DBCKEND = Field<10, 1>;    // Data block sent/received (CRC check passed)
            using STBITERR = Field<9, 1>;    // Start bit not detected on all data signals in wide bus mode
            using DATAEND = Field<8, 1>;    // Data end (data counter, SDIDCOUNT, is zero)
            using CMDSENT = Field<7, 1>;    // Command sent (no response required)
            using CMDREND = Field<6, 1>;    // Command response received (CRC check passed)
            using RXOVERR = Field<5, 1>;    // Received FIFO overrun error
            using TXUNDERR = Field<4, 1>;    // Transmit FIFO underrun error
            using DTIMEOUT = Field<3, 1>;    // Data timeout
            using CTIMEOUT = Field<2, 1>;    // Command response timeout
            using DCRCFAIL = Field<1, 1>;    // Data block sent/received (CRC check failed)
            using CCRCFAIL = Field<0, 1>;    // Command response received (CRC check failed)
        };

        // interrupt clear register
        struct ICR : public Register<0x40012c38> {
            using CEATAENDC = Field<23, 1>;    // CEATAEND flag clear bit
            using SDIOITC = Field<22, 1>;    // SDIOIT flag clear bit
            using DBCKENDC = Field<10, 1>;    // DBCKEND flag clear bit
            using STBITERRC = Field<9, 1>;    // STBITERR flag clear bit
            using DATAENDC = Field<8, 1>;    // DATAEND flag clear bit
            using CMDSENTC = Field<7, 1>;    // CMDSENT flag clear bit
            using CMDRENDC = Field<6, 1>;    // CMDREND flag clear bit
            using RXOVERRC = Field<5, 1>;    // RXOVERR flag clear bit
            using TXUNDERRC = Field<4, 1>;    // TXUNDERR flag clear bit
            using DTIMEOUTC = Field<3, 1>;    // DTIMEOUT flag clear bit
            using CTIMEOUTC = Field<2, 1>;    // CTIMEOUT flag clear bit
            using DCRCFAILC = Field<1, 1>;    // DCRCFAIL flag clear bit
            using CCRCFAILC = Field<0, 1>;    // CCRCFAIL flag clear bit
        };

        // mask register
        struct MASK : public Register<0x40012c3c> {
            using CEATAENDIE = Field<23, 1>;    // CE-ATA command completion signal received interrupt enable
            using SDIOITIE = Field<22, 1>;    // SDIO mode interrupt received interrupt enable
            using RXDAVLIE = Field<21, 1>;    // Data available in Rx FIFO interrupt enable
            using TXDAVLIE = Field<20, 1>;    // Data available in Tx FIFO interrupt enable
            using RXFIFOEIE = Field<19, 1>;    // Rx FIFO empty interrupt enable
            using TXFIFOEIE = Field<18, 1>;    // Tx FIFO empty interrupt enable
            using RXFIFOFIE = Field<17, 1>;    // Rx FIFO full interrupt enable
            using TXFIFOFIE = Field<16, 1>;    // Tx FIFO full interrupt enable
            using RXFIFOHFIE = Field<15, 1>;    // Rx FIFO half full interrupt enable
            using TXFIFOHEIE = Field<14, 1>;    // Tx FIFO half empty interrupt enable
            using RXACTIE = Field<13, 1>;    // Data receive acting interrupt enable
            using TXACTIE = Field<12, 1>;    // Data transmit acting interrupt enable
            using CMDACTIE = Field<11, 1>;    // Command acting interrupt enable
            using DBCKENDIE = Field<10, 1>;    // Data block end interrupt enable
            using STBITERRIE = Field<9, 1>;    // Start bit error interrupt enable
            using DATAENDIE = Field<8, 1>;    // Data end interrupt enable
            using CMDSENTIE = Field<7, 1>;    // Command sent interrupt enable
            using CMDRENDIE = Field<6, 1>;    // Command response received interrupt enable
            using RXOVERRIE = Field<5, 1>;    // Rx FIFO overrun error interrupt enable
            using TXUNDERRIE = Field<4, 1>;    // Tx FIFO underrun error interrupt enable
            using DTIMEOUTIE = Field<3, 1>;    // Data timeout interrupt enable
            using CTIMEOUTIE = Field<2, 1>;    // Command timeout interrupt enable
            using DCRCFAILIE = Field<1, 1>;    // Data CRC fail interrupt enable
            using CCRCFAILIE = Field<0, 1>;    // Command CRC fail interrupt enable
        };

        // FIFO counter register
        struct FIFOCNT : public RegisterReadOnly<0x40012c48> {
            using FIFOCOUNT = Field<0, 24>;    // Remaining number of words to be written to or read from the FIFO.
        };

        // data FIFO register
        struct FIFO : public Register<0x40012c80> {
            using FIFOData = Field<0, 32>;    // Receive and transmit FIFO data
        };

    };

    // System configuration controller
    struct SYSCFG {
        // memory remap register
        struct MEMRM : public Register<0x40013800> {
            using MEM_MODE = Field<0, 2>;    // MEM_MODE
        };

        // peripheral mode configuration register
        struct PMC : public Register<0x40013804> {
            using ADC1DC2 = Field<16, 1>;    // ADC1DC2
        };

        // external interrupt configuration register 1
        struct EXTICR1 : public Register<0x40013808> {
            using EXTI3 = Field<12, 4>;    // EXTI x configuration (x = 0 to 3)
            using EXTI2 = Field<8, 4>;    // EXTI x configuration (x = 0 to 3)
            using EXTI1 = Field<4, 4>;    // EXTI x configuration (x = 0 to 3)
            using EXTI0 = Field<0, 4>;    // EXTI x configuration (x = 0 to 3)
        };

        // external interrupt configuration register 2
        struct EXTICR2 : public Register<0x4001380c> {
            using EXTI7 = Field<12, 4>;    // EXTI x configuration (x = 4 to 7)
            using EXTI6 = Field<8, 4>;    // EXTI x configuration (x = 4 to 7)
            using EXTI5 = Field<4, 4>;    // EXTI x configuration (x = 4 to 7)
            using EXTI4 = Field<0, 4>;    // EXTI x configuration (x = 4 to 7)
        };

        // external interrupt configuration register 3
        struct EXTICR3 : public Register<0x40013810> {
            using EXTI11 = Field<12, 4>;    // EXTI x configuration (x = 8 to 11)
            using EXTI10 = Field<8, 4>;    // EXTI10
            using EXTI9 = Field<4, 4>;    // EXTI x configuration (x = 8 to 11)
            using EXTI8 = Field<0, 4>;    // EXTI x configuration (x = 8 to 11)
        };

        // external interrupt configuration register 4
        struct EXTICR4 : public Register<0x40013814> {
            using EXTI15 = Field<12, 4>;    // EXTI x configuration (x = 12 to 15)
            using EXTI14 = Field<8, 4>;    // EXTI x configuration (x = 12 to 15)
            using EXTI13 = Field<4, 4>;    // EXTI x configuration (x = 12 to 15)
            using EXTI12 = Field<0, 4>;    // EXTI x configuration (x = 12 to 15)
        };

        // Compensation cell control register
        struct CMPCR : public RegisterReadOnly<0x40013820> {
            using READY = Field<8, 1>;    // READY
            using CMP_PD = Field<0, 1>;    // Compensation cell power-down
        };

    };

    // Advanced-timers
    struct TIM1 {
        // control register 1
        struct CR1 : public Register<0x40010000> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40010004> {
            using OIS4 = Field<14, 1>;    // Output Idle state 4
            using OIS3N = Field<13, 1>;    // Output Idle state 3
            using OIS3 = Field<12, 1>;    // Output Idle state 3
            using OIS2N = Field<11, 1>;    // Output Idle state 2
            using OIS2 = Field<10, 1>;    // Output Idle state 2
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // slave mode control register
        struct SMCR : public Register<0x40010008> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001000c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using COMDE = Field<13, 1>;    // COM DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40010010> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40010014> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40010018> {
            using OC2CE = Field<15, 1>;    // Output Compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output Compare 2 mode
            using OC2PE = Field<11, 1>;    // Output Compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output Compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output Compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40010018> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PCS = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using ICPCS = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x4001001c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x4001001c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40010020> {
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3NE = Field<10, 1>;    // Capture/Compare 3 complementary output enable
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2NE = Field<6, 1>;    // Capture/Compare 2 complementary output enable
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40010024> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40010028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001002c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40010034> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40010038> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x4001003c> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40010040> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40010048> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4001004c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

        // repetition counter register
        struct RCR : public Register<0x40010030> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40010044> {
            using MOE = Field<15, 1>;    // Main output enable
            using AOE = Field<14, 1>;    // Automatic output enable
            using BKP = Field<13, 1>;    // Break polarity
            using BKE = Field<12, 1>;    // Break enable
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using LOCK = Field<8, 2>;    // Lock configuration
            using DTG = Field<0, 8>;    // Dead-time generator setup
        };

    };

    // Advanced-timers
    struct TIM8 {
        // control register 1
        struct CR1 : public Register<0x40010400> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40010404> {
            using OIS4 = Field<14, 1>;    // Output Idle state 4
            using OIS3N = Field<13, 1>;    // Output Idle state 3
            using OIS3 = Field<12, 1>;    // Output Idle state 3
            using OIS2N = Field<11, 1>;    // Output Idle state 2
            using OIS2 = Field<10, 1>;    // Output Idle state 2
            using OIS1N = Field<9, 1>;    // Output Idle state 1
            using OIS1 = Field<8, 1>;    // Output Idle state 1
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
            using CCUS = Field<2, 1>;    // Capture/compare control update selection
            using CCPC = Field<0, 1>;    // Capture/compare preloaded control
        };

        // slave mode control register
        struct SMCR : public Register<0x40010408> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001040c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using COMDE = Field<13, 1>;    // COM DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using BIE = Field<7, 1>;    // Break interrupt enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using COMIE = Field<5, 1>;    // COM interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40010410> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using BIF = Field<7, 1>;    // Break interrupt flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using COMIF = Field<5, 1>;    // COM interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40010414> {
            using BG = Field<7, 1>;    // Break generation
            using TG = Field<6, 1>;    // Trigger generation
            using COMG = Field<5, 1>;    // Capture/Compare control update generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40010418> {
            using OC2CE = Field<15, 1>;    // Output Compare 2 clear enable
            using OC2M = Field<12, 3>;    // Output Compare 2 mode
            using OC2PE = Field<11, 1>;    // Output Compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output Compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1CE = Field<7, 1>;    // Output Compare 1 clear enable
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40010418> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PCS = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using ICPCS = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x4001041c> {
            using OC4CE = Field<15, 1>;    // Output compare 4 clear enable
            using OC4M = Field<12, 3>;    // Output compare 4 mode
            using OC4PE = Field<11, 1>;    // Output compare 4 preload enable
            using OC4FE = Field<10, 1>;    // Output compare 4 fast enable
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using OC3CE = Field<7, 1>;    // Output compare 3 clear enable
            using OC3M = Field<4, 3>;    // Output compare 3 mode
            using OC3PE = Field<3, 1>;    // Output compare 3 preload enable
            using OC3FE = Field<2, 1>;    // Output compare 3 fast enable
            using CC3S = Field<0, 2>;    // Capture/Compare 3 selection
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x4001041c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40010420> {
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3NE = Field<10, 1>;    // Capture/Compare 3 complementary output enable
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2NE = Field<6, 1>;    // Capture/Compare 2 complementary output enable
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1NE = Field<2, 1>;    // Capture/Compare 1 complementary output enable
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40010424> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40010428> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001042c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40010434> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40010438> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x4001043c> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40010440> {
            using Field = Field<0, 16>;    // Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40010448> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4001044c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

        // repetition counter register
        struct RCR : public Register<0x40010430> {
            using REP = Field<0, 8>;    // Repetition counter value
        };

        // break and dead-time register
        struct BDTR : public Register<0x40010444> {
            using MOE = Field<15, 1>;    // Main output enable
            using AOE = Field<14, 1>;    // Automatic output enable
            using BKP = Field<13, 1>;    // Break polarity
            using BKE = Field<12, 1>;    // Break enable
            using OSSR = Field<11, 1>;    // Off-state selection for Run mode
            using OSSI = Field<10, 1>;    // Off-state selection for Idle mode
            using LOCK = Field<8, 2>;    // Lock configuration
            using DTG = Field<0, 8>;    // Dead-time generator setup
        };

    };

    // General-purpose-timers
    struct TIM10 {
        // control register 1
        struct CR1 : public Register<0x40014400> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001440c> {
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40014410> {
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40014414> {
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40014418> {
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40014418> {
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using ICPCS = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40014420> {
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40014424> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40014428> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001442c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40014434> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

    };

    // General-purpose-timers
    struct TIM11 {
        // control register 1
        struct CR1 : public Register<0x40014800> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001480c> {
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40014810> {
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40014814> {
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40014818> {
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40014818> {
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using ICPCS = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40014820> {
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40014824> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40014828> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001482c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40014834> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // option register
        struct OR : public Register<0x40014850> {
            using RMP = Field<0, 2>;    // Input 1 remapping capability
        };

    };

    // General purpose timers
    struct TIM2 {
        // control register 1
        struct CR1 : public Register<0x40000000> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40000004> {
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40000008> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000000c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40000010> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40000014> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40000018> {
            using OC2CE = Field<15, 1>;    // OC2CE
            using OC2M = Field<12, 3>;    // OC2M
            using OC2PE = Field<11, 1>;    // OC2PE
            using OC2FE = Field<10, 1>;    // OC2FE
            using CC2S = Field<8, 2>;    // CC2S
            using OC1CE = Field<7, 1>;    // OC1CE
            using OC1M = Field<4, 3>;    // OC1M
            using OC1PE = Field<3, 1>;    // OC1PE
            using OC1FE = Field<2, 1>;    // OC1FE
            using CC1S = Field<0, 2>;    // CC1S
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40000018> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PCS = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using ICPCS = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x4000001c> {
            using O24CE = Field<15, 1>;    // O24CE
            using OC4M = Field<12, 3>;    // OC4M
            using OC4PE = Field<11, 1>;    // OC4PE
            using OC4FE = Field<10, 1>;    // OC4FE
            using CC4S = Field<8, 2>;    // CC4S
            using OC3CE = Field<7, 1>;    // OC3CE
            using OC3M = Field<4, 3>;    // OC3M
            using OC3PE = Field<3, 1>;    // OC3PE
            using OC3FE = Field<2, 1>;    // OC3FE
            using CC3S = Field<0, 2>;    // CC3S
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x4000001c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40000020> {
            using CC4NP = Field<15, 1>;    // Capture/Compare 4 output Polarity
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40000024> {
            using CNT_H = Field<16, 16>;    // High counter value
            using CNT_L = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40000028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000002c> {
            using ARR_H = Field<16, 16>;    // High Auto-reload value
            using ARR_L = Field<0, 16>;    // Low Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40000034> {
            using CCR1_H = Field<16, 16>;    // High Capture/Compare 1 value
            using CCR1_L = Field<0, 16>;    // Low Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40000038> {
            using CCR2_H = Field<16, 16>;    // High Capture/Compare 2 value
            using CCR2_L = Field<0, 16>;    // Low Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x4000003c> {
            using CCR3_H = Field<16, 16>;    // High Capture/Compare value
            using CCR3_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40000040> {
            using CCR4_H = Field<16, 16>;    // High Capture/Compare value
            using CCR4_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40000048> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4000004c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

        // TIM5 option register
        struct OR : public Register<0x40000050> {
            using ITR1_RMP = Field<10, 2>;    // Timer Input 4 remap
        };

    };

    // General purpose timers
    struct TIM3 {
        // control register 1
        struct CR1 : public Register<0x40000400> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40000404> {
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40000408> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000040c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40000410> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40000414> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40000418> {
            using OC2CE = Field<15, 1>;    // OC2CE
            using OC2M = Field<12, 3>;    // OC2M
            using OC2PE = Field<11, 1>;    // OC2PE
            using OC2FE = Field<10, 1>;    // OC2FE
            using CC2S = Field<8, 2>;    // CC2S
            using OC1CE = Field<7, 1>;    // OC1CE
            using OC1M = Field<4, 3>;    // OC1M
            using OC1PE = Field<3, 1>;    // OC1PE
            using OC1FE = Field<2, 1>;    // OC1FE
            using CC1S = Field<0, 2>;    // CC1S
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40000418> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PCS = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using ICPCS = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x4000041c> {
            using O24CE = Field<15, 1>;    // O24CE
            using OC4M = Field<12, 3>;    // OC4M
            using OC4PE = Field<11, 1>;    // OC4PE
            using OC4FE = Field<10, 1>;    // OC4FE
            using CC4S = Field<8, 2>;    // CC4S
            using OC3CE = Field<7, 1>;    // OC3CE
            using OC3M = Field<4, 3>;    // OC3M
            using OC3PE = Field<3, 1>;    // OC3PE
            using OC3FE = Field<2, 1>;    // OC3FE
            using CC3S = Field<0, 2>;    // CC3S
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x4000041c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40000420> {
            using CC4NP = Field<15, 1>;    // Capture/Compare 4 output Polarity
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40000424> {
            using CNT_H = Field<16, 16>;    // High counter value
            using CNT_L = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40000428> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000042c> {
            using ARR_H = Field<16, 16>;    // High Auto-reload value
            using ARR_L = Field<0, 16>;    // Low Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40000434> {
            using CCR1_H = Field<16, 16>;    // High Capture/Compare 1 value
            using CCR1_L = Field<0, 16>;    // Low Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40000438> {
            using CCR2_H = Field<16, 16>;    // High Capture/Compare 2 value
            using CCR2_L = Field<0, 16>;    // Low Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x4000043c> {
            using CCR3_H = Field<16, 16>;    // High Capture/Compare value
            using CCR3_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40000440> {
            using CCR4_H = Field<16, 16>;    // High Capture/Compare value
            using CCR4_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40000448> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4000044c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General purpose timers
    struct TIM4 {
        // control register 1
        struct CR1 : public Register<0x40000800> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40000804> {
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40000808> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4000080c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40000810> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40000814> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40000818> {
            using OC2CE = Field<15, 1>;    // OC2CE
            using OC2M = Field<12, 3>;    // OC2M
            using OC2PE = Field<11, 1>;    // OC2PE
            using OC2FE = Field<10, 1>;    // OC2FE
            using CC2S = Field<8, 2>;    // CC2S
            using OC1CE = Field<7, 1>;    // OC1CE
            using OC1M = Field<4, 3>;    // OC1M
            using OC1PE = Field<3, 1>;    // OC1PE
            using OC1FE = Field<2, 1>;    // OC1FE
            using CC1S = Field<0, 2>;    // CC1S
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40000818> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PCS = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using ICPCS = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x4000081c> {
            using O24CE = Field<15, 1>;    // O24CE
            using OC4M = Field<12, 3>;    // OC4M
            using OC4PE = Field<11, 1>;    // OC4PE
            using OC4FE = Field<10, 1>;    // OC4FE
            using CC4S = Field<8, 2>;    // CC4S
            using OC3CE = Field<7, 1>;    // OC3CE
            using OC3M = Field<4, 3>;    // OC3M
            using OC3PE = Field<3, 1>;    // OC3PE
            using OC3FE = Field<2, 1>;    // OC3FE
            using CC3S = Field<0, 2>;    // CC3S
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x4000081c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40000820> {
            using CC4NP = Field<15, 1>;    // Capture/Compare 4 output Polarity
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40000824> {
            using CNT_H = Field<16, 16>;    // High counter value
            using CNT_L = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40000828> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4000082c> {
            using ARR_H = Field<16, 16>;    // High Auto-reload value
            using ARR_L = Field<0, 16>;    // Low Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40000834> {
            using CCR1_H = Field<16, 16>;    // High Capture/Compare 1 value
            using CCR1_L = Field<0, 16>;    // Low Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40000838> {
            using CCR2_H = Field<16, 16>;    // High Capture/Compare 2 value
            using CCR2_L = Field<0, 16>;    // Low Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x4000083c> {
            using CCR3_H = Field<16, 16>;    // High Capture/Compare value
            using CCR3_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40000840> {
            using CCR4_H = Field<16, 16>;    // High Capture/Compare value
            using CCR4_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40000848> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x4000084c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

    };

    // General-purpose-timers
    struct TIM5 {
        // control register 1
        struct CR1 : public Register<0x40000c00> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using CMS = Field<5, 2>;    // Center-aligned mode selection
            using DIR = Field<4, 1>;    // Direction
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40000c04> {
            using TI1S = Field<7, 1>;    // TI1 selection
            using MMS = Field<4, 3>;    // Master mode selection
            using CCDS = Field<3, 1>;    // Capture/compare DMA selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40000c08> {
            using ETP = Field<15, 1>;    // External trigger polarity
            using ECE = Field<14, 1>;    // External clock enable
            using ETPS = Field<12, 2>;    // External trigger prescaler
            using ETF = Field<8, 4>;    // External trigger filter
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x40000c0c> {
            using TDE = Field<14, 1>;    // Trigger DMA request enable
            using CC4DE = Field<12, 1>;    // Capture/Compare 4 DMA request enable
            using CC3DE = Field<11, 1>;    // Capture/Compare 3 DMA request enable
            using CC2DE = Field<10, 1>;    // Capture/Compare 2 DMA request enable
            using CC1DE = Field<9, 1>;    // Capture/Compare 1 DMA request enable
            using UDE = Field<8, 1>;    // Update DMA request enable
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC4IE = Field<4, 1>;    // Capture/Compare 4 interrupt enable
            using CC3IE = Field<3, 1>;    // Capture/Compare 3 interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40000c10> {
            using CC4OF = Field<12, 1>;    // Capture/Compare 4 overcapture flag
            using CC3OF = Field<11, 1>;    // Capture/Compare 3 overcapture flag
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC4IF = Field<4, 1>;    // Capture/Compare 4 interrupt flag
            using CC3IF = Field<3, 1>;    // Capture/Compare 3 interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40000c14> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC4G = Field<4, 1>;    // Capture/compare 4 generation
            using CC3G = Field<3, 1>;    // Capture/compare 3 generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40000c18> {
            using OC2CE = Field<15, 1>;    // OC2CE
            using OC2M = Field<12, 3>;    // OC2M
            using OC2PE = Field<11, 1>;    // OC2PE
            using OC2FE = Field<10, 1>;    // OC2FE
            using CC2S = Field<8, 2>;    // CC2S
            using OC1CE = Field<7, 1>;    // OC1CE
            using OC1M = Field<4, 3>;    // OC1M
            using OC1PE = Field<3, 1>;    // OC1PE
            using OC1FE = Field<2, 1>;    // OC1FE
            using CC1S = Field<0, 2>;    // CC1S
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40000c18> {
            using IC2F = Field<12, 4>;    // Input capture 2 filter
            using IC2PCS = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 4>;    // Input capture 1 filter
            using ICPCS = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 2 (output mode)
        struct CCMR2_Output : public Register<0x40000c1c> {
            using O24CE = Field<15, 1>;    // O24CE
            using OC4M = Field<12, 3>;    // OC4M
            using OC4PE = Field<11, 1>;    // OC4PE
            using OC4FE = Field<10, 1>;    // OC4FE
            using CC4S = Field<8, 2>;    // CC4S
            using OC3CE = Field<7, 1>;    // OC3CE
            using OC3M = Field<4, 3>;    // OC3M
            using OC3PE = Field<3, 1>;    // OC3PE
            using OC3FE = Field<2, 1>;    // OC3FE
            using CC3S = Field<0, 2>;    // CC3S
        };

        // capture/compare mode register 2 (input mode)
        struct CCMR2_Input : public Register<0x40000c1c> {
            using IC4F = Field<12, 4>;    // Input capture 4 filter
            using IC4PSC = Field<10, 2>;    // Input capture 4 prescaler
            using CC4S = Field<8, 2>;    // Capture/Compare 4 selection
            using IC3F = Field<4, 4>;    // Input capture 3 filter
            using IC3PSC = Field<2, 2>;    // Input capture 3 prescaler
            using CC3S = Field<0, 2>;    // Capture/compare 3 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40000c20> {
            using CC4NP = Field<15, 1>;    // Capture/Compare 4 output Polarity
            using CC4P = Field<13, 1>;    // Capture/Compare 3 output Polarity
            using CC4E = Field<12, 1>;    // Capture/Compare 4 output enable
            using CC3NP = Field<11, 1>;    // Capture/Compare 3 output Polarity
            using CC3P = Field<9, 1>;    // Capture/Compare 3 output Polarity
            using CC3E = Field<8, 1>;    // Capture/Compare 3 output enable
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40000c24> {
            using CNT_H = Field<16, 16>;    // High counter value
            using CNT_L = Field<0, 16>;    // Low counter value
        };

        // prescaler
        struct PSC : public Register<0x40000c28> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x40000c2c> {
            using ARR_H = Field<16, 16>;    // High Auto-reload value
            using ARR_L = Field<0, 16>;    // Low Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40000c34> {
            using CCR1_H = Field<16, 16>;    // High Capture/Compare 1 value
            using CCR1_L = Field<0, 16>;    // Low Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40000c38> {
            using CCR2_H = Field<16, 16>;    // High Capture/Compare 2 value
            using CCR2_L = Field<0, 16>;    // Low Capture/Compare 2 value
        };

        // capture/compare register 3
        struct CCR3 : public Register<0x40000c3c> {
            using CCR3_H = Field<16, 16>;    // High Capture/Compare value
            using CCR3_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // capture/compare register 4
        struct CCR4 : public Register<0x40000c40> {
            using CCR4_H = Field<16, 16>;    // High Capture/Compare value
            using CCR4_L = Field<0, 16>;    // Low Capture/Compare value
        };

        // DMA control register
        struct DCR : public Register<0x40000c48> {
            using DBL = Field<8, 5>;    // DMA burst length
            using DBA = Field<0, 5>;    // DMA base address
        };

        // DMA address for full transfer
        struct DMAR : public Register<0x40000c4c> {
            using DMAB = Field<0, 16>;    // DMA register for burst accesses
        };

        // TIM5 option register
        struct OR : public Register<0x40000c50> {
            using IT4_RMP = Field<6, 2>;    // Timer Input 4 remap
        };

    };

    // General purpose timers
    struct TIM9 {
        // control register 1
        struct CR1 : public Register<0x40014000> {
            using CKD = Field<8, 2>;    // Clock division
            using ARPE = Field<7, 1>;    // Auto-reload preload enable
            using OPM = Field<3, 1>;    // One-pulse mode
            using URS = Field<2, 1>;    // Update request source
            using UDIS = Field<1, 1>;    // Update disable
            using CEN = Field<0, 1>;    // Counter enable
        };

        // control register 2
        struct CR2 : public Register<0x40014004> {
            using MMS = Field<4, 3>;    // Master mode selection
        };

        // slave mode control register
        struct SMCR : public Register<0x40014008> {
            using MSM = Field<7, 1>;    // Master/Slave mode
            using TS = Field<4, 3>;    // Trigger selection
            using SMS = Field<0, 3>;    // Slave mode selection
        };

        // DMA/Interrupt enable register
        struct DIER : public Register<0x4001400c> {
            using TIE = Field<6, 1>;    // Trigger interrupt enable
            using CC2IE = Field<2, 1>;    // Capture/Compare 2 interrupt enable
            using CC1IE = Field<1, 1>;    // Capture/Compare 1 interrupt enable
            using UIE = Field<0, 1>;    // Update interrupt enable
        };

        // status register
        struct SR : public Register<0x40014010> {
            using CC2OF = Field<10, 1>;    // Capture/compare 2 overcapture flag
            using CC1OF = Field<9, 1>;    // Capture/Compare 1 overcapture flag
            using TIF = Field<6, 1>;    // Trigger interrupt flag
            using CC2IF = Field<2, 1>;    // Capture/Compare 2 interrupt flag
            using CC1IF = Field<1, 1>;    // Capture/compare 1 interrupt flag
            using UIF = Field<0, 1>;    // Update interrupt flag
        };

        // event generation register
        struct EGR : public RegisterWriteOnly<0x40014014> {
            using TG = Field<6, 1>;    // Trigger generation
            using CC2G = Field<2, 1>;    // Capture/compare 2 generation
            using CC1G = Field<1, 1>;    // Capture/compare 1 generation
            using UG = Field<0, 1>;    // Update generation
        };

        // capture/compare mode register 1 (output mode)
        struct CCMR1_Output : public Register<0x40014018> {
            using OC2M = Field<12, 3>;    // Output Compare 2 mode
            using OC2PE = Field<11, 1>;    // Output Compare 2 preload enable
            using OC2FE = Field<10, 1>;    // Output Compare 2 fast enable
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using OC1M = Field<4, 3>;    // Output Compare 1 mode
            using OC1PE = Field<3, 1>;    // Output Compare 1 preload enable
            using OC1FE = Field<2, 1>;    // Output Compare 1 fast enable
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare mode register 1 (input mode)
        struct CCMR1_Input : public Register<0x40014018> {
            using IC2F = Field<12, 3>;    // Input capture 2 filter
            using IC2PCS = Field<10, 2>;    // Input capture 2 prescaler
            using CC2S = Field<8, 2>;    // Capture/Compare 2 selection
            using IC1F = Field<4, 3>;    // Input capture 1 filter
            using ICPCS = Field<2, 2>;    // Input capture 1 prescaler
            using CC1S = Field<0, 2>;    // Capture/Compare 1 selection
        };

        // capture/compare enable register
        struct CCER : public Register<0x40014020> {
            using CC2NP = Field<7, 1>;    // Capture/Compare 2 output Polarity
            using CC2P = Field<5, 1>;    // Capture/Compare 2 output Polarity
            using CC2E = Field<4, 1>;    // Capture/Compare 2 output enable
            using CC1NP = Field<3, 1>;    // Capture/Compare 1 output Polarity
            using CC1P = Field<1, 1>;    // Capture/Compare 1 output Polarity
            using CC1E = Field<0, 1>;    // Capture/Compare 1 output enable
        };

        // counter
        struct CNT : public Register<0x40014024> {
            using Field = Field<0, 16>;    // counter value
        };

        // prescaler
        struct PSC : public Register<0x40014028> {
            using Field = Field<0, 16>;    // Prescaler value
        };

        // auto-reload register
        struct ARR : public Register<0x4001402c> {
            using Field = Field<0, 16>;    // Auto-reload value
        };

        // capture/compare register 1
        struct CCR1 : public Register<0x40014034> {
            using Field = Field<0, 16>;    // Capture/Compare 1 value
        };

        // capture/compare register 2
        struct CCR2 : public Register<0x40014038> {
            using Field = Field<0, 16>;    // Capture/Compare 2 value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART1 {
        // Status register
        struct SR : public Register<0x40011000> {
            using CTS = Field<9, 1>;    // CTS flag
            using LBD = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // IDLE line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NF = Field<2, 1>;    // Noise detected flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Data register
        struct DR : public Register<0x40011004> {
            using Field = Field<0, 9>;    // Data value
        };

        // Baud rate register
        struct BRR : public Register<0x40011008> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Control register 1
        struct CR1 : public Register<0x4001100c> {
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using UE = Field<13, 1>;    // USART enable
            using M = Field<12, 1>;    // Word length
            using WAKE = Field<11, 1>;    // Wakeup method
            using PCE = Field<10, 1>;    // Parity control enable
            using PS = Field<9, 1>;    // Parity selection
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using TXEIE = Field<7, 1>;    // TXE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using TE = Field<3, 1>;    // Transmitter enable
            using RE = Field<2, 1>;    // Receiver enable
            using RWU = Field<1, 1>;    // Receiver wakeup
            using SBK = Field<0, 1>;    // Send break
        };

        // Control register 2
        struct CR2 : public Register<0x40011010> {
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // lin break detection length
            using ADD = Field<0, 4>;    // Address of the USART node
        };

        // Control register 3
        struct CR3 : public Register<0x40011014> {
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40011018> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART2 {
        // Status register
        struct SR : public Register<0x40004400> {
            using CTS = Field<9, 1>;    // CTS flag
            using LBD = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // IDLE line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NF = Field<2, 1>;    // Noise detected flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Data register
        struct DR : public Register<0x40004404> {
            using Field = Field<0, 9>;    // Data value
        };

        // Baud rate register
        struct BRR : public Register<0x40004408> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Control register 1
        struct CR1 : public Register<0x4000440c> {
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using UE = Field<13, 1>;    // USART enable
            using M = Field<12, 1>;    // Word length
            using WAKE = Field<11, 1>;    // Wakeup method
            using PCE = Field<10, 1>;    // Parity control enable
            using PS = Field<9, 1>;    // Parity selection
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using TXEIE = Field<7, 1>;    // TXE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using TE = Field<3, 1>;    // Transmitter enable
            using RE = Field<2, 1>;    // Receiver enable
            using RWU = Field<1, 1>;    // Receiver wakeup
            using SBK = Field<0, 1>;    // Send break
        };

        // Control register 2
        struct CR2 : public Register<0x40004410> {
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // lin break detection length
            using ADD = Field<0, 4>;    // Address of the USART node
        };

        // Control register 3
        struct CR3 : public Register<0x40004414> {
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40004418> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

    };

    // Universal synchronous asynchronous receiver transmitter
    struct USART6 {
        // Status register
        struct SR : public Register<0x40011400> {
            using CTS = Field<9, 1>;    // CTS flag
            using LBD = Field<8, 1>;    // LIN break detection flag
            using TXE = Field<7, 1>;    // Transmit data register empty
            using TC = Field<6, 1>;    // Transmission complete
            using RXNE = Field<5, 1>;    // Read data register not empty
            using IDLE = Field<4, 1>;    // IDLE line detected
            using ORE = Field<3, 1>;    // Overrun error
            using NF = Field<2, 1>;    // Noise detected flag
            using FE = Field<1, 1>;    // Framing error
            using PE = Field<0, 1>;    // Parity error
        };

        // Data register
        struct DR : public Register<0x40011404> {
            using Field = Field<0, 9>;    // Data value
        };

        // Baud rate register
        struct BRR : public Register<0x40011408> {
            using DIV_Mantissa = Field<4, 12>;    // mantissa of USARTDIV
            using DIV_Fraction = Field<0, 4>;    // fraction of USARTDIV
        };

        // Control register 1
        struct CR1 : public Register<0x4001140c> {
            using OVER8 = Field<15, 1>;    // Oversampling mode
            using UE = Field<13, 1>;    // USART enable
            using M = Field<12, 1>;    // Word length
            using WAKE = Field<11, 1>;    // Wakeup method
            using PCE = Field<10, 1>;    // Parity control enable
            using PS = Field<9, 1>;    // Parity selection
            using PEIE = Field<8, 1>;    // PE interrupt enable
            using TXEIE = Field<7, 1>;    // TXE interrupt enable
            using TCIE = Field<6, 1>;    // Transmission complete interrupt enable
            using RXNEIE = Field<5, 1>;    // RXNE interrupt enable
            using IDLEIE = Field<4, 1>;    // IDLE interrupt enable
            using TE = Field<3, 1>;    // Transmitter enable
            using RE = Field<2, 1>;    // Receiver enable
            using RWU = Field<1, 1>;    // Receiver wakeup
            using SBK = Field<0, 1>;    // Send break
        };

        // Control register 2
        struct CR2 : public Register<0x40011410> {
            using LINEN = Field<14, 1>;    // LIN mode enable
            using STOP = Field<12, 2>;    // STOP bits
            using CLKEN = Field<11, 1>;    // Clock enable
            using CPOL = Field<10, 1>;    // Clock polarity
            using CPHA = Field<9, 1>;    // Clock phase
            using LBCL = Field<8, 1>;    // Last bit clock pulse
            using LBDIE = Field<6, 1>;    // LIN break detection interrupt enable
            using LBDL = Field<5, 1>;    // lin break detection length
            using ADD = Field<0, 4>;    // Address of the USART node
        };

        // Control register 3
        struct CR3 : public Register<0x40011414> {
            using ONEBIT = Field<11, 1>;    // One sample bit method enable
            using CTSIE = Field<10, 1>;    // CTS interrupt enable
            using CTSE = Field<9, 1>;    // CTS enable
            using RTSE = Field<8, 1>;    // RTS enable
            using DMAT = Field<7, 1>;    // DMA enable transmitter
            using DMAR = Field<6, 1>;    // DMA enable receiver
            using SCEN = Field<5, 1>;    // Smartcard mode enable
            using NACK = Field<4, 1>;    // Smartcard NACK enable
            using HDSEL = Field<3, 1>;    // Half-duplex selection
            using IRLP = Field<2, 1>;    // IrDA low-power
            using IREN = Field<1, 1>;    // IrDA mode enable
            using EIE = Field<0, 1>;    // Error interrupt enable
        };

        // Guard time and prescaler register
        struct GTPR : public Register<0x40011418> {
            using GT = Field<8, 8>;    // Guard time value
            using PSC = Field<0, 8>;    // Prescaler value
        };

    };

    // Window watchdog
    struct WWDG {
        // Control register
        struct CR : public Register<0x40002c00> {
            using WDGA = Field<7, 1>;    // Activation bit
            using T = Field<0, 7>;    // 7-bit counter (MSB to LSB)
        };

        // Configuration register
        struct CFR : public Register<0x40002c04> {
            using EWI = Field<9, 1>;    // Early wakeup interrupt
            using WDGTB1 = Field<8, 1>;    // Timer base
            using WDGTB0 = Field<7, 1>;    // Timer base
            using W = Field<0, 7>;    // 7-bit window value
        };

        // Status register
        struct SR : public Register<0x40002c08> {
            using EWIF = Field<0, 1>;    // Early wakeup interrupt flag
        };

    };

    // DMA controller
    struct DMA2 {
        // low interrupt status register
        struct LISR : public RegisterReadOnly<0x40026400> {
            using TCIF3 = Field<27, 1>;    // Stream x transfer complete interrupt flag (x = 3..0)
            using HTIF3 = Field<26, 1>;    // Stream x half transfer interrupt flag (x=3..0)
            using TEIF3 = Field<25, 1>;    // Stream x transfer error interrupt flag (x=3..0)
            using DMEIF3 = Field<24, 1>;    // Stream x direct mode error interrupt flag (x=3..0)
            using FEIF3 = Field<22, 1>;    // Stream x FIFO error interrupt flag (x=3..0)
            using TCIF2 = Field<21, 1>;    // Stream x transfer complete interrupt flag (x = 3..0)
            using HTIF2 = Field<20, 1>;    // Stream x half transfer interrupt flag (x=3..0)
            using TEIF2 = Field<19, 1>;    // Stream x transfer error interrupt flag (x=3..0)
            using DMEIF2 = Field<18, 1>;    // Stream x direct mode error interrupt flag (x=3..0)
            using FEIF2 = Field<16, 1>;    // Stream x FIFO error interrupt flag (x=3..0)
            using TCIF1 = Field<11, 1>;    // Stream x transfer complete interrupt flag (x = 3..0)
            using HTIF1 = Field<10, 1>;    // Stream x half transfer interrupt flag (x=3..0)
            using TEIF1 = Field<9, 1>;    // Stream x transfer error interrupt flag (x=3..0)
            using DMEIF1 = Field<8, 1>;    // Stream x direct mode error interrupt flag (x=3..0)
            using FEIF1 = Field<6, 1>;    // Stream x FIFO error interrupt flag (x=3..0)
            using TCIF0 = Field<5, 1>;    // Stream x transfer complete interrupt flag (x = 3..0)
            using HTIF0 = Field<4, 1>;    // Stream x half transfer interrupt flag (x=3..0)
            using TEIF0 = Field<3, 1>;    // Stream x transfer error interrupt flag (x=3..0)
            using DMEIF0 = Field<2, 1>;    // Stream x direct mode error interrupt flag (x=3..0)
            using FEIF0 = Field<0, 1>;    // Stream x FIFO error interrupt flag (x=3..0)
        };

        // high interrupt status register
        struct HISR : public RegisterReadOnly<0x40026404> {
            using TCIF7 = Field<27, 1>;    // Stream x transfer complete interrupt flag (x=7..4)
            using HTIF7 = Field<26, 1>;    // Stream x half transfer interrupt flag (x=7..4)
            using TEIF7 = Field<25, 1>;    // Stream x transfer error interrupt flag (x=7..4)
            using DMEIF7 = Field<24, 1>;    // Stream x direct mode error interrupt flag (x=7..4)
            using FEIF7 = Field<22, 1>;    // Stream x FIFO error interrupt flag (x=7..4)
            using TCIF6 = Field<21, 1>;    // Stream x transfer complete interrupt flag (x=7..4)
            using HTIF6 = Field<20, 1>;    // Stream x half transfer interrupt flag (x=7..4)
            using TEIF6 = Field<19, 1>;    // Stream x transfer error interrupt flag (x=7..4)
            using DMEIF6 = Field<18, 1>;    // Stream x direct mode error interrupt flag (x=7..4)
            using FEIF6 = Field<16, 1>;    // Stream x FIFO error interrupt flag (x=7..4)
            using TCIF5 = Field<11, 1>;    // Stream x transfer complete interrupt flag (x=7..4)
            using HTIF5 = Field<10, 1>;    // Stream x half transfer interrupt flag (x=7..4)
            using TEIF5 = Field<9, 1>;    // Stream x transfer error interrupt flag (x=7..4)
            using DMEIF5 = Field<8, 1>;    // Stream x direct mode error interrupt flag (x=7..4)
            using FEIF5 = Field<6, 1>;    // Stream x FIFO error interrupt flag (x=7..4)
            using TCIF4 = Field<5, 1>;    // Stream x transfer complete interrupt flag (x=7..4)
            using HTIF4 = Field<4, 1>;    // Stream x half transfer interrupt flag (x=7..4)
            using TEIF4 = Field<3, 1>;    // Stream x transfer error interrupt flag (x=7..4)
            using DMEIF4 = Field<2, 1>;    // Stream x direct mode error interrupt flag (x=7..4)
            using FEIF4 = Field<0, 1>;    // Stream x FIFO error interrupt flag (x=7..4)
        };

        // low interrupt flag clear register
        struct LIFCR : public RegisterWriteOnly<0x40026408> {
            using CTCIF3 = Field<27, 1>;    // Stream x clear transfer complete interrupt flag (x = 3..0)
            using CHTIF3 = Field<26, 1>;    // Stream x clear half transfer interrupt flag (x = 3..0)
            using CTEIF3 = Field<25, 1>;    // Stream x clear transfer error interrupt flag (x = 3..0)
            using CDMEIF3 = Field<24, 1>;    // Stream x clear direct mode error interrupt flag (x = 3..0)
            using CFEIF3 = Field<22, 1>;    // Stream x clear FIFO error interrupt flag (x = 3..0)
            using CTCIF2 = Field<21, 1>;    // Stream x clear transfer complete interrupt flag (x = 3..0)
            using CHTIF2 = Field<20, 1>;    // Stream x clear half transfer interrupt flag (x = 3..0)
            using CTEIF2 = Field<19, 1>;    // Stream x clear transfer error interrupt flag (x = 3..0)
            using CDMEIF2 = Field<18, 1>;    // Stream x clear direct mode error interrupt flag (x = 3..0)
            using CFEIF2 = Field<16, 1>;    // Stream x clear FIFO error interrupt flag (x = 3..0)
            using CTCIF1 = Field<11, 1>;    // Stream x clear transfer complete interrupt flag (x = 3..0)
            using CHTIF1 = Field<10, 1>;    // Stream x clear half transfer interrupt flag (x = 3..0)
            using CTEIF1 = Field<9, 1>;    // Stream x clear transfer error interrupt flag (x = 3..0)
            using CDMEIF1 = Field<8, 1>;    // Stream x clear direct mode error interrupt flag (x = 3..0)
            using CFEIF1 = Field<6, 1>;    // Stream x clear FIFO error interrupt flag (x = 3..0)
            using CTCIF0 = Field<5, 1>;    // Stream x clear transfer complete interrupt flag (x = 3..0)
            using CHTIF0 = Field<4, 1>;    // Stream x clear half transfer interrupt flag (x = 3..0)
            using CTEIF0 = Field<3, 1>;    // Stream x clear transfer error interrupt flag (x = 3..0)
            using CDMEIF0 = Field<2, 1>;    // Stream x clear direct mode error interrupt flag (x = 3..0)
            using CFEIF0 = Field<0, 1>;    // Stream x clear FIFO error interrupt flag (x = 3..0)
        };

        // high interrupt flag clear register
        struct HIFCR : public RegisterWriteOnly<0x4002640c> {
            using CTCIF7 = Field<27, 1>;    // Stream x clear transfer complete interrupt flag (x = 7..4)
            using CHTIF7 = Field<26, 1>;    // Stream x clear half transfer interrupt flag (x = 7..4)
            using CTEIF7 = Field<25, 1>;    // Stream x clear transfer error interrupt flag (x = 7..4)
            using CDMEIF7 = Field<24, 1>;    // Stream x clear direct mode error interrupt flag (x = 7..4)
            using CFEIF7 = Field<22, 1>;    // Stream x clear FIFO error interrupt flag (x = 7..4)
            using CTCIF6 = Field<21, 1>;    // Stream x clear transfer complete interrupt flag (x = 7..4)
            using CHTIF6 = Field<20, 1>;    // Stream x clear half transfer interrupt flag (x = 7..4)
            using CTEIF6 = Field<19, 1>;    // Stream x clear transfer error interrupt flag (x = 7..4)
            using CDMEIF6 = Field<18, 1>;    // Stream x clear direct mode error interrupt flag (x = 7..4)
            using CFEIF6 = Field<16, 1>;    // Stream x clear FIFO error interrupt flag (x = 7..4)
            using CTCIF5 = Field<11, 1>;    // Stream x clear transfer complete interrupt flag (x = 7..4)
            using CHTIF5 = Field<10, 1>;    // Stream x clear half transfer interrupt flag (x = 7..4)
            using CTEIF5 = Field<9, 1>;    // Stream x clear transfer error interrupt flag (x = 7..4)
            using CDMEIF5 = Field<8, 1>;    // Stream x clear direct mode error interrupt flag (x = 7..4)
            using CFEIF5 = Field<6, 1>;    // Stream x clear FIFO error interrupt flag (x = 7..4)
            using CTCIF4 = Field<5, 1>;    // Stream x clear transfer complete interrupt flag (x = 7..4)
            using CHTIF4 = Field<4, 1>;    // Stream x clear half transfer interrupt flag (x = 7..4)
            using CTEIF4 = Field<3, 1>;    // Stream x clear transfer error interrupt flag (x = 7..4)
            using CDMEIF4 = Field<2, 1>;    // Stream x clear direct mode error interrupt flag (x = 7..4)
            using CFEIF4 = Field<0, 1>;    // Stream x clear FIFO error interrupt flag (x = 7..4)
        };

        // stream x configuration register
        struct S0CR : public Register<0x40026410> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S0NDTR : public Register<0x40026414> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S0PAR : public Register<0x40026418> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S0M0AR : public Register<0x4002641c> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S0M1AR : public Register<0x40026420> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S0FCR : public Register<0x40026424> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S1CR : public Register<0x40026428> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S1NDTR : public Register<0x4002642c> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S1PAR : public Register<0x40026430> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S1M0AR : public Register<0x40026434> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S1M1AR : public Register<0x40026438> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S1FCR : public Register<0x4002643c> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S2CR : public Register<0x40026440> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S2NDTR : public Register<0x40026444> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S2PAR : public Register<0x40026448> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S2M0AR : public Register<0x4002644c> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S2M1AR : public Register<0x40026450> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S2FCR : public Register<0x40026454> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S3CR : public Register<0x40026458> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S3NDTR : public Register<0x4002645c> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S3PAR : public Register<0x40026460> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S3M0AR : public Register<0x40026464> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S3M1AR : public Register<0x40026468> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S3FCR : public Register<0x4002646c> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S4CR : public Register<0x40026470> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S4NDTR : public Register<0x40026474> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S4PAR : public Register<0x40026478> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S4M0AR : public Register<0x4002647c> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S4M1AR : public Register<0x40026480> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S4FCR : public Register<0x40026484> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S5CR : public Register<0x40026488> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S5NDTR : public Register<0x4002648c> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S5PAR : public Register<0x40026490> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S5M0AR : public Register<0x40026494> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S5M1AR : public Register<0x40026498> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S5FCR : public Register<0x4002649c> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S6CR : public Register<0x400264a0> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S6NDTR : public Register<0x400264a4> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S6PAR : public Register<0x400264a8> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S6M0AR : public Register<0x400264ac> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S6M1AR : public Register<0x400264b0> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S6FCR : public Register<0x400264b4> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S7CR : public Register<0x400264b8> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S7NDTR : public Register<0x400264bc> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S7PAR : public Register<0x400264c0> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S7M0AR : public Register<0x400264c4> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S7M1AR : public Register<0x400264c8> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S7FCR : public Register<0x400264cc> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

    };

    // DMA controller
    struct DMA1 {
        // low interrupt status register
        struct LISR : public RegisterReadOnly<0x40026000> {
            using TCIF3 = Field<27, 1>;    // Stream x transfer complete interrupt flag (x = 3..0)
            using HTIF3 = Field<26, 1>;    // Stream x half transfer interrupt flag (x=3..0)
            using TEIF3 = Field<25, 1>;    // Stream x transfer error interrupt flag (x=3..0)
            using DMEIF3 = Field<24, 1>;    // Stream x direct mode error interrupt flag (x=3..0)
            using FEIF3 = Field<22, 1>;    // Stream x FIFO error interrupt flag (x=3..0)
            using TCIF2 = Field<21, 1>;    // Stream x transfer complete interrupt flag (x = 3..0)
            using HTIF2 = Field<20, 1>;    // Stream x half transfer interrupt flag (x=3..0)
            using TEIF2 = Field<19, 1>;    // Stream x transfer error interrupt flag (x=3..0)
            using DMEIF2 = Field<18, 1>;    // Stream x direct mode error interrupt flag (x=3..0)
            using FEIF2 = Field<16, 1>;    // Stream x FIFO error interrupt flag (x=3..0)
            using TCIF1 = Field<11, 1>;    // Stream x transfer complete interrupt flag (x = 3..0)
            using HTIF1 = Field<10, 1>;    // Stream x half transfer interrupt flag (x=3..0)
            using TEIF1 = Field<9, 1>;    // Stream x transfer error interrupt flag (x=3..0)
            using DMEIF1 = Field<8, 1>;    // Stream x direct mode error interrupt flag (x=3..0)
            using FEIF1 = Field<6, 1>;    // Stream x FIFO error interrupt flag (x=3..0)
            using TCIF0 = Field<5, 1>;    // Stream x transfer complete interrupt flag (x = 3..0)
            using HTIF0 = Field<4, 1>;    // Stream x half transfer interrupt flag (x=3..0)
            using TEIF0 = Field<3, 1>;    // Stream x transfer error interrupt flag (x=3..0)
            using DMEIF0 = Field<2, 1>;    // Stream x direct mode error interrupt flag (x=3..0)
            using FEIF0 = Field<0, 1>;    // Stream x FIFO error interrupt flag (x=3..0)
        };

        // high interrupt status register
        struct HISR : public RegisterReadOnly<0x40026004> {
            using TCIF7 = Field<27, 1>;    // Stream x transfer complete interrupt flag (x=7..4)
            using HTIF7 = Field<26, 1>;    // Stream x half transfer interrupt flag (x=7..4)
            using TEIF7 = Field<25, 1>;    // Stream x transfer error interrupt flag (x=7..4)
            using DMEIF7 = Field<24, 1>;    // Stream x direct mode error interrupt flag (x=7..4)
            using FEIF7 = Field<22, 1>;    // Stream x FIFO error interrupt flag (x=7..4)
            using TCIF6 = Field<21, 1>;    // Stream x transfer complete interrupt flag (x=7..4)
            using HTIF6 = Field<20, 1>;    // Stream x half transfer interrupt flag (x=7..4)
            using TEIF6 = Field<19, 1>;    // Stream x transfer error interrupt flag (x=7..4)
            using DMEIF6 = Field<18, 1>;    // Stream x direct mode error interrupt flag (x=7..4)
            using FEIF6 = Field<16, 1>;    // Stream x FIFO error interrupt flag (x=7..4)
            using TCIF5 = Field<11, 1>;    // Stream x transfer complete interrupt flag (x=7..4)
            using HTIF5 = Field<10, 1>;    // Stream x half transfer interrupt flag (x=7..4)
            using TEIF5 = Field<9, 1>;    // Stream x transfer error interrupt flag (x=7..4)
            using DMEIF5 = Field<8, 1>;    // Stream x direct mode error interrupt flag (x=7..4)
            using FEIF5 = Field<6, 1>;    // Stream x FIFO error interrupt flag (x=7..4)
            using TCIF4 = Field<5, 1>;    // Stream x transfer complete interrupt flag (x=7..4)
            using HTIF4 = Field<4, 1>;    // Stream x half transfer interrupt flag (x=7..4)
            using TEIF4 = Field<3, 1>;    // Stream x transfer error interrupt flag (x=7..4)
            using DMEIF4 = Field<2, 1>;    // Stream x direct mode error interrupt flag (x=7..4)
            using FEIF4 = Field<0, 1>;    // Stream x FIFO error interrupt flag (x=7..4)
        };

        // low interrupt flag clear register
        struct LIFCR : public RegisterWriteOnly<0x40026008> {
            using CTCIF3 = Field<27, 1>;    // Stream x clear transfer complete interrupt flag (x = 3..0)
            using CHTIF3 = Field<26, 1>;    // Stream x clear half transfer interrupt flag (x = 3..0)
            using CTEIF3 = Field<25, 1>;    // Stream x clear transfer error interrupt flag (x = 3..0)
            using CDMEIF3 = Field<24, 1>;    // Stream x clear direct mode error interrupt flag (x = 3..0)
            using CFEIF3 = Field<22, 1>;    // Stream x clear FIFO error interrupt flag (x = 3..0)
            using CTCIF2 = Field<21, 1>;    // Stream x clear transfer complete interrupt flag (x = 3..0)
            using CHTIF2 = Field<20, 1>;    // Stream x clear half transfer interrupt flag (x = 3..0)
            using CTEIF2 = Field<19, 1>;    // Stream x clear transfer error interrupt flag (x = 3..0)
            using CDMEIF2 = Field<18, 1>;    // Stream x clear direct mode error interrupt flag (x = 3..0)
            using CFEIF2 = Field<16, 1>;    // Stream x clear FIFO error interrupt flag (x = 3..0)
            using CTCIF1 = Field<11, 1>;    // Stream x clear transfer complete interrupt flag (x = 3..0)
            using CHTIF1 = Field<10, 1>;    // Stream x clear half transfer interrupt flag (x = 3..0)
            using CTEIF1 = Field<9, 1>;    // Stream x clear transfer error interrupt flag (x = 3..0)
            using CDMEIF1 = Field<8, 1>;    // Stream x clear direct mode error interrupt flag (x = 3..0)
            using CFEIF1 = Field<6, 1>;    // Stream x clear FIFO error interrupt flag (x = 3..0)
            using CTCIF0 = Field<5, 1>;    // Stream x clear transfer complete interrupt flag (x = 3..0)
            using CHTIF0 = Field<4, 1>;    // Stream x clear half transfer interrupt flag (x = 3..0)
            using CTEIF0 = Field<3, 1>;    // Stream x clear transfer error interrupt flag (x = 3..0)
            using CDMEIF0 = Field<2, 1>;    // Stream x clear direct mode error interrupt flag (x = 3..0)
            using CFEIF0 = Field<0, 1>;    // Stream x clear FIFO error interrupt flag (x = 3..0)
        };

        // high interrupt flag clear register
        struct HIFCR : public RegisterWriteOnly<0x4002600c> {
            using CTCIF7 = Field<27, 1>;    // Stream x clear transfer complete interrupt flag (x = 7..4)
            using CHTIF7 = Field<26, 1>;    // Stream x clear half transfer interrupt flag (x = 7..4)
            using CTEIF7 = Field<25, 1>;    // Stream x clear transfer error interrupt flag (x = 7..4)
            using CDMEIF7 = Field<24, 1>;    // Stream x clear direct mode error interrupt flag (x = 7..4)
            using CFEIF7 = Field<22, 1>;    // Stream x clear FIFO error interrupt flag (x = 7..4)
            using CTCIF6 = Field<21, 1>;    // Stream x clear transfer complete interrupt flag (x = 7..4)
            using CHTIF6 = Field<20, 1>;    // Stream x clear half transfer interrupt flag (x = 7..4)
            using CTEIF6 = Field<19, 1>;    // Stream x clear transfer error interrupt flag (x = 7..4)
            using CDMEIF6 = Field<18, 1>;    // Stream x clear direct mode error interrupt flag (x = 7..4)
            using CFEIF6 = Field<16, 1>;    // Stream x clear FIFO error interrupt flag (x = 7..4)
            using CTCIF5 = Field<11, 1>;    // Stream x clear transfer complete interrupt flag (x = 7..4)
            using CHTIF5 = Field<10, 1>;    // Stream x clear half transfer interrupt flag (x = 7..4)
            using CTEIF5 = Field<9, 1>;    // Stream x clear transfer error interrupt flag (x = 7..4)
            using CDMEIF5 = Field<8, 1>;    // Stream x clear direct mode error interrupt flag (x = 7..4)
            using CFEIF5 = Field<6, 1>;    // Stream x clear FIFO error interrupt flag (x = 7..4)
            using CTCIF4 = Field<5, 1>;    // Stream x clear transfer complete interrupt flag (x = 7..4)
            using CHTIF4 = Field<4, 1>;    // Stream x clear half transfer interrupt flag (x = 7..4)
            using CTEIF4 = Field<3, 1>;    // Stream x clear transfer error interrupt flag (x = 7..4)
            using CDMEIF4 = Field<2, 1>;    // Stream x clear direct mode error interrupt flag (x = 7..4)
            using CFEIF4 = Field<0, 1>;    // Stream x clear FIFO error interrupt flag (x = 7..4)
        };

        // stream x configuration register
        struct S0CR : public Register<0x40026010> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S0NDTR : public Register<0x40026014> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S0PAR : public Register<0x40026018> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S0M0AR : public Register<0x4002601c> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S0M1AR : public Register<0x40026020> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S0FCR : public Register<0x40026024> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S1CR : public Register<0x40026028> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S1NDTR : public Register<0x4002602c> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S1PAR : public Register<0x40026030> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S1M0AR : public Register<0x40026034> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S1M1AR : public Register<0x40026038> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S1FCR : public Register<0x4002603c> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S2CR : public Register<0x40026040> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S2NDTR : public Register<0x40026044> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S2PAR : public Register<0x40026048> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S2M0AR : public Register<0x4002604c> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S2M1AR : public Register<0x40026050> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S2FCR : public Register<0x40026054> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S3CR : public Register<0x40026058> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S3NDTR : public Register<0x4002605c> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S3PAR : public Register<0x40026060> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S3M0AR : public Register<0x40026064> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S3M1AR : public Register<0x40026068> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S3FCR : public Register<0x4002606c> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S4CR : public Register<0x40026070> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S4NDTR : public Register<0x40026074> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S4PAR : public Register<0x40026078> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S4M0AR : public Register<0x4002607c> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S4M1AR : public Register<0x40026080> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S4FCR : public Register<0x40026084> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S5CR : public Register<0x40026088> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S5NDTR : public Register<0x4002608c> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S5PAR : public Register<0x40026090> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S5M0AR : public Register<0x40026094> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S5M1AR : public Register<0x40026098> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S5FCR : public Register<0x4002609c> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S6CR : public Register<0x400260a0> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S6NDTR : public Register<0x400260a4> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S6PAR : public Register<0x400260a8> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S6M0AR : public Register<0x400260ac> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S6M1AR : public Register<0x400260b0> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S6FCR : public Register<0x400260b4> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

        // stream x configuration register
        struct S7CR : public Register<0x400260b8> {
            using CHSEL = Field<25, 3>;    // Channel selection
            using MBURST = Field<23, 2>;    // Memory burst transfer configuration
            using PBURST = Field<21, 2>;    // Peripheral burst transfer configuration
            using ACK = Field<20, 1>;    // ACK
            using CT = Field<19, 1>;    // Current target (only in double buffer mode)
            using DBM = Field<18, 1>;    // Double buffer mode
            using PL = Field<16, 2>;    // Priority level
            using PINCOS = Field<15, 1>;    // Peripheral increment offset size
            using MSIZE = Field<13, 2>;    // Memory data size
            using PSIZE = Field<11, 2>;    // Peripheral data size
            using MINC = Field<10, 1>;    // Memory increment mode
            using PINC = Field<9, 1>;    // Peripheral increment mode
            using CIRC = Field<8, 1>;    // Circular mode
            using DIR = Field<6, 2>;    // Data transfer direction
            using PFCTRL = Field<5, 1>;    // Peripheral flow controller
            using TCIE = Field<4, 1>;    // Transfer complete interrupt enable
            using HTIE = Field<3, 1>;    // Half transfer interrupt enable
            using TEIE = Field<2, 1>;    // Transfer error interrupt enable
            using DMEIE = Field<1, 1>;    // Direct mode error interrupt enable
            using EN = Field<0, 1>;    // Stream enable / flag stream ready when read low
        };

        // stream x number of data register
        struct S7NDTR : public Register<0x400260bc> {
            using NDT = Field<0, 16>;    // Number of data items to transfer
        };

        // stream x peripheral address register
        struct S7PAR : public Register<0x400260c0> {
            using PA = Field<0, 32>;    // Peripheral address
        };

        // stream x memory 0 address register
        struct S7M0AR : public Register<0x400260c4> {
            using M0A = Field<0, 32>;    // Memory 0 address
        };

        // stream x memory 1 address register
        struct S7M1AR : public Register<0x400260c8> {
            using M1A = Field<0, 32>;    // Memory 1 address (used in case of Double buffer mode)
        };

        // stream x FIFO control register
        struct S7FCR : public Register<0x400260cc> {
            using FEIE = Field<7, 1>;    // FIFO error interrupt enable
            using FS = Field<3, 3>;    // FIFO status
            using DMDIS = Field<2, 1>;    // Direct mode disable
            using FTH = Field<0, 2>;    // FIFO threshold selection
        };

    };

    // General-purpose I/Os
    struct GPIOH {
        // GPIO port mode register
        struct MODER : public Register<0x40021c00> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x40021c04> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x40021c08> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x40021c0c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x40021c10> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x40021c14> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x40021c18> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x40021c1c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x40021c20> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x40021c24> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

    };

    // General-purpose I/Os
    struct GPIOE {
        // GPIO port mode register
        struct MODER : public Register<0x40021000> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x40021004> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x40021008> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4002100c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x40021010> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x40021014> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x40021018> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4002101c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x40021020> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x40021024> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

    };

    // General-purpose I/Os
    struct GPIOD {
        // GPIO port mode register
        struct MODER : public Register<0x40020c00> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x40020c04> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x40020c08> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x40020c0c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x40020c10> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x40020c14> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x40020c18> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x40020c1c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x40020c20> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x40020c24> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

    };

    // General-purpose I/Os
    struct GPIOC {
        // GPIO port mode register
        struct MODER : public Register<0x40020800> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x40020804> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x40020808> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4002080c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x40020810> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x40020814> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x40020818> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4002081c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x40020820> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x40020824> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

    };

    // General-purpose I/Os
    struct GPIOB {
        // GPIO port mode register
        struct MODER : public Register<0x40020400> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x40020404> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x40020408> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4002040c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x40020410> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x40020414> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x40020418> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4002041c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x40020420> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x40020424> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

    };

    // General-purpose I/Os
    struct GPIOA {
        // GPIO port mode register
        struct MODER : public Register<0x40020000> {
            using MODER15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using MODER14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using MODER13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using MODER12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using MODER11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using MODER10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using MODER9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using MODER8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using MODER7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using MODER6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using MODER5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using MODER4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using MODER3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using MODER2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using MODER1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using MODER0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output type register
        struct OTYPER : public Register<0x40020004> {
            using OT15 = Field<15, 1>;    // Port x configuration bits (y = 0..15)
            using OT14 = Field<14, 1>;    // Port x configuration bits (y = 0..15)
            using OT13 = Field<13, 1>;    // Port x configuration bits (y = 0..15)
            using OT12 = Field<12, 1>;    // Port x configuration bits (y = 0..15)
            using OT11 = Field<11, 1>;    // Port x configuration bits (y = 0..15)
            using OT10 = Field<10, 1>;    // Port x configuration bits (y = 0..15)
            using OT9 = Field<9, 1>;    // Port x configuration bits (y = 0..15)
            using OT8 = Field<8, 1>;    // Port x configuration bits (y = 0..15)
            using OT7 = Field<7, 1>;    // Port x configuration bits (y = 0..15)
            using OT6 = Field<6, 1>;    // Port x configuration bits (y = 0..15)
            using OT5 = Field<5, 1>;    // Port x configuration bits (y = 0..15)
            using OT4 = Field<4, 1>;    // Port x configuration bits (y = 0..15)
            using OT3 = Field<3, 1>;    // Port x configuration bits (y = 0..15)
            using OT2 = Field<2, 1>;    // Port x configuration bits (y = 0..15)
            using OT1 = Field<1, 1>;    // Port x configuration bits (y = 0..15)
            using OT0 = Field<0, 1>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port output speed register
        struct OSPEEDR : public Register<0x40020008> {
            using OSPEEDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using OSPEEDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port pull-up/pull-down register
        struct PUPDR : public Register<0x4002000c> {
            using PUPDR15 = Field<30, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR14 = Field<28, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR13 = Field<26, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR12 = Field<24, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR11 = Field<22, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR10 = Field<20, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR9 = Field<18, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR8 = Field<16, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR7 = Field<14, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR6 = Field<12, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR5 = Field<10, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR4 = Field<8, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR3 = Field<6, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR2 = Field<4, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR1 = Field<2, 2>;    // Port x configuration bits (y = 0..15)
            using PUPDR0 = Field<0, 2>;    // Port x configuration bits (y = 0..15)
        };

        // GPIO port input data register
        struct IDR : public RegisterReadOnly<0x40020010> {
            using IDR15 = Field<15, 1>;    // Port input data (y = 0..15)
            using IDR14 = Field<14, 1>;    // Port input data (y = 0..15)
            using IDR13 = Field<13, 1>;    // Port input data (y = 0..15)
            using IDR12 = Field<12, 1>;    // Port input data (y = 0..15)
            using IDR11 = Field<11, 1>;    // Port input data (y = 0..15)
            using IDR10 = Field<10, 1>;    // Port input data (y = 0..15)
            using IDR9 = Field<9, 1>;    // Port input data (y = 0..15)
            using IDR8 = Field<8, 1>;    // Port input data (y = 0..15)
            using IDR7 = Field<7, 1>;    // Port input data (y = 0..15)
            using IDR6 = Field<6, 1>;    // Port input data (y = 0..15)
            using IDR5 = Field<5, 1>;    // Port input data (y = 0..15)
            using IDR4 = Field<4, 1>;    // Port input data (y = 0..15)
            using IDR3 = Field<3, 1>;    // Port input data (y = 0..15)
            using IDR2 = Field<2, 1>;    // Port input data (y = 0..15)
            using IDR1 = Field<1, 1>;    // Port input data (y = 0..15)
            using IDR0 = Field<0, 1>;    // Port input data (y = 0..15)
        };

        // GPIO port output data register
        struct ODR : public Register<0x40020014> {
            using ODR15 = Field<15, 1>;    // Port output data (y = 0..15)
            using ODR14 = Field<14, 1>;    // Port output data (y = 0..15)
            using ODR13 = Field<13, 1>;    // Port output data (y = 0..15)
            using ODR12 = Field<12, 1>;    // Port output data (y = 0..15)
            using ODR11 = Field<11, 1>;    // Port output data (y = 0..15)
            using ODR10 = Field<10, 1>;    // Port output data (y = 0..15)
            using ODR9 = Field<9, 1>;    // Port output data (y = 0..15)
            using ODR8 = Field<8, 1>;    // Port output data (y = 0..15)
            using ODR7 = Field<7, 1>;    // Port output data (y = 0..15)
            using ODR6 = Field<6, 1>;    // Port output data (y = 0..15)
            using ODR5 = Field<5, 1>;    // Port output data (y = 0..15)
            using ODR4 = Field<4, 1>;    // Port output data (y = 0..15)
            using ODR3 = Field<3, 1>;    // Port output data (y = 0..15)
            using ODR2 = Field<2, 1>;    // Port output data (y = 0..15)
            using ODR1 = Field<1, 1>;    // Port output data (y = 0..15)
            using ODR0 = Field<0, 1>;    // Port output data (y = 0..15)
        };

        // GPIO port bit set/reset register
        struct BSRR : public RegisterWriteOnly<0x40020018> {
            using BR15 = Field<31, 1>;    // Port x reset bit y (y = 0..15)
            using BR14 = Field<30, 1>;    // Port x reset bit y (y = 0..15)
            using BR13 = Field<29, 1>;    // Port x reset bit y (y = 0..15)
            using BR12 = Field<28, 1>;    // Port x reset bit y (y = 0..15)
            using BR11 = Field<27, 1>;    // Port x reset bit y (y = 0..15)
            using BR10 = Field<26, 1>;    // Port x reset bit y (y = 0..15)
            using BR9 = Field<25, 1>;    // Port x reset bit y (y = 0..15)
            using BR8 = Field<24, 1>;    // Port x reset bit y (y = 0..15)
            using BR7 = Field<23, 1>;    // Port x reset bit y (y = 0..15)
            using BR6 = Field<22, 1>;    // Port x reset bit y (y = 0..15)
            using BR5 = Field<21, 1>;    // Port x reset bit y (y = 0..15)
            using BR4 = Field<20, 1>;    // Port x reset bit y (y = 0..15)
            using BR3 = Field<19, 1>;    // Port x reset bit y (y = 0..15)
            using BR2 = Field<18, 1>;    // Port x reset bit y (y = 0..15)
            using BR1 = Field<17, 1>;    // Port x reset bit y (y = 0..15)
            using BR0 = Field<16, 1>;    // Port x set bit y (y= 0..15)
            using BS15 = Field<15, 1>;    // Port x set bit y (y= 0..15)
            using BS14 = Field<14, 1>;    // Port x set bit y (y= 0..15)
            using BS13 = Field<13, 1>;    // Port x set bit y (y= 0..15)
            using BS12 = Field<12, 1>;    // Port x set bit y (y= 0..15)
            using BS11 = Field<11, 1>;    // Port x set bit y (y= 0..15)
            using BS10 = Field<10, 1>;    // Port x set bit y (y= 0..15)
            using BS9 = Field<9, 1>;    // Port x set bit y (y= 0..15)
            using BS8 = Field<8, 1>;    // Port x set bit y (y= 0..15)
            using BS7 = Field<7, 1>;    // Port x set bit y (y= 0..15)
            using BS6 = Field<6, 1>;    // Port x set bit y (y= 0..15)
            using BS5 = Field<5, 1>;    // Port x set bit y (y= 0..15)
            using BS4 = Field<4, 1>;    // Port x set bit y (y= 0..15)
            using BS3 = Field<3, 1>;    // Port x set bit y (y= 0..15)
            using BS2 = Field<2, 1>;    // Port x set bit y (y= 0..15)
            using BS1 = Field<1, 1>;    // Port x set bit y (y= 0..15)
            using BS0 = Field<0, 1>;    // Port x set bit y (y= 0..15)
        };

        // GPIO port configuration lock register
        struct LCKR : public Register<0x4002001c> {
            using LCKK = Field<16, 1>;    // Port x lock bit y (y= 0..15)
            using LCK15 = Field<15, 1>;    // Port x lock bit y (y= 0..15)
            using LCK14 = Field<14, 1>;    // Port x lock bit y (y= 0..15)
            using LCK13 = Field<13, 1>;    // Port x lock bit y (y= 0..15)
            using LCK12 = Field<12, 1>;    // Port x lock bit y (y= 0..15)
            using LCK11 = Field<11, 1>;    // Port x lock bit y (y= 0..15)
            using LCK10 = Field<10, 1>;    // Port x lock bit y (y= 0..15)
            using LCK9 = Field<9, 1>;    // Port x lock bit y (y= 0..15)
            using LCK8 = Field<8, 1>;    // Port x lock bit y (y= 0..15)
            using LCK7 = Field<7, 1>;    // Port x lock bit y (y= 0..15)
            using LCK6 = Field<6, 1>;    // Port x lock bit y (y= 0..15)
            using LCK5 = Field<5, 1>;    // Port x lock bit y (y= 0..15)
            using LCK4 = Field<4, 1>;    // Port x lock bit y (y= 0..15)
            using LCK3 = Field<3, 1>;    // Port x lock bit y (y= 0..15)
            using LCK2 = Field<2, 1>;    // Port x lock bit y (y= 0..15)
            using LCK1 = Field<1, 1>;    // Port x lock bit y (y= 0..15)
            using LCK0 = Field<0, 1>;    // Port x lock bit y (y= 0..15)
        };

        // GPIO alternate function low register
        struct AFRL : public Register<0x40020020> {
            using AFRL7 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL6 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL5 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL4 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL3 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL2 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL1 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 0..7)
            using AFRL0 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 0..7)
        };

        // GPIO alternate function high register
        struct AFRH : public Register<0x40020024> {
            using AFRH15 = Field<28, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH14 = Field<24, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH13 = Field<20, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH12 = Field<16, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH11 = Field<12, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH10 = Field<8, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH9 = Field<4, 4>;    // Alternate function selection for port x bit y (y = 8..15)
            using AFRH8 = Field<0, 4>;    // Alternate function selection for port x bit y (y = 8..15)
        };

    };

    // Inter-integrated circuit
    struct I2C3 {
        // Control register 1
        struct CR1 : public Register<0x40005c00> {
            using SWRST = Field<15, 1>;    // Software reset
            using ALERT = Field<13, 1>;    // SMBus alert
            using PEC = Field<12, 1>;    // Packet error checking
            using POS = Field<11, 1>;    // Acknowledge/PEC Position (for data reception)
            using ACK = Field<10, 1>;    // Acknowledge enable
            using STOP = Field<9, 1>;    // Stop generation
            using START = Field<8, 1>;    // Start generation
            using NOSTRETCH = Field<7, 1>;    // Clock stretching disable (Slave mode)
            using ENGC = Field<6, 1>;    // General call enable
            using ENPEC = Field<5, 1>;    // PEC enable
            using ENARP = Field<4, 1>;    // ARP enable
            using SMBTYPE = Field<3, 1>;    // SMBus type
            using SMBUS = Field<1, 1>;    // SMBus mode
            using PE = Field<0, 1>;    // Peripheral enable
        };

        // Control register 2
        struct CR2 : public Register<0x40005c04> {
            using LAST = Field<12, 1>;    // DMA last transfer
            using DMAEN = Field<11, 1>;    // DMA requests enable
            using ITBUFEN = Field<10, 1>;    // Buffer interrupt enable
            using ITEVTEN = Field<9, 1>;    // Event interrupt enable
            using ITERREN = Field<8, 1>;    // Error interrupt enable
            using FREQ = Field<0, 6>;    // Peripheral clock frequency
        };

        // Own address register 1
        struct OAR1 : public Register<0x40005c08> {
            using ADDMODE = Field<15, 1>;    // Addressing mode (slave mode)
            using ADD10 = Field<8, 2>;    // Interface address
            using ADD7 = Field<1, 7>;    // Interface address
            using ADD0 = Field<0, 1>;    // Interface address
        };

        // Own address register 2
        struct OAR2 : public Register<0x40005c0c> {
            using ADD2 = Field<1, 7>;    // Interface address
            using ENDUAL = Field<0, 1>;    // Dual addressing mode enable
        };

        // Data register
        struct DR : public Register<0x40005c10> {
            using Field = Field<0, 8>;    // 8-bit data register
        };

        // Status register 1
        struct SR1 : public Register<0x40005c14> {
            using SMBALERT = Field<15, 1>;    // SMBus alert
            using TIMEOUT = Field<14, 1>;    // Timeout or Tlow error
            using PECERR = Field<12, 1>;    // PEC Error in reception
            using OVR = Field<11, 1>;    // Overrun/Underrun
            using AF = Field<10, 1>;    // Acknowledge failure
            using ARLO = Field<9, 1>;    // Arbitration lost (master mode)
            using BERR = Field<8, 1>;    // Bus error
            using TxE = Field<7, 1>;    // Data register empty (transmitters)
            using RxNE = Field<6, 1>;    // Data register not empty (receivers)
            using STOPF = Field<4, 1>;    // Stop detection (slave mode)
            using ADD10 = Field<3, 1>;    // 10-bit header sent (Master mode)
            using BTF = Field<2, 1>;    // Byte transfer finished
            using ADDR = Field<1, 1>;    // Address sent (master mode)/matched (slave mode)
            using SB = Field<0, 1>;    // Start bit (Master mode)
        };

        // Status register 2
        struct SR2 : public RegisterReadOnly<0x40005c18> {
            using PEC = Field<8, 8>;    // acket error checking register
            using DUALF = Field<7, 1>;    // Dual flag (Slave mode)
            using SMBHOST = Field<6, 1>;    // SMBus host header (Slave mode)
            using SMBDEFAULT = Field<5, 1>;    // SMBus device default address (Slave mode)
            using GENCALL = Field<4, 1>;    // General call address (Slave mode)
            using TRA = Field<2, 1>;    // Transmitter/receiver
            using BUSY = Field<1, 1>;    // Bus busy
            using MSL = Field<0, 1>;    // Master/slave
        };

        // Clock control register
        struct CCR : public Register<0x40005c1c> {
            using F_S = Field<15, 1>;    // I2C master mode selection
            using DUTY = Field<14, 1>;    // Fast mode duty cycle
            using Field = Field<0, 12>;    // Clock control register in Fast/Standard mode (Master mode)
        };

        // TRISE register
        struct TRISE : public Register<0x40005c20> {
            using Field = Field<0, 6>;    // Maximum rise time in Fast/Standard mode (Master mode)
        };

    };

    // Inter-integrated circuit
    struct I2C2 {
        // Control register 1
        struct CR1 : public Register<0x40005800> {
            using SWRST = Field<15, 1>;    // Software reset
            using ALERT = Field<13, 1>;    // SMBus alert
            using PEC = Field<12, 1>;    // Packet error checking
            using POS = Field<11, 1>;    // Acknowledge/PEC Position (for data reception)
            using ACK = Field<10, 1>;    // Acknowledge enable
            using STOP = Field<9, 1>;    // Stop generation
            using START = Field<8, 1>;    // Start generation
            using NOSTRETCH = Field<7, 1>;    // Clock stretching disable (Slave mode)
            using ENGC = Field<6, 1>;    // General call enable
            using ENPEC = Field<5, 1>;    // PEC enable
            using ENARP = Field<4, 1>;    // ARP enable
            using SMBTYPE = Field<3, 1>;    // SMBus type
            using SMBUS = Field<1, 1>;    // SMBus mode
            using PE = Field<0, 1>;    // Peripheral enable
        };

        // Control register 2
        struct CR2 : public Register<0x40005804> {
            using LAST = Field<12, 1>;    // DMA last transfer
            using DMAEN = Field<11, 1>;    // DMA requests enable
            using ITBUFEN = Field<10, 1>;    // Buffer interrupt enable
            using ITEVTEN = Field<9, 1>;    // Event interrupt enable
            using ITERREN = Field<8, 1>;    // Error interrupt enable
            using FREQ = Field<0, 6>;    // Peripheral clock frequency
        };

        // Own address register 1
        struct OAR1 : public Register<0x40005808> {
            using ADDMODE = Field<15, 1>;    // Addressing mode (slave mode)
            using ADD10 = Field<8, 2>;    // Interface address
            using ADD7 = Field<1, 7>;    // Interface address
            using ADD0 = Field<0, 1>;    // Interface address
        };

        // Own address register 2
        struct OAR2 : public Register<0x4000580c> {
            using ADD2 = Field<1, 7>;    // Interface address
            using ENDUAL = Field<0, 1>;    // Dual addressing mode enable
        };

        // Data register
        struct DR : public Register<0x40005810> {
            using Field = Field<0, 8>;    // 8-bit data register
        };

        // Status register 1
        struct SR1 : public Register<0x40005814> {
            using SMBALERT = Field<15, 1>;    // SMBus alert
            using TIMEOUT = Field<14, 1>;    // Timeout or Tlow error
            using PECERR = Field<12, 1>;    // PEC Error in reception
            using OVR = Field<11, 1>;    // Overrun/Underrun
            using AF = Field<10, 1>;    // Acknowledge failure
            using ARLO = Field<9, 1>;    // Arbitration lost (master mode)
            using BERR = Field<8, 1>;    // Bus error
            using TxE = Field<7, 1>;    // Data register empty (transmitters)
            using RxNE = Field<6, 1>;    // Data register not empty (receivers)
            using STOPF = Field<4, 1>;    // Stop detection (slave mode)
            using ADD10 = Field<3, 1>;    // 10-bit header sent (Master mode)
            using BTF = Field<2, 1>;    // Byte transfer finished
            using ADDR = Field<1, 1>;    // Address sent (master mode)/matched (slave mode)
            using SB = Field<0, 1>;    // Start bit (Master mode)
        };

        // Status register 2
        struct SR2 : public RegisterReadOnly<0x40005818> {
            using PEC = Field<8, 8>;    // acket error checking register
            using DUALF = Field<7, 1>;    // Dual flag (Slave mode)
            using SMBHOST = Field<6, 1>;    // SMBus host header (Slave mode)
            using SMBDEFAULT = Field<5, 1>;    // SMBus device default address (Slave mode)
            using GENCALL = Field<4, 1>;    // General call address (Slave mode)
            using TRA = Field<2, 1>;    // Transmitter/receiver
            using BUSY = Field<1, 1>;    // Bus busy
            using MSL = Field<0, 1>;    // Master/slave
        };

        // Clock control register
        struct CCR : public Register<0x4000581c> {
            using F_S = Field<15, 1>;    // I2C master mode selection
            using DUTY = Field<14, 1>;    // Fast mode duty cycle
            using Field = Field<0, 12>;    // Clock control register in Fast/Standard mode (Master mode)
        };

        // TRISE register
        struct TRISE : public Register<0x40005820> {
            using Field = Field<0, 6>;    // Maximum rise time in Fast/Standard mode (Master mode)
        };

    };

    // Inter-integrated circuit
    struct I2C1 {
        // Control register 1
        struct CR1 : public Register<0x40005400> {
            using SWRST = Field<15, 1>;    // Software reset
            using ALERT = Field<13, 1>;    // SMBus alert
            using PEC = Field<12, 1>;    // Packet error checking
            using POS = Field<11, 1>;    // Acknowledge/PEC Position (for data reception)
            using ACK = Field<10, 1>;    // Acknowledge enable
            using STOP = Field<9, 1>;    // Stop generation
            using START = Field<8, 1>;    // Start generation
            using NOSTRETCH = Field<7, 1>;    // Clock stretching disable (Slave mode)
            using ENGC = Field<6, 1>;    // General call enable
            using ENPEC = Field<5, 1>;    // PEC enable
            using ENARP = Field<4, 1>;    // ARP enable
            using SMBTYPE = Field<3, 1>;    // SMBus type
            using SMBUS = Field<1, 1>;    // SMBus mode
            using PE = Field<0, 1>;    // Peripheral enable
        };

        // Control register 2
        struct CR2 : public Register<0x40005404> {
            using LAST = Field<12, 1>;    // DMA last transfer
            using DMAEN = Field<11, 1>;    // DMA requests enable
            using ITBUFEN = Field<10, 1>;    // Buffer interrupt enable
            using ITEVTEN = Field<9, 1>;    // Event interrupt enable
            using ITERREN = Field<8, 1>;    // Error interrupt enable
            using FREQ = Field<0, 6>;    // Peripheral clock frequency
        };

        // Own address register 1
        struct OAR1 : public Register<0x40005408> {
            using ADDMODE = Field<15, 1>;    // Addressing mode (slave mode)
            using ADD10 = Field<8, 2>;    // Interface address
            using ADD7 = Field<1, 7>;    // Interface address
            using ADD0 = Field<0, 1>;    // Interface address
        };

        // Own address register 2
        struct OAR2 : public Register<0x4000540c> {
            using ADD2 = Field<1, 7>;    // Interface address
            using ENDUAL = Field<0, 1>;    // Dual addressing mode enable
        };

        // Data register
        struct DR : public Register<0x40005410> {
            using Field = Field<0, 8>;    // 8-bit data register
        };

        // Status register 1
        struct SR1 : public Register<0x40005414> {
            using SMBALERT = Field<15, 1>;    // SMBus alert
            using TIMEOUT = Field<14, 1>;    // Timeout or Tlow error
            using PECERR = Field<12, 1>;    // PEC Error in reception
            using OVR = Field<11, 1>;    // Overrun/Underrun
            using AF = Field<10, 1>;    // Acknowledge failure
            using ARLO = Field<9, 1>;    // Arbitration lost (master mode)
            using BERR = Field<8, 1>;    // Bus error
            using TxE = Field<7, 1>;    // Data register empty (transmitters)
            using RxNE = Field<6, 1>;    // Data register not empty (receivers)
            using STOPF = Field<4, 1>;    // Stop detection (slave mode)
            using ADD10 = Field<3, 1>;    // 10-bit header sent (Master mode)
            using BTF = Field<2, 1>;    // Byte transfer finished
            using ADDR = Field<1, 1>;    // Address sent (master mode)/matched (slave mode)
            using SB = Field<0, 1>;    // Start bit (Master mode)
        };

        // Status register 2
        struct SR2 : public RegisterReadOnly<0x40005418> {
            using PEC = Field<8, 8>;    // acket error checking register
            using DUALF = Field<7, 1>;    // Dual flag (Slave mode)
            using SMBHOST = Field<6, 1>;    // SMBus host header (Slave mode)
            using SMBDEFAULT = Field<5, 1>;    // SMBus device default address (Slave mode)
            using GENCALL = Field<4, 1>;    // General call address (Slave mode)
            using TRA = Field<2, 1>;    // Transmitter/receiver
            using BUSY = Field<1, 1>;    // Bus busy
            using MSL = Field<0, 1>;    // Master/slave
        };

        // Clock control register
        struct CCR : public Register<0x4000541c> {
            using F_S = Field<15, 1>;    // I2C master mode selection
            using DUTY = Field<14, 1>;    // Fast mode duty cycle
            using Field = Field<0, 12>;    // Clock control register in Fast/Standard mode (Master mode)
        };

        // TRISE register
        struct TRISE : public Register<0x40005420> {
            using Field = Field<0, 6>;    // Maximum rise time in Fast/Standard mode (Master mode)
        };

    };

    // Serial peripheral interface
    struct I2S2ext {
        // control register 1
        struct CR1 : public Register<0x40003400> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40003404> {
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using FRF = Field<4, 1>;    // Frame format
            using SSOE = Field<2, 1>;    // SS output enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
        };

        // status register
        struct SR : public Register<0x40003408> {
            using TIFRFE = Field<8, 1>;    // TI frame format error
            using BSY = Field<7, 1>;    // Busy flag
            using OVR = Field<6, 1>;    // Overrun flag
            using MODF = Field<5, 1>;    // Mode fault
            using CRCERR = Field<4, 1>;    // CRC error flag
            using UDR = Field<3, 1>;    // Underrun flag
            using CHSIDE = Field<2, 1>;    // Channel side
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using RXNE = Field<0, 1>;    // Receive buffer not empty
        };

        // data register
        struct DR : public Register<0x4000340c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40003410> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public RegisterReadOnly<0x40003414> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public RegisterReadOnly<0x40003418> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

        // I2S configuration register
        struct I2SCFGR : public Register<0x4000341c> {
            using I2SMOD = Field<11, 1>;    // I2S mode selection
            using I2SE = Field<10, 1>;    // I2S Enable
            using I2SCFG = Field<8, 2>;    // I2S configuration mode
            using PCMSYNC = Field<7, 1>;    // PCM frame synchronization
            using I2SSTD = Field<4, 2>;    // I2S standard selection
            using CKPOL = Field<3, 1>;    // Steady state clock polarity
            using DATLEN = Field<1, 2>;    // Data length to be transferred
            using CHLEN = Field<0, 1>;    // Channel length (number of bits per audio channel)
        };

        // I2S prescaler register
        struct I2SPR : public Register<0x40003420> {
            using MCKOE = Field<9, 1>;    // Master clock output enable
            using ODD = Field<8, 1>;    // Odd factor for the prescaler
            using I2SDIV = Field<0, 8>;    // I2S Linear prescaler
        };

    };

    // Serial peripheral interface
    struct I2S3ext {
        // control register 1
        struct CR1 : public Register<0x40004000> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40004004> {
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using FRF = Field<4, 1>;    // Frame format
            using SSOE = Field<2, 1>;    // SS output enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
        };

        // status register
        struct SR : public Register<0x40004008> {
            using TIFRFE = Field<8, 1>;    // TI frame format error
            using BSY = Field<7, 1>;    // Busy flag
            using OVR = Field<6, 1>;    // Overrun flag
            using MODF = Field<5, 1>;    // Mode fault
            using CRCERR = Field<4, 1>;    // CRC error flag
            using UDR = Field<3, 1>;    // Underrun flag
            using CHSIDE = Field<2, 1>;    // Channel side
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using RXNE = Field<0, 1>;    // Receive buffer not empty
        };

        // data register
        struct DR : public Register<0x4000400c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40004010> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public RegisterReadOnly<0x40004014> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public RegisterReadOnly<0x40004018> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

        // I2S configuration register
        struct I2SCFGR : public Register<0x4000401c> {
            using I2SMOD = Field<11, 1>;    // I2S mode selection
            using I2SE = Field<10, 1>;    // I2S Enable
            using I2SCFG = Field<8, 2>;    // I2S configuration mode
            using PCMSYNC = Field<7, 1>;    // PCM frame synchronization
            using I2SSTD = Field<4, 2>;    // I2S standard selection
            using CKPOL = Field<3, 1>;    // Steady state clock polarity
            using DATLEN = Field<1, 2>;    // Data length to be transferred
            using CHLEN = Field<0, 1>;    // Channel length (number of bits per audio channel)
        };

        // I2S prescaler register
        struct I2SPR : public Register<0x40004020> {
            using MCKOE = Field<9, 1>;    // Master clock output enable
            using ODD = Field<8, 1>;    // Odd factor for the prescaler
            using I2SDIV = Field<0, 8>;    // I2S Linear prescaler
        };

    };

    // Serial peripheral interface
    struct SPI1 {
        // control register 1
        struct CR1 : public Register<0x40013000> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40013004> {
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using FRF = Field<4, 1>;    // Frame format
            using SSOE = Field<2, 1>;    // SS output enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
        };

        // status register
        struct SR : public Register<0x40013008> {
            using TIFRFE = Field<8, 1>;    // TI frame format error
            using BSY = Field<7, 1>;    // Busy flag
            using OVR = Field<6, 1>;    // Overrun flag
            using MODF = Field<5, 1>;    // Mode fault
            using CRCERR = Field<4, 1>;    // CRC error flag
            using UDR = Field<3, 1>;    // Underrun flag
            using CHSIDE = Field<2, 1>;    // Channel side
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using RXNE = Field<0, 1>;    // Receive buffer not empty
        };

        // data register
        struct DR : public Register<0x4001300c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40013010> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public RegisterReadOnly<0x40013014> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public RegisterReadOnly<0x40013018> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

        // I2S configuration register
        struct I2SCFGR : public Register<0x4001301c> {
            using I2SMOD = Field<11, 1>;    // I2S mode selection
            using I2SE = Field<10, 1>;    // I2S Enable
            using I2SCFG = Field<8, 2>;    // I2S configuration mode
            using PCMSYNC = Field<7, 1>;    // PCM frame synchronization
            using I2SSTD = Field<4, 2>;    // I2S standard selection
            using CKPOL = Field<3, 1>;    // Steady state clock polarity
            using DATLEN = Field<1, 2>;    // Data length to be transferred
            using CHLEN = Field<0, 1>;    // Channel length (number of bits per audio channel)
        };

        // I2S prescaler register
        struct I2SPR : public Register<0x40013020> {
            using MCKOE = Field<9, 1>;    // Master clock output enable
            using ODD = Field<8, 1>;    // Odd factor for the prescaler
            using I2SDIV = Field<0, 8>;    // I2S Linear prescaler
        };

    };

    // Serial peripheral interface
    struct SPI2 {
        // control register 1
        struct CR1 : public Register<0x40003800> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40003804> {
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using FRF = Field<4, 1>;    // Frame format
            using SSOE = Field<2, 1>;    // SS output enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
        };

        // status register
        struct SR : public Register<0x40003808> {
            using TIFRFE = Field<8, 1>;    // TI frame format error
            using BSY = Field<7, 1>;    // Busy flag
            using OVR = Field<6, 1>;    // Overrun flag
            using MODF = Field<5, 1>;    // Mode fault
            using CRCERR = Field<4, 1>;    // CRC error flag
            using UDR = Field<3, 1>;    // Underrun flag
            using CHSIDE = Field<2, 1>;    // Channel side
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using RXNE = Field<0, 1>;    // Receive buffer not empty
        };

        // data register
        struct DR : public Register<0x4000380c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40003810> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public RegisterReadOnly<0x40003814> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public RegisterReadOnly<0x40003818> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

        // I2S configuration register
        struct I2SCFGR : public Register<0x4000381c> {
            using I2SMOD = Field<11, 1>;    // I2S mode selection
            using I2SE = Field<10, 1>;    // I2S Enable
            using I2SCFG = Field<8, 2>;    // I2S configuration mode
            using PCMSYNC = Field<7, 1>;    // PCM frame synchronization
            using I2SSTD = Field<4, 2>;    // I2S standard selection
            using CKPOL = Field<3, 1>;    // Steady state clock polarity
            using DATLEN = Field<1, 2>;    // Data length to be transferred
            using CHLEN = Field<0, 1>;    // Channel length (number of bits per audio channel)
        };

        // I2S prescaler register
        struct I2SPR : public Register<0x40003820> {
            using MCKOE = Field<9, 1>;    // Master clock output enable
            using ODD = Field<8, 1>;    // Odd factor for the prescaler
            using I2SDIV = Field<0, 8>;    // I2S Linear prescaler
        };

    };

    // Serial peripheral interface
    struct SPI3 {
        // control register 1
        struct CR1 : public Register<0x40003c00> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40003c04> {
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using FRF = Field<4, 1>;    // Frame format
            using SSOE = Field<2, 1>;    // SS output enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
        };

        // status register
        struct SR : public Register<0x40003c08> {
            using TIFRFE = Field<8, 1>;    // TI frame format error
            using BSY = Field<7, 1>;    // Busy flag
            using OVR = Field<6, 1>;    // Overrun flag
            using MODF = Field<5, 1>;    // Mode fault
            using CRCERR = Field<4, 1>;    // CRC error flag
            using UDR = Field<3, 1>;    // Underrun flag
            using CHSIDE = Field<2, 1>;    // Channel side
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using RXNE = Field<0, 1>;    // Receive buffer not empty
        };

        // data register
        struct DR : public Register<0x40003c0c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40003c10> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public RegisterReadOnly<0x40003c14> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public RegisterReadOnly<0x40003c18> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

        // I2S configuration register
        struct I2SCFGR : public Register<0x40003c1c> {
            using I2SMOD = Field<11, 1>;    // I2S mode selection
            using I2SE = Field<10, 1>;    // I2S Enable
            using I2SCFG = Field<8, 2>;    // I2S configuration mode
            using PCMSYNC = Field<7, 1>;    // PCM frame synchronization
            using I2SSTD = Field<4, 2>;    // I2S standard selection
            using CKPOL = Field<3, 1>;    // Steady state clock polarity
            using DATLEN = Field<1, 2>;    // Data length to be transferred
            using CHLEN = Field<0, 1>;    // Channel length (number of bits per audio channel)
        };

        // I2S prescaler register
        struct I2SPR : public Register<0x40003c20> {
            using MCKOE = Field<9, 1>;    // Master clock output enable
            using ODD = Field<8, 1>;    // Odd factor for the prescaler
            using I2SDIV = Field<0, 8>;    // I2S Linear prescaler
        };

    };

    // Serial peripheral interface
    struct SPI4 {
        // control register 1
        struct CR1 : public Register<0x40013400> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40013404> {
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using FRF = Field<4, 1>;    // Frame format
            using SSOE = Field<2, 1>;    // SS output enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
        };

        // status register
        struct SR : public Register<0x40013408> {
            using TIFRFE = Field<8, 1>;    // TI frame format error
            using BSY = Field<7, 1>;    // Busy flag
            using OVR = Field<6, 1>;    // Overrun flag
            using MODF = Field<5, 1>;    // Mode fault
            using CRCERR = Field<4, 1>;    // CRC error flag
            using UDR = Field<3, 1>;    // Underrun flag
            using CHSIDE = Field<2, 1>;    // Channel side
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using RXNE = Field<0, 1>;    // Receive buffer not empty
        };

        // data register
        struct DR : public Register<0x4001340c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40013410> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public RegisterReadOnly<0x40013414> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public RegisterReadOnly<0x40013418> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

        // I2S configuration register
        struct I2SCFGR : public Register<0x4001341c> {
            using I2SMOD = Field<11, 1>;    // I2S mode selection
            using I2SE = Field<10, 1>;    // I2S Enable
            using I2SCFG = Field<8, 2>;    // I2S configuration mode
            using PCMSYNC = Field<7, 1>;    // PCM frame synchronization
            using I2SSTD = Field<4, 2>;    // I2S standard selection
            using CKPOL = Field<3, 1>;    // Steady state clock polarity
            using DATLEN = Field<1, 2>;    // Data length to be transferred
            using CHLEN = Field<0, 1>;    // Channel length (number of bits per audio channel)
        };

        // I2S prescaler register
        struct I2SPR : public Register<0x40013420> {
            using MCKOE = Field<9, 1>;    // Master clock output enable
            using ODD = Field<8, 1>;    // Odd factor for the prescaler
            using I2SDIV = Field<0, 8>;    // I2S Linear prescaler
        };

    };

    // Serial peripheral interface
    struct SPI5 {
        // control register 1
        struct CR1 : public Register<0x40015000> {
            using BIDIMODE = Field<15, 1>;    // Bidirectional data mode enable
            using BIDIOE = Field<14, 1>;    // Output enable in bidirectional mode
            using CRCEN = Field<13, 1>;    // Hardware CRC calculation enable
            using CRCNEXT = Field<12, 1>;    // CRC transfer next
            using DFF = Field<11, 1>;    // Data frame format
            using RXONLY = Field<10, 1>;    // Receive only
            using SSM = Field<9, 1>;    // Software slave management
            using SSI = Field<8, 1>;    // Internal slave select
            using LSBFIRST = Field<7, 1>;    // Frame format
            using SPE = Field<6, 1>;    // SPI enable
            using BR = Field<3, 3>;    // Baud rate control
            using MSTR = Field<2, 1>;    // Master selection
            using CPOL = Field<1, 1>;    // Clock polarity
            using CPHA = Field<0, 1>;    // Clock phase
        };

        // control register 2
        struct CR2 : public Register<0x40015004> {
            using TXEIE = Field<7, 1>;    // Tx buffer empty interrupt enable
            using RXNEIE = Field<6, 1>;    // RX buffer not empty interrupt enable
            using ERRIE = Field<5, 1>;    // Error interrupt enable
            using FRF = Field<4, 1>;    // Frame format
            using SSOE = Field<2, 1>;    // SS output enable
            using TXDMAEN = Field<1, 1>;    // Tx buffer DMA enable
            using RXDMAEN = Field<0, 1>;    // Rx buffer DMA enable
        };

        // status register
        struct SR : public Register<0x40015008> {
            using TIFRFE = Field<8, 1>;    // TI frame format error
            using BSY = Field<7, 1>;    // Busy flag
            using OVR = Field<6, 1>;    // Overrun flag
            using MODF = Field<5, 1>;    // Mode fault
            using CRCERR = Field<4, 1>;    // CRC error flag
            using UDR = Field<3, 1>;    // Underrun flag
            using CHSIDE = Field<2, 1>;    // Channel side
            using TXE = Field<1, 1>;    // Transmit buffer empty
            using RXNE = Field<0, 1>;    // Receive buffer not empty
        };

        // data register
        struct DR : public Register<0x4001500c> {
            using Field = Field<0, 16>;    // Data register
        };

        // CRC polynomial register
        struct CRCPR : public Register<0x40015010> {
            using CRCPOLY = Field<0, 16>;    // CRC polynomial register
        };

        // RX CRC register
        struct RXCRCR : public RegisterReadOnly<0x40015014> {
            using RxCRC = Field<0, 16>;    // Rx CRC register
        };

        // TX CRC register
        struct TXCRCR : public RegisterReadOnly<0x40015018> {
            using TxCRC = Field<0, 16>;    // Tx CRC register
        };

        // I2S configuration register
        struct I2SCFGR : public Register<0x4001501c> {
            using I2SMOD = Field<11, 1>;    // I2S mode selection
            using I2SE = Field<10, 1>;    // I2S Enable
            using I2SCFG = Field<8, 2>;    // I2S configuration mode
            using PCMSYNC = Field<7, 1>;    // PCM frame synchronization
            using I2SSTD = Field<4, 2>;    // I2S standard selection
            using CKPOL = Field<3, 1>;    // Steady state clock polarity
            using DATLEN = Field<1, 2>;    // Data length to be transferred
            using CHLEN = Field<0, 1>;    // Channel length (number of bits per audio channel)
        };

        // I2S prescaler register
        struct I2SPR : public Register<0x40015020> {
            using MCKOE = Field<9, 1>;    // Master clock output enable
            using ODD = Field<8, 1>;    // Odd factor for the prescaler
            using I2SDIV = Field<0, 8>;    // I2S Linear prescaler
        };

    };

    // Nested Vectored Interrupt Controller
    struct NVIC {
        // Interrupt Set-Enable Register
        struct ISER0 : public Register<0xe000e100> {
            using SETENA = Field<0, 32>;    // SETENA
        };

        // Interrupt Set-Enable Register
        struct ISER1 : public Register<0xe000e104> {
            using SETENA = Field<0, 32>;    // SETENA
        };

        // Interrupt Set-Enable Register
        struct ISER2 : public Register<0xe000e108> {
            using SETENA = Field<0, 32>;    // SETENA
        };

        // Interrupt Clear-Enable Register
        struct ICER0 : public Register<0xe000e180> {
            using CLRENA = Field<0, 32>;    // CLRENA
        };

        // Interrupt Clear-Enable Register
        struct ICER1 : public Register<0xe000e184> {
            using CLRENA = Field<0, 32>;    // CLRENA
        };

        // Interrupt Clear-Enable Register
        struct ICER2 : public Register<0xe000e188> {
            using CLRENA = Field<0, 32>;    // CLRENA
        };

        // Interrupt Set-Pending Register
        struct ISPR0 : public Register<0xe000e200> {
            using SETPEND = Field<0, 32>;    // SETPEND
        };

        // Interrupt Set-Pending Register
        struct ISPR1 : public Register<0xe000e204> {
            using SETPEND = Field<0, 32>;    // SETPEND
        };

        // Interrupt Set-Pending Register
        struct ISPR2 : public Register<0xe000e208> {
            using SETPEND = Field<0, 32>;    // SETPEND
        };

        // Interrupt Clear-Pending Register
        struct ICPR0 : public Register<0xe000e280> {
            using CLRPEND = Field<0, 32>;    // CLRPEND
        };

        // Interrupt Clear-Pending Register
        struct ICPR1 : public Register<0xe000e284> {
            using CLRPEND = Field<0, 32>;    // CLRPEND
        };

        // Interrupt Clear-Pending Register
        struct ICPR2 : public Register<0xe000e288> {
            using CLRPEND = Field<0, 32>;    // CLRPEND
        };

        // Interrupt Active Bit Register
        struct IABR0 : public RegisterReadOnly<0xe000e300> {
            using ACTIVE = Field<0, 32>;    // ACTIVE
        };

        // Interrupt Active Bit Register
        struct IABR1 : public RegisterReadOnly<0xe000e304> {
            using ACTIVE = Field<0, 32>;    // ACTIVE
        };

        // Interrupt Active Bit Register
        struct IABR2 : public RegisterReadOnly<0xe000e308> {
            using ACTIVE = Field<0, 32>;    // ACTIVE
        };

        // Interrupt Priority Register
        struct IPR0 : public Register<0xe000e400> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR1 : public Register<0xe000e404> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR2 : public Register<0xe000e408> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR3 : public Register<0xe000e40c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR4 : public Register<0xe000e410> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR5 : public Register<0xe000e414> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR6 : public Register<0xe000e418> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR7 : public Register<0xe000e41c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR8 : public Register<0xe000e420> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR9 : public Register<0xe000e424> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR10 : public Register<0xe000e428> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR11 : public Register<0xe000e42c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR12 : public Register<0xe000e430> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR13 : public Register<0xe000e434> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR14 : public Register<0xe000e438> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR15 : public Register<0xe000e43c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR16 : public Register<0xe000e440> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR17 : public Register<0xe000e444> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR18 : public Register<0xe000e448> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

        // Interrupt Priority Register
        struct IPR19 : public Register<0xe000e44c> {
            using IPR_N0 = Field<0, 8>;    // IPR_N0
            using IPR_N1 = Field<8, 8>;    // IPR_N1
            using IPR_N2 = Field<16, 8>;    // IPR_N2
            using IPR_N3 = Field<24, 8>;    // IPR_N3
        };

    };

    // Floting point unit
    struct FPU {
        // Floating-point context control register
        struct FPCCR : public Register<0xe000ef34> {
            using LSPACT = Field<0, 1>;    // LSPACT
            using USER = Field<1, 1>;    // USER
            using THREAD = Field<3, 1>;    // THREAD
            using HFRDY = Field<4, 1>;    // HFRDY
            using MMRDY = Field<5, 1>;    // MMRDY
            using BFRDY = Field<6, 1>;    // BFRDY
            using MONRDY = Field<8, 1>;    // MONRDY
            using LSPEN = Field<30, 1>;    // LSPEN
            using ASPEN = Field<31, 1>;    // ASPEN
        };

        // Floating-point context address register
        struct FPCAR : public Register<0xe000ef38> {
            using ADDRESS = Field<3, 29>;    // Location of unpopulated floating-point
        };

        // Floating-point status control register
        struct FPSCR : public Register<0xe000ef3c> {
            using IOC = Field<0, 1>;    // Invalid operation cumulative exception bit
            using DZC = Field<1, 1>;    // Division by zero cumulative exception bit.
            using OFC = Field<2, 1>;    // Overflow cumulative exception bit
            using UFC = Field<3, 1>;    // Underflow cumulative exception bit
            using IXC = Field<4, 1>;    // Inexact cumulative exception bit
            using IDC = Field<7, 1>;    // Input denormal cumulative exception bit.
            using RMode = Field<22, 2>;    // Rounding Mode control field
            using FZ = Field<24, 1>;    // Flush-to-zero mode control bit:
            using DN = Field<25, 1>;    // Default NaN mode control bit
            using AHP = Field<26, 1>;    // Alternative half-precision control bit
            using V = Field<28, 1>;    // Overflow condition code flag
            using C = Field<29, 1>;    // Carry condition code flag
            using Z = Field<30, 1>;    // Zero condition code flag
            using N = Field<31, 1>;    // Negative condition code flag
        };

    };

    // Memory protection unit
    struct MPU {
        // MPU type register
        struct MPU_TYPER : public RegisterReadOnly<0xe000ed90> {
            using SEPARATE = Field<0, 1>;    // Separate flag
            using DREGION = Field<8, 8>;    // Number of MPU data regions
            using IREGION = Field<16, 8>;    // Number of MPU instruction regions
        };

        // MPU control register
        struct MPU_CTRL : public RegisterReadOnly<0xe000ed94> {
            using ENABLE = Field<0, 1>;    // Enables the MPU
            using HFNMIENA = Field<1, 1>;    // Enables the operation of MPU during hard fault
            using PRIVDEFENA = Field<2, 1>;    // Enable priviliged software access to default memory map
        };

        // MPU region number register
        struct MPU_RNR : public Register<0xe000ed98> {
            using REGION = Field<0, 8>;    // MPU region
        };

        // MPU region base address register
        struct MPU_RBAR : public Register<0xe000ed9c> {
            using REGION = Field<0, 4>;    // MPU region field
            using VALID = Field<4, 1>;    // MPU region number valid
            using ADDR = Field<5, 27>;    // Region base address field
        };

        // MPU region attribute and size register
        struct MPU_RASR : public Register<0xe000eda0> {
            using ENABLE = Field<0, 1>;    // Region enable bit.
            using SIZE = Field<1, 5>;    // Size of the MPU protection region
            using SRD = Field<8, 8>;    // Subregion disable bits
            using B = Field<16, 1>;    // memory attribute
            using C = Field<17, 1>;    // memory attribute
            using S = Field<18, 1>;    // Shareable memory attribute
            using TEX = Field<19, 3>;    // memory attribute
            using AP = Field<24, 3>;    // Access permission
            using XN = Field<28, 1>;    // Instruction access disable bit
        };

    };

    // SysTick timer
    struct STK {
        // SysTick control and status register
        struct CTRL : public Register<0xe000e010> {
            using ENABLE = Field<0, 1>;    // Counter enable
            using TICKINT = Field<1, 1>;    // SysTick exception request enable
            using CLKSOURCE = Field<2, 1>;    // Clock source selection
            using COUNTFLAG = Field<16, 1>;    // COUNTFLAG
        };

        // SysTick reload value register
        struct LOAD : public Register<0xe000e014> {
            using RELOAD = Field<0, 24>;    // RELOAD value
        };

        // SysTick current value register
        struct VAL : public Register<0xe000e018> {
            using CURRENT = Field<0, 24>;    // Current counter value
        };

        // SysTick calibration value register
        struct CALIB : public Register<0xe000e01c> {
            using TENMS = Field<0, 24>;    // Calibration value
            using SKEW = Field<30, 1>;    // SKEW flag: Indicates whether the TENMS value is exact
            using NOREF = Field<31, 1>;    // NOREF flag. Reads as zero
        };

    };

    // System control block
    struct SCB {
        // CPUID base register
        struct CPUID : public RegisterReadOnly<0xe000ed00> {
            using Revision = Field<0, 4>;    // Revision number
            using PartNo = Field<4, 12>;    // Part number of the processor
            using Constant = Field<16, 4>;    // Reads as 0xF
            using Variant = Field<20, 4>;    // Variant number
            using Implementer = Field<24, 8>;    // Implementer code
        };

        // Interrupt control and state register
        struct ICSR : public Register<0xe000ed04> {
            using VECTACTIVE = Field<0, 9>;    // Active vector
            using RETTOBASE = Field<11, 1>;    // Return to base level
            using VECTPENDING = Field<12, 7>;    // Pending vector
            using ISRPENDING = Field<22, 1>;    // Interrupt pending flag
            using PENDSTCLR = Field<25, 1>;    // SysTick exception clear-pending bit
            using PENDSTSET = Field<26, 1>;    // SysTick exception set-pending bit
            using PENDSVCLR = Field<27, 1>;    // PendSV clear-pending bit
            using PENDSVSET = Field<28, 1>;    // PendSV set-pending bit
            using NMIPENDSET = Field<31, 1>;    // NMI set-pending bit.
        };

        // Vector table offset register
        struct VTOR : public Register<0xe000ed08> {
            using TBLOFF = Field<9, 21>;    // Vector table base offset field
        };

        // Application interrupt and reset control register
        struct AIRCR : public Register<0xe000ed0c> {
            using VECTRESET = Field<0, 1>;    // VECTRESET
            using VECTCLRACTIVE = Field<1, 1>;    // VECTCLRACTIVE
            using SYSRESETREQ = Field<2, 1>;    // SYSRESETREQ
            using PRIGROUP = Field<8, 3>;    // PRIGROUP
            using ENDIANESS = Field<15, 1>;    // ENDIANESS
            using VECTKEYSTAT = Field<16, 16>;    // Register key
        };

        // System control register
        struct SCR : public Register<0xe000ed10> {
            using SLEEPONEXIT = Field<1, 1>;    // SLEEPONEXIT
            using SLEEPDEEP = Field<2, 1>;    // SLEEPDEEP
            using SEVEONPEND = Field<4, 1>;    // Send Event on Pending bit
        };

        // Configuration and control register
        struct CCR : public Register<0xe000ed14> {
            using NONBASETHRDENA = Field<0, 1>;    // Configures how the processor enters Thread mode
            using USERSETMPEND = Field<1, 1>;    // USERSETMPEND
            using UNALIGN__TRP = Field<3, 1>;    // UNALIGN_ TRP
            using DIV_0_TRP = Field<4, 1>;    // DIV_0_TRP
            using BFHFNMIGN = Field<8, 1>;    // BFHFNMIGN
            using STKALIGN = Field<9, 1>;    // STKALIGN
        };

        // System handler priority registers
        struct SHPR1 : public Register<0xe000ed18> {
            using PRI_4 = Field<0, 8>;    // Priority of system handler 4
            using PRI_5 = Field<8, 8>;    // Priority of system handler 5
            using PRI_6 = Field<16, 8>;    // Priority of system handler 6
        };

        // System handler priority registers
        struct SHPR2 : public Register<0xe000ed1c> {
            using PRI_11 = Field<24, 8>;    // Priority of system handler 11
        };

        // System handler priority registers
        struct SHPR3 : public Register<0xe000ed20> {
            using PRI_14 = Field<16, 8>;    // Priority of system handler 14
            using PRI_15 = Field<24, 8>;    // Priority of system handler 15
        };

        // System handler control and state register
        struct SHCRS : public Register<0xe000ed24> {
            using MEMFAULTACT = Field<0, 1>;    // Memory management fault exception active bit
            using BUSFAULTACT = Field<1, 1>;    // Bus fault exception active bit
            using USGFAULTACT = Field<3, 1>;    // Usage fault exception active bit
            using SVCALLACT = Field<7, 1>;    // SVC call active bit
            using MONITORACT = Field<8, 1>;    // Debug monitor active bit
            using PENDSVACT = Field<10, 1>;    // PendSV exception active bit
            using SYSTICKACT = Field<11, 1>;    // SysTick exception active bit
            using USGFAULTPENDED = Field<12, 1>;    // Usage fault exception pending bit
            using MEMFAULTPENDED = Field<13, 1>;    // Memory management fault exception pending bit
            using BUSFAULTPENDED = Field<14, 1>;    // Bus fault exception pending bit
            using SVCALLPENDED = Field<15, 1>;    // SVC call pending bit
            using MEMFAULTENA = Field<16, 1>;    // Memory management fault enable bit
            using BUSFAULTENA = Field<17, 1>;    // Bus fault enable bit
            using USGFAULTENA = Field<18, 1>;    // Usage fault enable bit
        };

        // Configurable fault status register
        struct CFSR_UFSR_BFSR_MMFSR : public Register<0xe000ed28> {
            using IACCVIOL = Field<1, 1>;    // Instruction access violation flag
            using MUNSTKERR = Field<3, 1>;    // Memory manager fault on unstacking for a return from exception
            using MSTKERR = Field<4, 1>;    // Memory manager fault on stacking for exception entry.
            using MLSPERR = Field<5, 1>;    // MLSPERR
            using MMARVALID = Field<7, 1>;    // Memory Management Fault Address Register (MMAR) valid flag
            using IBUSERR = Field<8, 1>;    // Instruction bus error
            using PRECISERR = Field<9, 1>;    // Precise data bus error
            using IMPRECISERR = Field<10, 1>;    // Imprecise data bus error
            using UNSTKERR = Field<11, 1>;    // Bus fault on unstacking for a return from exception
            using STKERR = Field<12, 1>;    // Bus fault on stacking for exception entry
            using LSPERR = Field<13, 1>;    // Bus fault on floating-point lazy state preservation
            using BFARVALID = Field<15, 1>;    // Bus Fault Address Register (BFAR) valid flag
            using UNDEFINSTR = Field<16, 1>;    // Undefined instruction usage fault
            using INVSTATE = Field<17, 1>;    // Invalid state usage fault
            using INVPC = Field<18, 1>;    // Invalid PC load usage fault
            using NOCP = Field<19, 1>;    // No coprocessor usage fault.
            using UNALIGNED = Field<24, 1>;    // Unaligned access usage fault
            using DIVBYZERO = Field<25, 1>;    // Divide by zero usage fault
        };

        // Hard fault status register
        struct HFSR : public Register<0xe000ed2c> {
            using VECTTBL = Field<1, 1>;    // Vector table hard fault
            using FORCED = Field<30, 1>;    // Forced hard fault
            using DEBUG_VT = Field<31, 1>;    // Reserved for Debug use
        };

        // Memory management fault address register
        struct MMFAR : public Register<0xe000ed34> {
            using Field = Field<0, 32>;    // Memory management fault address
        };

        // Bus fault address register
        struct BFAR : public Register<0xe000ed38> {
            using Field = Field<0, 32>;    // Bus fault address
        };

        // Auxiliary fault status register
        struct AFSR : public Register<0xe000ed3c> {
            using IMPDEF = Field<0, 32>;    // Implementation defined
        };

    };

    // Nested vectored interrupt controller
    struct NVIC_STIR {
        // Software trigger interrupt register
        struct STIR : public Register<0xe000ef00> {
            using INTID = Field<0, 9>;    // Software generated interrupt ID
        };

    };

    // Floating point unit CPACR
    struct FPU_CPACR {
        // Coprocessor access control register
        struct CPACR : public Register<0xe000ed88> {
            using CP = Field<20, 4>;    // CP
        };

    };

    // System control block ACTLR
    struct SCB_ACTRL {
        // Auxiliary control register
        struct ACTRL : public Register<0xe000e008> {
            using DISMCYCINT = Field<0, 1>;    // DISMCYCINT
            using DISDEFWBUF = Field<1, 1>;    // DISDEFWBUF
            using DISFOLD = Field<2, 1>;    // DISFOLD
            using DISFPCA = Field<8, 1>;    // DISFPCA
            using DISOOFP = Field<9, 1>;    // DISOOFP
        };

    };

    static std::uint32_t const numInterrupts = 85;

    enum class Interrupts: std::uint32_t {
        PVD = 1,
        TAMP_STAMP = 2,
        RTC_WKUP = 3,
        FLASH = 4,
        RCC = 5,
        EXTI0 = 6,
        EXTI1 = 7,
        EXTI2 = 8,
        EXTI3 = 9,
        EXTI4 = 10,
        ADC = 18,
        EXTI9_5 = 23,
        TIM1_BRK_TIM9 = 24,
        TIM1_UP_TIM10 = 25,
        TIM1_TRG_COM_TIM11 = 26,
        TIM1_CC = 27,
        TIM2 = 28,
        TIM3 = 29,
        I2C1_EV = 31,
        I2C1_ER = 32,
        I2C2_EV = 33,
        I2C2_ER = 34,
        SPI1 = 35,
        SPI2 = 36,
        EXTI15_10 = 40,
        RTC_Alarm = 41,
        OTG_FS_WKUP = 42,
        SDIO = 49,
        SPI3 = 51,
        OTG_FS = 67,
        I2C3_EV = 72,
        I2C3_ER = 73,
        FPU = 81,
        SPI4 = 84,
    };

};
